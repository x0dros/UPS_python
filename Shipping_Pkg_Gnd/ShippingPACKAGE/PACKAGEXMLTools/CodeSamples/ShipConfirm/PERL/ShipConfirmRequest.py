#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Sep 26 18:57:18 2018 by generateDS.py version 2.29.24.
# Python 3.6.6 |Anaconda custom (64-bit)| (default, Jun 28 2018, 11:07:29)  [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]
#
# Command line options:
#   ('-o', 'ShipConfirmRequest.py')
#   ('-s', 'my_sc_req.py')
#   ('--super', 'ShipConfirmRequest')
#
# Command line arguments:
#   /Users/x0dros/Downloads/Shipping_Pkg_Gnd/ShippingPACKAGE/PACKAGEXMLTools/Schemas/ShipConfirmRequest.xsd
#
# Command line:
#   /Users/x0dros/anaconda3/bin/generateDS -o "ShipConfirmRequest.py" -s "my_sc_req.py" --super="ShipConfirmRequest" /Users/x0dros/Downloads/Shipping_Pkg_Gnd/ShippingPACKAGE/PACKAGEXMLTools/Schemas/ShipConfirmRequest.xsd
#
# Current working directory (os.getcwd()):
#   PERL
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#

#NB:
def setXMLdeclaration(outfile):
    outfile.write('<?xml version="1.0" encoding="UTF-8"?> \n')

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#
#NB:

class ShipmentConfirmRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Request=None, Shipment=None, LabelSpecification=None, ReceiptSpecification=None):
        self.original_tagname_ = None
        self.Request = Request
        self.Shipment = Shipment
        self.LabelSpecification = LabelSpecification
        self.ReceiptSpecification = ReceiptSpecification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentConfirmRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentConfirmRequest.subclass:
            return ShipmentConfirmRequest.subclass(*args_, **kwargs_)
        else:
            return ShipmentConfirmRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Request(self): return self.Request
    def set_Request(self, Request): self.Request = Request
    def get_Shipment(self): return self.Shipment
    def set_Shipment(self, Shipment): self.Shipment = Shipment
    def get_LabelSpecification(self): return self.LabelSpecification
    def set_LabelSpecification(self, LabelSpecification): self.LabelSpecification = LabelSpecification
    def get_ReceiptSpecification(self): return self.ReceiptSpecification
    def set_ReceiptSpecification(self, ReceiptSpecification): self.ReceiptSpecification = ReceiptSpecification
    def hasContent_(self):
        if (
            self.Request is not None or
            self.Shipment is not None or
            self.LabelSpecification is not None or
            self.ReceiptSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentConfirmRequest', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentConfirmRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        setXMLdeclaration(outfile) #NB
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentConfirmRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentConfirmRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentConfirmRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentConfirmRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            self.Request.export(outfile, level, namespaceprefix_, name_='Request', pretty_print=pretty_print)
        if self.Shipment is not None:
            self.Shipment.export(outfile, level, namespaceprefix_, name_='Shipment', pretty_print=pretty_print)
        if self.LabelSpecification is not None:
            self.LabelSpecification.export(outfile, level, namespaceprefix_, name_='LabelSpecification', pretty_print=pretty_print)
        if self.ReceiptSpecification is not None:
            self.ReceiptSpecification.export(outfile, level, namespaceprefix_, name_='ReceiptSpecification', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory()
            obj_.build(child_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory()
            obj_.build(child_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
        elif nodeName_ == 'LabelSpecification':
            obj_ = LabelSpecificationType.factory()
            obj_.build(child_)
            self.LabelSpecification = obj_
            obj_.original_tagname_ = 'LabelSpecification'
        elif nodeName_ == 'ReceiptSpecification':
            obj_ = ReceiptSpecificationType.factory()
            obj_.build(child_)
            self.ReceiptSpecification = obj_
            obj_.original_tagname_ = 'ReceiptSpecification'
# end class ShipmentConfirmRequest


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RequestAction=None, RequestOption=None, SubVersion=None, TransactionReference=None):
        self.original_tagname_ = None
        self.RequestAction = RequestAction
        self.RequestOption = RequestOption
        self.SubVersion = SubVersion
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestAction(self): return self.RequestAction
    def set_RequestAction(self, RequestAction): self.RequestAction = RequestAction
    def get_RequestOption(self): return self.RequestOption
    def set_RequestOption(self, RequestOption): self.RequestOption = RequestOption
    def get_SubVersion(self): return self.SubVersion
    def set_SubVersion(self, SubVersion): self.SubVersion = SubVersion
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.RequestAction is not None or
            self.RequestOption is not None or
            self.SubVersion is not None or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='RequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestAction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RequestAction>%s</RequestAction>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RequestAction), input_name='RequestAction')), eol_))
        if self.RequestOption is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RequestOption>%s</RequestOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RequestOption), input_name='RequestOption')), eol_))
        if self.SubVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SubVersion>%s</SubVersion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubVersion), input_name='SubVersion')), eol_))
        if self.TransactionReference is not None:
            self.TransactionReference.export(outfile, level, namespaceprefix_, name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestAction':
            RequestAction_ = child_.text
            RequestAction_ = self.gds_validate_string(RequestAction_, node, 'RequestAction')
            self.RequestAction = RequestAction_
        elif nodeName_ == 'RequestOption':
            RequestOption_ = child_.text
            RequestOption_ = self.gds_validate_string(RequestOption_, node, 'RequestOption')
            self.RequestOption = RequestOption_
        elif nodeName_ == 'SubVersion':
            SubVersion_ = child_.text
            SubVersion_ = self.gds_validate_string(SubVersion_, node, 'SubVersion')
            self.SubVersion = SubVersion_
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None):
        self.original_tagname_ = None
        self.CustomerContext = CustomerContext
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def hasContent_(self):
        if (
            self.CustomerContext is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TransactionReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TransactionReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TransactionReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CustomerContext>%s</CustomerContext>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
# end class TransactionReferenceType


class ShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, ReturnService=None, DocumentsOnly=None, Shipper=None, ShipTo=None, AlternateDeliveryAddress=None, ShipFrom=None, SoldTo=None, PaymentInformation=None, ItemizedPaymentInformation=None, GoodsNotInFreeCirculationIndicator=None, RateInformation=None, MovementReferenceNumber=None, ReferenceNumber=None, Service=None, InvoiceLineTotal=None, NumOfPiecesInShipment=None, USPSEndorsement=None, MILabelCN22Indicator=None, SubClassification=None, CostCenter=None, CostCenterBarcodeIndicator=None, PackageID=None, PackageIDBarcodeIndicator=None, IrregularIndicator=None, ShipmentServiceOptions=None, Package=None, MIDualReturnShipmentKey=None, MIDualReturnShipmentIndicator=None, RatingMethodRequestedIndicator=None, TaxInformationIndicator=None, ShipmentIndicationType=None, PromotionalDiscountInformation=None, DGSignatoryInfo=None):
        self.original_tagname_ = None
        self.Description = Description
        self.ReturnService = ReturnService
        self.DocumentsOnly = DocumentsOnly
        self.Shipper = Shipper
        self.ShipTo = ShipTo
        self.AlternateDeliveryAddress = AlternateDeliveryAddress
        self.ShipFrom = ShipFrom
        self.SoldTo = SoldTo
        self.PaymentInformation = PaymentInformation
        self.ItemizedPaymentInformation = ItemizedPaymentInformation
        self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator
        self.RateInformation = RateInformation
        self.MovementReferenceNumber = MovementReferenceNumber
        if ReferenceNumber is None:
            self.ReferenceNumber = []
        else:
            self.ReferenceNumber = ReferenceNumber
        self.Service = Service
        self.InvoiceLineTotal = InvoiceLineTotal
        self.NumOfPiecesInShipment = NumOfPiecesInShipment
        self.USPSEndorsement = USPSEndorsement
        self.MILabelCN22Indicator = MILabelCN22Indicator
        self.SubClassification = SubClassification
        self.CostCenter = CostCenter
        self.CostCenterBarcodeIndicator = CostCenterBarcodeIndicator
        self.PackageID = PackageID
        self.PackageIDBarcodeIndicator = PackageIDBarcodeIndicator
        self.IrregularIndicator = IrregularIndicator
        self.ShipmentServiceOptions = ShipmentServiceOptions
        if Package is None:
            self.Package = []
        else:
            self.Package = Package
        self.MIDualReturnShipmentKey = MIDualReturnShipmentKey
        self.MIDualReturnShipmentIndicator = MIDualReturnShipmentIndicator
        self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator
        self.TaxInformationIndicator = TaxInformationIndicator
        if ShipmentIndicationType is None:
            self.ShipmentIndicationType = []
        else:
            self.ShipmentIndicationType = ShipmentIndicationType
        self.PromotionalDiscountInformation = PromotionalDiscountInformation
        self.DGSignatoryInfo = DGSignatoryInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ReturnService(self): return self.ReturnService
    def set_ReturnService(self, ReturnService): self.ReturnService = ReturnService
    def get_DocumentsOnly(self): return self.DocumentsOnly
    def set_DocumentsOnly(self, DocumentsOnly): self.DocumentsOnly = DocumentsOnly
    def get_Shipper(self): return self.Shipper
    def set_Shipper(self, Shipper): self.Shipper = Shipper
    def get_ShipTo(self): return self.ShipTo
    def set_ShipTo(self, ShipTo): self.ShipTo = ShipTo
    def get_AlternateDeliveryAddress(self): return self.AlternateDeliveryAddress
    def set_AlternateDeliveryAddress(self, AlternateDeliveryAddress): self.AlternateDeliveryAddress = AlternateDeliveryAddress
    def get_ShipFrom(self): return self.ShipFrom
    def set_ShipFrom(self, ShipFrom): self.ShipFrom = ShipFrom
    def get_SoldTo(self): return self.SoldTo
    def set_SoldTo(self, SoldTo): self.SoldTo = SoldTo
    def get_PaymentInformation(self): return self.PaymentInformation
    def set_PaymentInformation(self, PaymentInformation): self.PaymentInformation = PaymentInformation
    def get_ItemizedPaymentInformation(self): return self.ItemizedPaymentInformation
    def set_ItemizedPaymentInformation(self, ItemizedPaymentInformation): self.ItemizedPaymentInformation = ItemizedPaymentInformation
    def get_GoodsNotInFreeCirculationIndicator(self): return self.GoodsNotInFreeCirculationIndicator
    def set_GoodsNotInFreeCirculationIndicator(self, GoodsNotInFreeCirculationIndicator): self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator
    def get_RateInformation(self): return self.RateInformation
    def set_RateInformation(self, RateInformation): self.RateInformation = RateInformation
    def get_MovementReferenceNumber(self): return self.MovementReferenceNumber
    def set_MovementReferenceNumber(self, MovementReferenceNumber): self.MovementReferenceNumber = MovementReferenceNumber
    def get_ReferenceNumber(self): return self.ReferenceNumber
    def set_ReferenceNumber(self, ReferenceNumber): self.ReferenceNumber = ReferenceNumber
    def add_ReferenceNumber(self, value): self.ReferenceNumber.append(value)
    def insert_ReferenceNumber_at(self, index, value): self.ReferenceNumber.insert(index, value)
    def replace_ReferenceNumber_at(self, index, value): self.ReferenceNumber[index] = value
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_InvoiceLineTotal(self): return self.InvoiceLineTotal
    def set_InvoiceLineTotal(self, InvoiceLineTotal): self.InvoiceLineTotal = InvoiceLineTotal
    def get_NumOfPiecesInShipment(self): return self.NumOfPiecesInShipment
    def set_NumOfPiecesInShipment(self, NumOfPiecesInShipment): self.NumOfPiecesInShipment = NumOfPiecesInShipment
    def get_USPSEndorsement(self): return self.USPSEndorsement
    def set_USPSEndorsement(self, USPSEndorsement): self.USPSEndorsement = USPSEndorsement
    def get_MILabelCN22Indicator(self): return self.MILabelCN22Indicator
    def set_MILabelCN22Indicator(self, MILabelCN22Indicator): self.MILabelCN22Indicator = MILabelCN22Indicator
    def get_SubClassification(self): return self.SubClassification
    def set_SubClassification(self, SubClassification): self.SubClassification = SubClassification
    def get_CostCenter(self): return self.CostCenter
    def set_CostCenter(self, CostCenter): self.CostCenter = CostCenter
    def get_CostCenterBarcodeIndicator(self): return self.CostCenterBarcodeIndicator
    def set_CostCenterBarcodeIndicator(self, CostCenterBarcodeIndicator): self.CostCenterBarcodeIndicator = CostCenterBarcodeIndicator
    def get_PackageID(self): return self.PackageID
    def set_PackageID(self, PackageID): self.PackageID = PackageID
    def get_PackageIDBarcodeIndicator(self): return self.PackageIDBarcodeIndicator
    def set_PackageIDBarcodeIndicator(self, PackageIDBarcodeIndicator): self.PackageIDBarcodeIndicator = PackageIDBarcodeIndicator
    def get_IrregularIndicator(self): return self.IrregularIndicator
    def set_IrregularIndicator(self, IrregularIndicator): self.IrregularIndicator = IrregularIndicator
    def get_ShipmentServiceOptions(self): return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions): self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_Package(self): return self.Package
    def set_Package(self, Package): self.Package = Package
    def add_Package(self, value): self.Package.append(value)
    def insert_Package_at(self, index, value): self.Package.insert(index, value)
    def replace_Package_at(self, index, value): self.Package[index] = value
    def get_MIDualReturnShipmentKey(self): return self.MIDualReturnShipmentKey
    def set_MIDualReturnShipmentKey(self, MIDualReturnShipmentKey): self.MIDualReturnShipmentKey = MIDualReturnShipmentKey
    def get_MIDualReturnShipmentIndicator(self): return self.MIDualReturnShipmentIndicator
    def set_MIDualReturnShipmentIndicator(self, MIDualReturnShipmentIndicator): self.MIDualReturnShipmentIndicator = MIDualReturnShipmentIndicator
    def get_RatingMethodRequestedIndicator(self): return self.RatingMethodRequestedIndicator
    def set_RatingMethodRequestedIndicator(self, RatingMethodRequestedIndicator): self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator
    def get_TaxInformationIndicator(self): return self.TaxInformationIndicator
    def set_TaxInformationIndicator(self, TaxInformationIndicator): self.TaxInformationIndicator = TaxInformationIndicator
    def get_ShipmentIndicationType(self): return self.ShipmentIndicationType
    def set_ShipmentIndicationType(self, ShipmentIndicationType): self.ShipmentIndicationType = ShipmentIndicationType
    def add_ShipmentIndicationType(self, value): self.ShipmentIndicationType.append(value)
    def insert_ShipmentIndicationType_at(self, index, value): self.ShipmentIndicationType.insert(index, value)
    def replace_ShipmentIndicationType_at(self, index, value): self.ShipmentIndicationType[index] = value
    def get_PromotionalDiscountInformation(self): return self.PromotionalDiscountInformation
    def set_PromotionalDiscountInformation(self, PromotionalDiscountInformation): self.PromotionalDiscountInformation = PromotionalDiscountInformation
    def get_DGSignatoryInfo(self): return self.DGSignatoryInfo
    def set_DGSignatoryInfo(self, DGSignatoryInfo): self.DGSignatoryInfo = DGSignatoryInfo
    def hasContent_(self):
        if (
            self.Description is not None or
            self.ReturnService is not None or
            self.DocumentsOnly is not None or
            self.Shipper is not None or
            self.ShipTo is not None or
            self.AlternateDeliveryAddress is not None or
            self.ShipFrom is not None or
            self.SoldTo is not None or
            self.PaymentInformation is not None or
            self.ItemizedPaymentInformation is not None or
            self.GoodsNotInFreeCirculationIndicator is not None or
            self.RateInformation is not None or
            self.MovementReferenceNumber is not None or
            self.ReferenceNumber or
            self.Service is not None or
            self.InvoiceLineTotal is not None or
            self.NumOfPiecesInShipment is not None or
            self.USPSEndorsement is not None or
            self.MILabelCN22Indicator is not None or
            self.SubClassification is not None or
            self.CostCenter is not None or
            self.CostCenterBarcodeIndicator is not None or
            self.PackageID is not None or
            self.PackageIDBarcodeIndicator is not None or
            self.IrregularIndicator is not None or
            self.ShipmentServiceOptions is not None or
            self.Package or
            self.MIDualReturnShipmentKey is not None or
            self.MIDualReturnShipmentIndicator is not None or
            self.RatingMethodRequestedIndicator is not None or
            self.TaxInformationIndicator is not None or
            self.ShipmentIndicationType or
            self.PromotionalDiscountInformation is not None or
            self.DGSignatoryInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.ReturnService is not None:
            self.ReturnService.export(outfile, level, namespaceprefix_, name_='ReturnService', pretty_print=pretty_print)
        if self.DocumentsOnly is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DocumentsOnly>%s</DocumentsOnly>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DocumentsOnly), input_name='DocumentsOnly')), eol_))
        if self.Shipper is not None:
            self.Shipper.export(outfile, level, namespaceprefix_, name_='Shipper', pretty_print=pretty_print)
        if self.ShipTo is not None:
            self.ShipTo.export(outfile, level, namespaceprefix_, name_='ShipTo', pretty_print=pretty_print)
        if self.AlternateDeliveryAddress is not None:
            self.AlternateDeliveryAddress.export(outfile, level, namespaceprefix_, name_='AlternateDeliveryAddress', pretty_print=pretty_print)
        if self.ShipFrom is not None:
            self.ShipFrom.export(outfile, level, namespaceprefix_, name_='ShipFrom', pretty_print=pretty_print)
        if self.SoldTo is not None:
            self.SoldTo.export(outfile, level, namespaceprefix_, name_='SoldTo', pretty_print=pretty_print)
        if self.PaymentInformation is not None:
            self.PaymentInformation.export(outfile, level, namespaceprefix_, name_='PaymentInformation', pretty_print=pretty_print)
        if self.ItemizedPaymentInformation is not None:
            self.ItemizedPaymentInformation.export(outfile, level, namespaceprefix_, name_='ItemizedPaymentInformation', pretty_print=pretty_print)
        if self.GoodsNotInFreeCirculationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GoodsNotInFreeCirculationIndicator>%s</GoodsNotInFreeCirculationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GoodsNotInFreeCirculationIndicator), input_name='GoodsNotInFreeCirculationIndicator')), eol_))
        if self.RateInformation is not None:
            self.RateInformation.export(outfile, level, namespaceprefix_, name_='RateInformation', pretty_print=pretty_print)
        if self.MovementReferenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MovementReferenceNumber>%s</MovementReferenceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MovementReferenceNumber), input_name='MovementReferenceNumber')), eol_))
        for ReferenceNumber_ in self.ReferenceNumber:
            ReferenceNumber_.export(outfile, level, namespaceprefix_, name_='ReferenceNumber', pretty_print=pretty_print)
        if self.Service is not None:
            self.Service.export(outfile, level, namespaceprefix_, name_='Service', pretty_print=pretty_print)
        if self.InvoiceLineTotal is not None:
            self.InvoiceLineTotal.export(outfile, level, namespaceprefix_, name_='InvoiceLineTotal', pretty_print=pretty_print)
        if self.NumOfPiecesInShipment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NumOfPiecesInShipment>%s</NumOfPiecesInShipment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumOfPiecesInShipment), input_name='NumOfPiecesInShipment')), eol_))
        if self.USPSEndorsement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<USPSEndorsement>%s</USPSEndorsement>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.USPSEndorsement), input_name='USPSEndorsement')), eol_))
        if self.MILabelCN22Indicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MILabelCN22Indicator>%s</MILabelCN22Indicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MILabelCN22Indicator), input_name='MILabelCN22Indicator')), eol_))
        if self.SubClassification is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SubClassification>%s</SubClassification>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubClassification), input_name='SubClassification')), eol_))
        if self.CostCenter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CostCenter>%s</CostCenter>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CostCenter), input_name='CostCenter')), eol_))
        if self.CostCenterBarcodeIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CostCenterBarcodeIndicator>%s</CostCenterBarcodeIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CostCenterBarcodeIndicator), input_name='CostCenterBarcodeIndicator')), eol_))
        if self.PackageID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackageID>%s</PackageID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageID), input_name='PackageID')), eol_))
        if self.PackageIDBarcodeIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackageIDBarcodeIndicator>%s</PackageIDBarcodeIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageIDBarcodeIndicator), input_name='PackageIDBarcodeIndicator')), eol_))
        if self.IrregularIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IrregularIndicator>%s</IrregularIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IrregularIndicator), input_name='IrregularIndicator')), eol_))
        if self.ShipmentServiceOptions is not None:
            self.ShipmentServiceOptions.export(outfile, level, namespaceprefix_, name_='ShipmentServiceOptions', pretty_print=pretty_print)
        for Package_ in self.Package:
            Package_.export(outfile, level, namespaceprefix_, name_='Package', pretty_print=pretty_print)        
        if self.MIDualReturnShipmentKey is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MIDualReturnShipmentKey>%s</MIDualReturnShipmentKey>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MIDualReturnShipmentKey), input_name='MIDualReturnShipmentKey')), eol_))
        if self.MIDualReturnShipmentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MIDualReturnShipmentIndicator>%s</MIDualReturnShipmentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MIDualReturnShipmentIndicator), input_name='MIDualReturnShipmentIndicator')), eol_))
        if self.RatingMethodRequestedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RatingMethodRequestedIndicator>%s</RatingMethodRequestedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RatingMethodRequestedIndicator), input_name='RatingMethodRequestedIndicator')), eol_))
        if self.TaxInformationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxInformationIndicator>%s</TaxInformationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxInformationIndicator), input_name='TaxInformationIndicator')), eol_))
        for ShipmentIndicationType_ in self.ShipmentIndicationType:
            ShipmentIndicationType_.export(outfile, level, namespaceprefix_, name_='ShipmentIndicationType', pretty_print=pretty_print)
        if self.PromotionalDiscountInformation is not None:
            self.PromotionalDiscountInformation.export(outfile, level, namespaceprefix_, name_='PromotionalDiscountInformation', pretty_print=pretty_print)
        if self.DGSignatoryInfo is not None:
            self.DGSignatoryInfo.export(outfile, level, namespaceprefix_, name_='DGSignatoryInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ReturnService':
            obj_ = ReturnServiceType.factory()
            obj_.build(child_)
            self.ReturnService = obj_
            obj_.original_tagname_ = 'ReturnService'
        elif nodeName_ == 'DocumentsOnly':
            DocumentsOnly_ = child_.text
            DocumentsOnly_ = self.gds_validate_string(DocumentsOnly_, node, 'DocumentsOnly')
            self.DocumentsOnly = DocumentsOnly_
        elif nodeName_ == 'Shipper':
            obj_ = ShipperType.factory()
            obj_.build(child_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory()
            obj_.build(child_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'AlternateDeliveryAddress':
            obj_ = AlternateDeliveryAddressType.factory()
            obj_.build(child_)
            self.AlternateDeliveryAddress = obj_
            obj_.original_tagname_ = 'AlternateDeliveryAddress'
        elif nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory()
            obj_.build(child_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'SoldTo':
            obj_ = SoldToType.factory()
            obj_.build(child_)
            self.SoldTo = obj_
            obj_.original_tagname_ = 'SoldTo'
        elif nodeName_ == 'PaymentInformation':
            obj_ = PaymentInformationType.factory()
            obj_.build(child_)
            self.PaymentInformation = obj_
            obj_.original_tagname_ = 'PaymentInformation'
        elif nodeName_ == 'ItemizedPaymentInformation':
            obj_ = ItemizedPaymentInformationType.factory()
            obj_.build(child_)
            self.ItemizedPaymentInformation = obj_
            obj_.original_tagname_ = 'ItemizedPaymentInformation'
        elif nodeName_ == 'GoodsNotInFreeCirculationIndicator':
            GoodsNotInFreeCirculationIndicator_ = child_.text
            GoodsNotInFreeCirculationIndicator_ = self.gds_validate_string(GoodsNotInFreeCirculationIndicator_, node, 'GoodsNotInFreeCirculationIndicator')
            self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator_
        elif nodeName_ == 'RateInformation':
            obj_ = RateInformationType.factory()
            obj_.build(child_)
            self.RateInformation = obj_
            obj_.original_tagname_ = 'RateInformation'
        elif nodeName_ == 'MovementReferenceNumber':
            MovementReferenceNumber_ = child_.text
            MovementReferenceNumber_ = self.gds_validate_string(MovementReferenceNumber_, node, 'MovementReferenceNumber')
            self.MovementReferenceNumber = MovementReferenceNumber_
        elif nodeName_ == 'ReferenceNumber':
            obj_ = ReferenceNumberType.factory()
            obj_.build(child_)
            self.ReferenceNumber.append(obj_)
            obj_.original_tagname_ = 'ReferenceNumber'
        elif nodeName_ == 'Service':
            obj_ = ServiceType.factory()
            obj_.build(child_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'InvoiceLineTotal':
            obj_ = InvoiceLineTotalType.factory()
            obj_.build(child_)
            self.InvoiceLineTotal = obj_
            obj_.original_tagname_ = 'InvoiceLineTotal'
        elif nodeName_ == 'NumOfPiecesInShipment':
            NumOfPiecesInShipment_ = child_.text
            NumOfPiecesInShipment_ = self.gds_validate_string(NumOfPiecesInShipment_, node, 'NumOfPiecesInShipment')
            self.NumOfPiecesInShipment = NumOfPiecesInShipment_
        elif nodeName_ == 'USPSEndorsement':
            USPSEndorsement_ = child_.text
            USPSEndorsement_ = self.gds_validate_string(USPSEndorsement_, node, 'USPSEndorsement')
            self.USPSEndorsement = USPSEndorsement_
        elif nodeName_ == 'MILabelCN22Indicator':
            MILabelCN22Indicator_ = child_.text
            MILabelCN22Indicator_ = self.gds_validate_string(MILabelCN22Indicator_, node, 'MILabelCN22Indicator')
            self.MILabelCN22Indicator = MILabelCN22Indicator_
        elif nodeName_ == 'SubClassification':
            SubClassification_ = child_.text
            SubClassification_ = self.gds_validate_string(SubClassification_, node, 'SubClassification')
            self.SubClassification = SubClassification_
        elif nodeName_ == 'CostCenter':
            CostCenter_ = child_.text
            CostCenter_ = self.gds_validate_string(CostCenter_, node, 'CostCenter')
            self.CostCenter = CostCenter_
        elif nodeName_ == 'CostCenterBarcodeIndicator':
            CostCenterBarcodeIndicator_ = child_.text
            CostCenterBarcodeIndicator_ = self.gds_validate_string(CostCenterBarcodeIndicator_, node, 'CostCenterBarcodeIndicator')
            self.CostCenterBarcodeIndicator = CostCenterBarcodeIndicator_
        elif nodeName_ == 'PackageID':
            PackageID_ = child_.text
            PackageID_ = self.gds_validate_string(PackageID_, node, 'PackageID')
            self.PackageID = PackageID_
        elif nodeName_ == 'PackageIDBarcodeIndicator':
            PackageIDBarcodeIndicator_ = child_.text
            PackageIDBarcodeIndicator_ = self.gds_validate_string(PackageIDBarcodeIndicator_, node, 'PackageIDBarcodeIndicator')
            self.PackageIDBarcodeIndicator = PackageIDBarcodeIndicator_
        elif nodeName_ == 'IrregularIndicator':
            IrregularIndicator_ = child_.text
            IrregularIndicator_ = self.gds_validate_string(IrregularIndicator_, node, 'IrregularIndicator')
            self.IrregularIndicator = IrregularIndicator_
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType.factory()
            obj_.build(child_)
            self.ShipmentServiceOptions = obj_
            obj_.original_tagname_ = 'ShipmentServiceOptions'
        elif nodeName_ == 'Package':
            obj_ = PackageType.factory()
            obj_.build(child_)
            self.Package.append(obj_)
            obj_.original_tagname_ = 'Package'
        elif nodeName_ == 'MIDualReturnShipmentKey':
            MIDualReturnShipmentKey_ = child_.text
            MIDualReturnShipmentKey_ = self.gds_validate_string(MIDualReturnShipmentKey_, node, 'MIDualReturnShipmentKey')
            self.MIDualReturnShipmentKey = MIDualReturnShipmentKey_
        elif nodeName_ == 'MIDualReturnShipmentIndicator':
            MIDualReturnShipmentIndicator_ = child_.text
            MIDualReturnShipmentIndicator_ = self.gds_validate_string(MIDualReturnShipmentIndicator_, node, 'MIDualReturnShipmentIndicator')
            self.MIDualReturnShipmentIndicator = MIDualReturnShipmentIndicator_
        elif nodeName_ == 'RatingMethodRequestedIndicator':
            RatingMethodRequestedIndicator_ = child_.text
            RatingMethodRequestedIndicator_ = self.gds_validate_string(RatingMethodRequestedIndicator_, node, 'RatingMethodRequestedIndicator')
            self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator_
        elif nodeName_ == 'TaxInformationIndicator':
            TaxInformationIndicator_ = child_.text
            TaxInformationIndicator_ = self.gds_validate_string(TaxInformationIndicator_, node, 'TaxInformationIndicator')
            self.TaxInformationIndicator = TaxInformationIndicator_
        elif nodeName_ == 'ShipmentIndicationType':
            obj_ = IndicationType.factory()
            obj_.build(child_)
            self.ShipmentIndicationType.append(obj_)
            obj_.original_tagname_ = 'ShipmentIndicationType'
        elif nodeName_ == 'PromotionalDiscountInformation':
            obj_ = PromotionalDiscountInformationType.factory()
            obj_.build(child_)
            self.PromotionalDiscountInformation = obj_
            obj_.original_tagname_ = 'PromotionalDiscountInformation'
        elif nodeName_ == 'DGSignatoryInfo':
            obj_ = DGSignatoryInfoType.factory()
            obj_.build(child_)
            self.DGSignatoryInfo = obj_
            obj_.original_tagname_ = 'DGSignatoryInfo'
# end class ShipmentType


class PromotionalDiscountInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PromoCode=None, PromoAliasCode=None):
        self.original_tagname_ = None
        self.PromoCode = PromoCode
        self.PromoAliasCode = PromoAliasCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PromotionalDiscountInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PromotionalDiscountInformationType.subclass:
            return PromotionalDiscountInformationType.subclass(*args_, **kwargs_)
        else:
            return PromotionalDiscountInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PromoCode(self): return self.PromoCode
    def set_PromoCode(self, PromoCode): self.PromoCode = PromoCode
    def get_PromoAliasCode(self): return self.PromoAliasCode
    def set_PromoAliasCode(self, PromoAliasCode): self.PromoAliasCode = PromoAliasCode
    def hasContent_(self):
        if (
            self.PromoCode is not None or
            self.PromoAliasCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PromotionalDiscountInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PromotionalDiscountInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PromotionalDiscountInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PromotionalDiscountInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PromotionalDiscountInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PromotionalDiscountInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PromoCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PromoCode>%s</PromoCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PromoCode), input_name='PromoCode')), eol_))
        if self.PromoAliasCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PromoAliasCode>%s</PromoAliasCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PromoAliasCode), input_name='PromoAliasCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PromoCode':
            PromoCode_ = child_.text
            PromoCode_ = self.gds_validate_string(PromoCode_, node, 'PromoCode')
            self.PromoCode = PromoCode_
        elif nodeName_ == 'PromoAliasCode':
            PromoAliasCode_ = child_.text
            PromoAliasCode_ = self.gds_validate_string(PromoAliasCode_, node, 'PromoAliasCode')
            self.PromoAliasCode = PromoAliasCode_
# end class PromotionalDiscountInformationType


class ReturnServiceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None):
        self.original_tagname_ = None
        self.Code = Code
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnServiceType.subclass:
            return ReturnServiceType.subclass(*args_, **kwargs_)
        else:
            return ReturnServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def hasContent_(self):
        if (
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ReturnServiceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ReturnServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnServiceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ReturnServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
# end class ReturnServiceType


class ShipperType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, CompanyDisplayableName=None, ShipperNumber=None, TaxIdentificationNumber=None, PhoneNumber=None, FaxNumber=None, EMailAddress=None, Address=None):
        self.original_tagname_ = None
        self.Name = Name
        self.AttentionName = AttentionName
        self.CompanyDisplayableName = CompanyDisplayableName
        self.ShipperNumber = ShipperNumber
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.PhoneNumber = PhoneNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperType.subclass:
            return ShipperType.subclass(*args_, **kwargs_)
        else:
            return ShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_CompanyDisplayableName(self): return self.CompanyDisplayableName
    def set_CompanyDisplayableName(self, CompanyDisplayableName): self.CompanyDisplayableName = CompanyDisplayableName
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.CompanyDisplayableName is not None or
            self.ShipperNumber is not None or
            self.TaxIdentificationNumber is not None or
            self.PhoneNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipperType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipperType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipperType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipperType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AttentionName>%s</AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.CompanyDisplayableName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyDisplayableName>%s</CompanyDisplayableName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyDisplayableName), input_name='CompanyDisplayableName')), eol_))
        if self.ShipperNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipperNumber>%s</ShipperNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxIdentificationNumber>%s</TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FaxNumber>%s</FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'CompanyDisplayableName':
            CompanyDisplayableName_ = child_.text
            CompanyDisplayableName_ = self.gds_validate_string(CompanyDisplayableName_, node, 'CompanyDisplayableName')
            self.CompanyDisplayableName = CompanyDisplayableName_
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'Address':
            obj_ = ShipperAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ShipperType


class ShipperAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperAddressType.subclass:
            return ShipperAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipperAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipperAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipperAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipperAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipperAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class ShipperAddressType


class ShipToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, AttentionName=None, TaxIdentificationNumber=None, PhoneNumber=None, FaxNumber=None, EMailAddress=None, Address=None, LocationID=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.AttentionName = AttentionName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.PhoneNumber = PhoneNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
        self.Address = Address
        self.LocationID = LocationID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_LocationID(self): return self.LocationID
    def set_LocationID(self, LocationID): self.LocationID = LocationID
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.AttentionName is not None or
            self.TaxIdentificationNumber is not None or
            self.PhoneNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None or
            self.Address is not None or
            self.LocationID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipToType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AttentionName>%s</AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxIdentificationNumber>%s</TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FaxNumber>%s</FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
        if self.LocationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LocationID>%s</LocationID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'Address':
            obj_ = ShipToAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'LocationID':
            LocationID_ = child_.text
            LocationID_ = self.gds_validate_string(LocationID_, node, 'LocationID')
            self.LocationID = LocationID_
# end class ShipToType


class ShipToAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, ResidentialAddress=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
        self.ResidentialAddress = ResidentialAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToAddressType.subclass:
            return ShipToAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipToAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_ResidentialAddress(self): return self.ResidentialAddress
    def set_ResidentialAddress(self, ResidentialAddress): self.ResidentialAddress = ResidentialAddress
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.ResidentialAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipToAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipToAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipToAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipToAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
        if self.ResidentialAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ResidentialAddress>%s</ResidentialAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialAddress), input_name='ResidentialAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'ResidentialAddress':
            ResidentialAddress_ = child_.text
            ResidentialAddress_ = self.gds_validate_string(ResidentialAddress_, node, 'ResidentialAddress')
            self.ResidentialAddress = ResidentialAddress_
# end class ShipToAddressType


class ShipFromType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, AttentionName=None, TaxIdentificationNumber=None, TaxIDType=None, PhoneNumber=None, FaxNumber=None, Address=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.AttentionName = AttentionName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIDType = TaxIDType
        self.PhoneNumber = PhoneNumber
        self.FaxNumber = FaxNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_TaxIDType(self): return self.TaxIDType
    def set_TaxIDType(self, TaxIDType): self.TaxIDType = TaxIDType
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.AttentionName is not None or
            self.TaxIdentificationNumber is not None or
            self.TaxIDType is not None or
            self.PhoneNumber is not None or
            self.FaxNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipFromType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipFromType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipFromType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipFromType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AttentionName>%s</AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxIdentificationNumber>%s</TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.TaxIDType is not None:
            self.TaxIDType.export(outfile, level, namespaceprefix_, name_='TaxIDType', pretty_print=pretty_print)
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.FaxNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FaxNumber>%s</FaxNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'TaxIDType':
            obj_ = TaxIDCodeDescType.factory()
            obj_.build(child_)
            self.TaxIDType = obj_
            obj_.original_tagname_ = 'TaxIDType'
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'Address':
            obj_ = ShipFromAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ShipFromType


class ShipFromAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromAddressType.subclass:
            return ShipFromAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipFromAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipFromAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipFromAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipFromAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipFromAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipFromAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class ShipFromAddressType


class SoldToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Option=None, CompanyName=None, AttentionName=None, TaxIdentificationNumber=None, PhoneNumber=None, Address=None):
        self.original_tagname_ = None
        self.Option = Option
        self.CompanyName = CompanyName
        self.AttentionName = AttentionName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.PhoneNumber = PhoneNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoldToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoldToType.subclass:
            return SoldToType.subclass(*args_, **kwargs_)
        else:
            return SoldToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Option is not None or
            self.CompanyName is not None or
            self.AttentionName is not None or
            self.TaxIdentificationNumber is not None or
            self.PhoneNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='SoldToType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoldToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SoldToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='SoldToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SoldToType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='SoldToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Option>%s</Option>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AttentionName>%s</AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxIdentificationNumber>%s</TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            Option_ = child_.text
            Option_ = self.gds_validate_string(Option_, node, 'Option')
            self.Option = Option_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'Address':
            obj_ = SoldToAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class SoldToType


class SoldToAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoldToAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoldToAddressType.subclass:
            return SoldToAddressType.subclass(*args_, **kwargs_)
        else:
            return SoldToAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='SoldToAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoldToAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SoldToAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='SoldToAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SoldToAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='SoldToAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class SoldToAddressType


class PaymentInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Prepaid=None, BillThirdParty=None, FreightCollect=None, ConsigneeBilled=None):
        self.original_tagname_ = None
        self.Prepaid = Prepaid
        self.BillThirdParty = BillThirdParty
        self.FreightCollect = FreightCollect
        self.ConsigneeBilled = ConsigneeBilled
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentInformationType.subclass:
            return PaymentInformationType.subclass(*args_, **kwargs_)
        else:
            return PaymentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Prepaid(self): return self.Prepaid
    def set_Prepaid(self, Prepaid): self.Prepaid = Prepaid
    def get_BillThirdParty(self): return self.BillThirdParty
    def set_BillThirdParty(self, BillThirdParty): self.BillThirdParty = BillThirdParty
    def get_FreightCollect(self): return self.FreightCollect
    def set_FreightCollect(self, FreightCollect): self.FreightCollect = FreightCollect
    def get_ConsigneeBilled(self): return self.ConsigneeBilled
    def set_ConsigneeBilled(self, ConsigneeBilled): self.ConsigneeBilled = ConsigneeBilled
    def hasContent_(self):
        if (
            self.Prepaid is not None or
            self.BillThirdParty is not None or
            self.FreightCollect is not None or
            self.ConsigneeBilled is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PaymentInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PaymentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PaymentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Prepaid is not None:
            self.Prepaid.export(outfile, level, namespaceprefix_, name_='Prepaid', pretty_print=pretty_print)
        if self.BillThirdParty is not None:
            self.BillThirdParty.export(outfile, level, namespaceprefix_, name_='BillThirdParty', pretty_print=pretty_print)
        if self.FreightCollect is not None:
            self.FreightCollect.export(outfile, level, namespaceprefix_, name_='FreightCollect', pretty_print=pretty_print)
        if self.ConsigneeBilled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ConsigneeBilled>%s</ConsigneeBilled>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneeBilled), input_name='ConsigneeBilled')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Prepaid':
            obj_ = PrepaidType.factory()
            obj_.build(child_)
            self.Prepaid = obj_
            obj_.original_tagname_ = 'Prepaid'
        elif nodeName_ == 'BillThirdParty':
            obj_ = BillThirdPartyType.factory()
            obj_.build(child_)
            self.BillThirdParty = obj_
            obj_.original_tagname_ = 'BillThirdParty'
        elif nodeName_ == 'FreightCollect':
            obj_ = FreightCollectType.factory()
            obj_.build(child_)
            self.FreightCollect = obj_
            obj_.original_tagname_ = 'FreightCollect'
        elif nodeName_ == 'ConsigneeBilled':
            ConsigneeBilled_ = child_.text
            ConsigneeBilled_ = self.gds_validate_string(ConsigneeBilled_, node, 'ConsigneeBilled')
            self.ConsigneeBilled = ConsigneeBilled_
# end class PaymentInformationType


class PrepaidType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BillShipper=None):
        self.original_tagname_ = None
        self.BillShipper = BillShipper
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrepaidType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrepaidType.subclass:
            return PrepaidType.subclass(*args_, **kwargs_)
        else:
            return PrepaidType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillShipper(self): return self.BillShipper
    def set_BillShipper(self, BillShipper): self.BillShipper = BillShipper
    def hasContent_(self):
        if (
            self.BillShipper is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PrepaidType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrepaidType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrepaidType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PrepaidType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrepaidType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PrepaidType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillShipper is not None:
            self.BillShipper.export(outfile, level, namespaceprefix_, name_='BillShipper', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillShipper':
            obj_ = BillShipperType.factory()
            obj_.build(child_)
            self.BillShipper = obj_
            obj_.original_tagname_ = 'BillShipper'
# end class PrepaidType


class BillShipperType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, CreditCard=None, AlternatePaymentMethod=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.CreditCard = CreditCard
        self.AlternatePaymentMethod = AlternatePaymentMethod
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillShipperType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillShipperType.subclass:
            return BillShipperType.subclass(*args_, **kwargs_)
        else:
            return BillShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_CreditCard(self): return self.CreditCard
    def set_CreditCard(self, CreditCard): self.CreditCard = CreditCard
    def get_AlternatePaymentMethod(self): return self.AlternatePaymentMethod
    def set_AlternatePaymentMethod(self, AlternatePaymentMethod): self.AlternatePaymentMethod = AlternatePaymentMethod
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.CreditCard is not None or
            self.AlternatePaymentMethod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BillShipperType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillShipperType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillShipperType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BillShipperType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillShipperType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BillShipperType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountNumber>%s</AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.CreditCard is not None:
            self.CreditCard.export(outfile, level, namespaceprefix_, name_='CreditCard', pretty_print=pretty_print)
        if self.AlternatePaymentMethod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AlternatePaymentMethod>%s</AlternatePaymentMethod>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AlternatePaymentMethod), input_name='AlternatePaymentMethod')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'CreditCard':
            obj_ = CreditCardType.factory()
            obj_.build(child_)
            self.CreditCard = obj_
            obj_.original_tagname_ = 'CreditCard'
        elif nodeName_ == 'AlternatePaymentMethod':
            AlternatePaymentMethod_ = child_.text
            AlternatePaymentMethod_ = self.gds_validate_string(AlternatePaymentMethod_, node, 'AlternatePaymentMethod')
            self.AlternatePaymentMethod = AlternatePaymentMethod_
# end class BillShipperType


class CreditCardType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Number=None, ExpirationDate=None, SecurityCode=None, Address=None):
        self.original_tagname_ = None
        self.Type = Type
        self.Number = Number
        self.ExpirationDate = ExpirationDate
        self.SecurityCode = SecurityCode
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCardType.subclass:
            return CreditCardType.subclass(*args_, **kwargs_)
        else:
            return CreditCardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_SecurityCode(self): return self.SecurityCode
    def set_SecurityCode(self, SecurityCode): self.SecurityCode = SecurityCode
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Number is not None or
            self.ExpirationDate is not None or
            self.SecurityCode is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='CreditCardType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCardType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='CreditCardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCardType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='CreditCardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Type>%s</Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExpirationDate>%s</ExpirationDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExpirationDate), input_name='ExpirationDate')), eol_))
        if self.SecurityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SecurityCode>%s</SecurityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SecurityCode), input_name='SecurityCode')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
        elif nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'ExpirationDate':
            ExpirationDate_ = child_.text
            ExpirationDate_ = self.gds_validate_string(ExpirationDate_, node, 'ExpirationDate')
            self.ExpirationDate = ExpirationDate_
        elif nodeName_ == 'SecurityCode':
            SecurityCode_ = child_.text
            SecurityCode_ = self.gds_validate_string(SecurityCode_, node, 'SecurityCode')
            self.SecurityCode = SecurityCode_
        elif nodeName_ == 'Address':
            obj_ = CreditCardAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CreditCardType


class CreditCardAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCardAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCardAddressType.subclass:
            return CreditCardAddressType.subclass(*args_, **kwargs_)
        else:
            return CreditCardAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='CreditCardAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCardAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCardAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='CreditCardAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCardAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='CreditCardAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class CreditCardAddressType


class BillThirdPartyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BillThirdPartyShipper=None):
        self.original_tagname_ = None
        self.BillThirdPartyShipper = BillThirdPartyShipper
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillThirdPartyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillThirdPartyType.subclass:
            return BillThirdPartyType.subclass(*args_, **kwargs_)
        else:
            return BillThirdPartyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillThirdPartyShipper(self): return self.BillThirdPartyShipper
    def set_BillThirdPartyShipper(self, BillThirdPartyShipper): self.BillThirdPartyShipper = BillThirdPartyShipper
    def hasContent_(self):
        if (
            self.BillThirdPartyShipper is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BillThirdPartyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillThirdPartyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillThirdPartyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BillThirdPartyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillThirdPartyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BillThirdPartyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillThirdPartyShipper is not None:
            self.BillThirdPartyShipper.export(outfile, level, namespaceprefix_, name_='BillThirdPartyShipper', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillThirdPartyShipper':
            obj_ = BillThirdPartyShipperType.factory()
            obj_.build(child_)
            self.BillThirdPartyShipper = obj_
            obj_.original_tagname_ = 'BillThirdPartyShipper'
# end class BillThirdPartyType


class BillThirdPartyShipperType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, ThirdParty=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.ThirdParty = ThirdParty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillThirdPartyShipperType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillThirdPartyShipperType.subclass:
            return BillThirdPartyShipperType.subclass(*args_, **kwargs_)
        else:
            return BillThirdPartyShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_ThirdParty(self): return self.ThirdParty
    def set_ThirdParty(self, ThirdParty): self.ThirdParty = ThirdParty
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.ThirdParty is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BillThirdPartyShipperType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillThirdPartyShipperType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillThirdPartyShipperType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BillThirdPartyShipperType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillThirdPartyShipperType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BillThirdPartyShipperType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountNumber>%s</AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.ThirdParty is not None:
            self.ThirdParty.export(outfile, level, namespaceprefix_, name_='ThirdParty', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'ThirdParty':
            obj_ = ThirdPartyType.factory()
            obj_.build(child_)
            self.ThirdParty = obj_
            obj_.original_tagname_ = 'ThirdParty'
# end class BillThirdPartyShipperType


class ThirdPartyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Address=None):
        self.original_tagname_ = None
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ThirdPartyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ThirdPartyType.subclass:
            return ThirdPartyType.subclass(*args_, **kwargs_)
        else:
            return ThirdPartyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ThirdPartyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ThirdPartyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ThirdPartyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ThirdPartyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ThirdPartyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ThirdPartyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Address':
            obj_ = ThirdPartyAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ThirdPartyType


class ThirdPartyAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ThirdPartyAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ThirdPartyAddressType.subclass:
            return ThirdPartyAddressType.subclass(*args_, **kwargs_)
        else:
            return ThirdPartyAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ThirdPartyAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ThirdPartyAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ThirdPartyAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ThirdPartyAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ThirdPartyAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ThirdPartyAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class ThirdPartyAddressType


class FreightCollectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BillReceiver=None):
        self.original_tagname_ = None
        self.BillReceiver = BillReceiver
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightCollectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightCollectType.subclass:
            return FreightCollectType.subclass(*args_, **kwargs_)
        else:
            return FreightCollectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillReceiver(self): return self.BillReceiver
    def set_BillReceiver(self, BillReceiver): self.BillReceiver = BillReceiver
    def hasContent_(self):
        if (
            self.BillReceiver is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='FreightCollectType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightCollectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightCollectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='FreightCollectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightCollectType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='FreightCollectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillReceiver is not None:
            self.BillReceiver.export(outfile, level, namespaceprefix_, name_='BillReceiver', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillReceiver':
            obj_ = BillReceiverType.factory()
            obj_.build(child_)
            self.BillReceiver = obj_
            obj_.original_tagname_ = 'BillReceiver'
# end class FreightCollectType


class BillReceiverType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Address=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillReceiverType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillReceiverType.subclass:
            return BillReceiverType.subclass(*args_, **kwargs_)
        else:
            return BillReceiverType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BillReceiverType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillReceiverType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillReceiverType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BillReceiverType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillReceiverType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BillReceiverType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountNumber>%s</AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Address':
            obj_ = BillReceiverAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class BillReceiverType


class BillReceiverAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None):
        self.original_tagname_ = None
        self.PostalCode = PostalCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillReceiverAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillReceiverAddressType.subclass:
            return BillReceiverAddressType.subclass(*args_, **kwargs_)
        else:
            return BillReceiverAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def hasContent_(self):
        if (
            self.PostalCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BillReceiverAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillReceiverAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillReceiverAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BillReceiverAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillReceiverAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BillReceiverAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
# end class BillReceiverAddressType


class ItemizedPaymentInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentCharge=None, SplitDutyVATIndicator=None):
        self.original_tagname_ = None
        if ShipmentCharge is None:
            self.ShipmentCharge = []
        else:
            self.ShipmentCharge = ShipmentCharge
        self.SplitDutyVATIndicator = SplitDutyVATIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemizedPaymentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemizedPaymentInformationType.subclass:
            return ItemizedPaymentInformationType.subclass(*args_, **kwargs_)
        else:
            return ItemizedPaymentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentCharge(self): return self.ShipmentCharge
    def set_ShipmentCharge(self, ShipmentCharge): self.ShipmentCharge = ShipmentCharge
    def add_ShipmentCharge(self, value): self.ShipmentCharge.append(value)
    def insert_ShipmentCharge_at(self, index, value): self.ShipmentCharge.insert(index, value)
    def replace_ShipmentCharge_at(self, index, value): self.ShipmentCharge[index] = value
    def get_SplitDutyVATIndicator(self): return self.SplitDutyVATIndicator
    def set_SplitDutyVATIndicator(self, SplitDutyVATIndicator): self.SplitDutyVATIndicator = SplitDutyVATIndicator
    def hasContent_(self):
        if (
            self.ShipmentCharge or
            self.SplitDutyVATIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ItemizedPaymentInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ItemizedPaymentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ItemizedPaymentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ItemizedPaymentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ItemizedPaymentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ItemizedPaymentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShipmentCharge_ in self.ShipmentCharge:
            ShipmentCharge_.export(outfile, level, namespaceprefix_, name_='ShipmentCharge', pretty_print=pretty_print)
        if self.SplitDutyVATIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SplitDutyVATIndicator>%s</SplitDutyVATIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SplitDutyVATIndicator), input_name='SplitDutyVATIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentCharge':
            obj_ = ShipmentChargeType.factory()
            obj_.build(child_)
            self.ShipmentCharge.append(obj_)
            obj_.original_tagname_ = 'ShipmentCharge'
        elif nodeName_ == 'SplitDutyVATIndicator':
            SplitDutyVATIndicator_ = child_.text
            SplitDutyVATIndicator_ = self.gds_validate_string(SplitDutyVATIndicator_, node, 'SplitDutyVATIndicator')
            self.SplitDutyVATIndicator = SplitDutyVATIndicator_
# end class ItemizedPaymentInformationType


class ShipmentChargeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, BillShipper=None, BillReceiver=None, BillThirdParty=None, ConsigneeBilled=None):
        self.original_tagname_ = None
        self.Type = Type
        self.BillShipper = BillShipper
        self.BillReceiver = BillReceiver
        self.BillThirdParty = BillThirdParty
        self.ConsigneeBilled = ConsigneeBilled
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentChargeType.subclass:
            return ShipmentChargeType.subclass(*args_, **kwargs_)
        else:
            return ShipmentChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_BillShipper(self): return self.BillShipper
    def set_BillShipper(self, BillShipper): self.BillShipper = BillShipper
    def get_BillReceiver(self): return self.BillReceiver
    def set_BillReceiver(self, BillReceiver): self.BillReceiver = BillReceiver
    def get_BillThirdParty(self): return self.BillThirdParty
    def set_BillThirdParty(self, BillThirdParty): self.BillThirdParty = BillThirdParty
    def get_ConsigneeBilled(self): return self.ConsigneeBilled
    def set_ConsigneeBilled(self, ConsigneeBilled): self.ConsigneeBilled = ConsigneeBilled
    def hasContent_(self):
        if (
            self.Type is not None or
            self.BillShipper is not None or
            self.BillReceiver is not None or
            self.BillThirdParty is not None or
            self.ConsigneeBilled is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentChargeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Type>%s</Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.BillShipper is not None:
            self.BillShipper.export(outfile, level, namespaceprefix_, name_='BillShipper', pretty_print=pretty_print)
        if self.BillReceiver is not None:
            self.BillReceiver.export(outfile, level, namespaceprefix_, name_='BillReceiver', pretty_print=pretty_print)
        if self.BillThirdParty is not None:
            self.BillThirdParty.export(outfile, level, namespaceprefix_, name_='BillThirdParty', pretty_print=pretty_print)
        if self.ConsigneeBilled is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ConsigneeBilled>%s</ConsigneeBilled>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneeBilled), input_name='ConsigneeBilled')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
        elif nodeName_ == 'BillShipper':
            obj_ = BillShipperType.factory()
            obj_.build(child_)
            self.BillShipper = obj_
            obj_.original_tagname_ = 'BillShipper'
        elif nodeName_ == 'BillReceiver':
            obj_ = BillReceiverType.factory()
            obj_.build(child_)
            self.BillReceiver = obj_
            obj_.original_tagname_ = 'BillReceiver'
        elif nodeName_ == 'BillThirdParty':
            obj_ = ItemizedBillThirdPartyType.factory()
            obj_.build(child_)
            self.BillThirdParty = obj_
            obj_.original_tagname_ = 'BillThirdParty'
        elif nodeName_ == 'ConsigneeBilled':
            ConsigneeBilled_ = child_.text
            ConsigneeBilled_ = self.gds_validate_string(ConsigneeBilled_, node, 'ConsigneeBilled')
            self.ConsigneeBilled = ConsigneeBilled_
# end class ShipmentChargeType


class ItemizedBillThirdPartyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BillThirdPartyShipper=None, BillThirdPartyConsignee=None):
        self.original_tagname_ = None
        self.BillThirdPartyShipper = BillThirdPartyShipper
        self.BillThirdPartyConsignee = BillThirdPartyConsignee
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ItemizedBillThirdPartyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ItemizedBillThirdPartyType.subclass:
            return ItemizedBillThirdPartyType.subclass(*args_, **kwargs_)
        else:
            return ItemizedBillThirdPartyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BillThirdPartyShipper(self): return self.BillThirdPartyShipper
    def set_BillThirdPartyShipper(self, BillThirdPartyShipper): self.BillThirdPartyShipper = BillThirdPartyShipper
    def get_BillThirdPartyConsignee(self): return self.BillThirdPartyConsignee
    def set_BillThirdPartyConsignee(self, BillThirdPartyConsignee): self.BillThirdPartyConsignee = BillThirdPartyConsignee
    def hasContent_(self):
        if (
            self.BillThirdPartyShipper is not None or
            self.BillThirdPartyConsignee is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ItemizedBillThirdPartyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ItemizedBillThirdPartyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ItemizedBillThirdPartyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ItemizedBillThirdPartyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ItemizedBillThirdPartyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ItemizedBillThirdPartyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillThirdPartyShipper is not None:
            self.BillThirdPartyShipper.export(outfile, level, namespaceprefix_, name_='BillThirdPartyShipper', pretty_print=pretty_print)
        if self.BillThirdPartyConsignee is not None:
            self.BillThirdPartyConsignee.export(outfile, level, namespaceprefix_, name_='BillThirdPartyConsignee', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BillThirdPartyShipper':
            obj_ = BillThirdPartyShipperType.factory()
            obj_.build(child_)
            self.BillThirdPartyShipper = obj_
            obj_.original_tagname_ = 'BillThirdPartyShipper'
        elif nodeName_ == 'BillThirdPartyConsignee':
            obj_ = BillThirdPartyConsigneeType.factory()
            obj_.build(child_)
            self.BillThirdPartyConsignee = obj_
            obj_.original_tagname_ = 'BillThirdPartyConsignee'
# end class ItemizedBillThirdPartyType


class BillThirdPartyConsigneeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, ThirdParty=None):
        self.original_tagname_ = None
        self.AccountNumber = AccountNumber
        self.ThirdParty = ThirdParty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillThirdPartyConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillThirdPartyConsigneeType.subclass:
            return BillThirdPartyConsigneeType.subclass(*args_, **kwargs_)
        else:
            return BillThirdPartyConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_ThirdParty(self): return self.ThirdParty
    def set_ThirdParty(self, ThirdParty): self.ThirdParty = ThirdParty
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.ThirdParty is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BillThirdPartyConsigneeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillThirdPartyConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillThirdPartyConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BillThirdPartyConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillThirdPartyConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BillThirdPartyConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AccountNumber>%s</AccountNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), eol_))
        if self.ThirdParty is not None:
            self.ThirdParty.export(outfile, level, namespaceprefix_, name_='ThirdParty', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'ThirdParty':
            obj_ = ThirdPartyType.factory()
            obj_.build(child_)
            self.ThirdParty = obj_
            obj_.original_tagname_ = 'ThirdParty'
# end class BillThirdPartyConsigneeType


class RateInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NegotiatedRatesIndicator=None, RateChartIndicator=None, TPFCNegotiatedRatesIndicator=None, UserLevelDiscountIndicator=None):
        self.original_tagname_ = None
        self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
        self.RateChartIndicator = RateChartIndicator
        self.TPFCNegotiatedRatesIndicator = TPFCNegotiatedRatesIndicator
        self.UserLevelDiscountIndicator = UserLevelDiscountIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateInformationType.subclass:
            return RateInformationType.subclass(*args_, **kwargs_)
        else:
            return RateInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NegotiatedRatesIndicator(self): return self.NegotiatedRatesIndicator
    def set_NegotiatedRatesIndicator(self, NegotiatedRatesIndicator): self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
    def get_RateChartIndicator(self): return self.RateChartIndicator
    def set_RateChartIndicator(self, RateChartIndicator): self.RateChartIndicator = RateChartIndicator
    def get_TPFCNegotiatedRatesIndicator(self): return self.TPFCNegotiatedRatesIndicator
    def set_TPFCNegotiatedRatesIndicator(self, TPFCNegotiatedRatesIndicator): self.TPFCNegotiatedRatesIndicator = TPFCNegotiatedRatesIndicator
    def get_UserLevelDiscountIndicator(self): return self.UserLevelDiscountIndicator
    def set_UserLevelDiscountIndicator(self, UserLevelDiscountIndicator): self.UserLevelDiscountIndicator = UserLevelDiscountIndicator
    def hasContent_(self):
        if (
            self.NegotiatedRatesIndicator is not None or
            self.RateChartIndicator is not None or
            self.TPFCNegotiatedRatesIndicator is not None or
            self.UserLevelDiscountIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='RateInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RateInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='RateInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RateInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='RateInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NegotiatedRatesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NegotiatedRatesIndicator>%s</NegotiatedRatesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NegotiatedRatesIndicator), input_name='NegotiatedRatesIndicator')), eol_))
        if self.RateChartIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RateChartIndicator>%s</RateChartIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RateChartIndicator), input_name='RateChartIndicator')), eol_))
        if self.TPFCNegotiatedRatesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TPFCNegotiatedRatesIndicator>%s</TPFCNegotiatedRatesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TPFCNegotiatedRatesIndicator), input_name='TPFCNegotiatedRatesIndicator')), eol_))
        if self.UserLevelDiscountIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UserLevelDiscountIndicator>%s</UserLevelDiscountIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UserLevelDiscountIndicator), input_name='UserLevelDiscountIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NegotiatedRatesIndicator':
            NegotiatedRatesIndicator_ = child_.text
            NegotiatedRatesIndicator_ = self.gds_validate_string(NegotiatedRatesIndicator_, node, 'NegotiatedRatesIndicator')
            self.NegotiatedRatesIndicator = NegotiatedRatesIndicator_
        elif nodeName_ == 'RateChartIndicator':
            RateChartIndicator_ = child_.text
            RateChartIndicator_ = self.gds_validate_string(RateChartIndicator_, node, 'RateChartIndicator')
            self.RateChartIndicator = RateChartIndicator_
        elif nodeName_ == 'TPFCNegotiatedRatesIndicator':
            TPFCNegotiatedRatesIndicator_ = child_.text
            TPFCNegotiatedRatesIndicator_ = self.gds_validate_string(TPFCNegotiatedRatesIndicator_, node, 'TPFCNegotiatedRatesIndicator')
            self.TPFCNegotiatedRatesIndicator = TPFCNegotiatedRatesIndicator_
        elif nodeName_ == 'UserLevelDiscountIndicator':
            UserLevelDiscountIndicator_ = child_.text
            UserLevelDiscountIndicator_ = self.gds_validate_string(UserLevelDiscountIndicator_, node, 'UserLevelDiscountIndicator')
            self.UserLevelDiscountIndicator = UserLevelDiscountIndicator_
# end class RateInformationType


class ReferenceNumberType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BarCodeIndicator=None, Code=None, Value=None):
        self.original_tagname_ = None
        self.BarCodeIndicator = BarCodeIndicator
        self.Code = Code
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceNumberType.subclass:
            return ReferenceNumberType.subclass(*args_, **kwargs_)
        else:
            return ReferenceNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BarCodeIndicator(self): return self.BarCodeIndicator
    def set_BarCodeIndicator(self, BarCodeIndicator): self.BarCodeIndicator = BarCodeIndicator
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.BarCodeIndicator is not None or
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ReferenceNumberType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceNumberType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ReferenceNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReferenceNumberType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ReferenceNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BarCodeIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<BarCodeIndicator>%s</BarCodeIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BarCodeIndicator), input_name='BarCodeIndicator')), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Value>%s</Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BarCodeIndicator':
            BarCodeIndicator_ = child_.text
            BarCodeIndicator_ = self.gds_validate_string(BarCodeIndicator_, node, 'BarCodeIndicator')
            self.BarCodeIndicator = BarCodeIndicator_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class ReferenceNumberType


class ServiceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceType.subclass:
            return ServiceType.subclass(*args_, **kwargs_)
        else:
            return ServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ServiceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ServiceType


class InvoiceLineTotalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvoiceLineTotalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvoiceLineTotalType.subclass:
            return InvoiceLineTotalType.subclass(*args_, **kwargs_)
        else:
            return InvoiceLineTotalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='InvoiceLineTotalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvoiceLineTotalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InvoiceLineTotalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='InvoiceLineTotalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InvoiceLineTotalType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='InvoiceLineTotalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InvoiceLineTotalType


class ShipmentServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SaturdayDelivery=None, SaturdayPickupIndicator=None, COD=None, AccessPointCOD=None, DeliverToAddresseeOnlyIndicator=None, DirectDeliveryOnlyIndicator=None, Notification=None, LabelDelivery=None, InternationalForms=None, ReturnOfDocumentIndicator=None, DeliveryConfirmation=None, ImportControlIndicator=None, LabelMethod=None, CommercialInvoiceRemovalIndicator=None, UPScarbonneutralIndicator=None, PreAlertNotification=None, ExchangeForwardIndicator=None, HoldForPickupIndicator=None, DropoffAtUPSFacilityIndicator=None, LiftGateForPickUpIndicator=None, LiftGateForDeliveryIndicator=None, SDLShipmentIndicator=None, EPRAReleaseCode=None, RestrictedArticles=None):
        self.original_tagname_ = None
        self.SaturdayDelivery = SaturdayDelivery
        self.SaturdayPickupIndicator = SaturdayPickupIndicator
        self.COD = COD
        self.AccessPointCOD = AccessPointCOD
        self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator
        self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator
        if Notification is None:
            self.Notification = []
        else:
            self.Notification = Notification
        self.LabelDelivery = LabelDelivery
        self.InternationalForms = InternationalForms
        self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
        self.DeliveryConfirmation = DeliveryConfirmation
        self.ImportControlIndicator = ImportControlIndicator
        self.LabelMethod = LabelMethod
        self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator
        self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
        if PreAlertNotification is None:
            self.PreAlertNotification = []
        else:
            self.PreAlertNotification = PreAlertNotification
        self.ExchangeForwardIndicator = ExchangeForwardIndicator
        self.HoldForPickupIndicator = HoldForPickupIndicator
        self.DropoffAtUPSFacilityIndicator = DropoffAtUPSFacilityIndicator
        self.LiftGateForPickUpIndicator = LiftGateForPickUpIndicator
        self.LiftGateForDeliveryIndicator = LiftGateForDeliveryIndicator
        self.SDLShipmentIndicator = SDLShipmentIndicator
        self.EPRAReleaseCode = EPRAReleaseCode
        self.RestrictedArticles = RestrictedArticles
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SaturdayDelivery(self): return self.SaturdayDelivery
    def set_SaturdayDelivery(self, SaturdayDelivery): self.SaturdayDelivery = SaturdayDelivery
    def get_SaturdayPickupIndicator(self): return self.SaturdayPickupIndicator
    def set_SaturdayPickupIndicator(self, SaturdayPickupIndicator): self.SaturdayPickupIndicator = SaturdayPickupIndicator
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_AccessPointCOD(self): return self.AccessPointCOD
    def set_AccessPointCOD(self, AccessPointCOD): self.AccessPointCOD = AccessPointCOD
    def get_DeliverToAddresseeOnlyIndicator(self): return self.DeliverToAddresseeOnlyIndicator
    def set_DeliverToAddresseeOnlyIndicator(self, DeliverToAddresseeOnlyIndicator): self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator
    def get_DirectDeliveryOnlyIndicator(self): return self.DirectDeliveryOnlyIndicator
    def set_DirectDeliveryOnlyIndicator(self, DirectDeliveryOnlyIndicator): self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator
    def get_Notification(self): return self.Notification
    def set_Notification(self, Notification): self.Notification = Notification
    def add_Notification(self, value): self.Notification.append(value)
    def insert_Notification_at(self, index, value): self.Notification.insert(index, value)
    def replace_Notification_at(self, index, value): self.Notification[index] = value
    def get_LabelDelivery(self): return self.LabelDelivery
    def set_LabelDelivery(self, LabelDelivery): self.LabelDelivery = LabelDelivery
    def get_InternationalForms(self): return self.InternationalForms
    def set_InternationalForms(self, InternationalForms): self.InternationalForms = InternationalForms
    def get_ReturnOfDocumentIndicator(self): return self.ReturnOfDocumentIndicator
    def set_ReturnOfDocumentIndicator(self, ReturnOfDocumentIndicator): self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
    def get_DeliveryConfirmation(self): return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation): self.DeliveryConfirmation = DeliveryConfirmation
    def get_ImportControlIndicator(self): return self.ImportControlIndicator
    def set_ImportControlIndicator(self, ImportControlIndicator): self.ImportControlIndicator = ImportControlIndicator
    def get_LabelMethod(self): return self.LabelMethod
    def set_LabelMethod(self, LabelMethod): self.LabelMethod = LabelMethod
    def get_CommercialInvoiceRemovalIndicator(self): return self.CommercialInvoiceRemovalIndicator
    def set_CommercialInvoiceRemovalIndicator(self, CommercialInvoiceRemovalIndicator): self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator
    def get_UPScarbonneutralIndicator(self): return self.UPScarbonneutralIndicator
    def set_UPScarbonneutralIndicator(self, UPScarbonneutralIndicator): self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
    def get_PreAlertNotification(self): return self.PreAlertNotification
    def set_PreAlertNotification(self, PreAlertNotification): self.PreAlertNotification = PreAlertNotification
    def add_PreAlertNotification(self, value): self.PreAlertNotification.append(value)
    def insert_PreAlertNotification_at(self, index, value): self.PreAlertNotification.insert(index, value)
    def replace_PreAlertNotification_at(self, index, value): self.PreAlertNotification[index] = value
    def get_ExchangeForwardIndicator(self): return self.ExchangeForwardIndicator
    def set_ExchangeForwardIndicator(self, ExchangeForwardIndicator): self.ExchangeForwardIndicator = ExchangeForwardIndicator
    def get_HoldForPickupIndicator(self): return self.HoldForPickupIndicator
    def set_HoldForPickupIndicator(self, HoldForPickupIndicator): self.HoldForPickupIndicator = HoldForPickupIndicator
    def get_DropoffAtUPSFacilityIndicator(self): return self.DropoffAtUPSFacilityIndicator
    def set_DropoffAtUPSFacilityIndicator(self, DropoffAtUPSFacilityIndicator): self.DropoffAtUPSFacilityIndicator = DropoffAtUPSFacilityIndicator
    def get_LiftGateForPickUpIndicator(self): return self.LiftGateForPickUpIndicator
    def set_LiftGateForPickUpIndicator(self, LiftGateForPickUpIndicator): self.LiftGateForPickUpIndicator = LiftGateForPickUpIndicator
    def get_LiftGateForDeliveryIndicator(self): return self.LiftGateForDeliveryIndicator
    def set_LiftGateForDeliveryIndicator(self, LiftGateForDeliveryIndicator): self.LiftGateForDeliveryIndicator = LiftGateForDeliveryIndicator
    def get_SDLShipmentIndicator(self): return self.SDLShipmentIndicator
    def set_SDLShipmentIndicator(self, SDLShipmentIndicator): self.SDLShipmentIndicator = SDLShipmentIndicator
    def get_EPRAReleaseCode(self): return self.EPRAReleaseCode
    def set_EPRAReleaseCode(self, EPRAReleaseCode): self.EPRAReleaseCode = EPRAReleaseCode
    def get_RestrictedArticles(self): return self.RestrictedArticles
    def set_RestrictedArticles(self, RestrictedArticles): self.RestrictedArticles = RestrictedArticles
    def hasContent_(self):
        if (
            self.SaturdayDelivery is not None or
            self.SaturdayPickupIndicator is not None or
            self.COD is not None or
            self.AccessPointCOD is not None or
            self.DeliverToAddresseeOnlyIndicator is not None or
            self.DirectDeliveryOnlyIndicator is not None or
            self.Notification or
            self.LabelDelivery is not None or
            self.InternationalForms is not None or
            self.ReturnOfDocumentIndicator is not None or
            self.DeliveryConfirmation is not None or
            self.ImportControlIndicator is not None or
            self.LabelMethod is not None or
            self.CommercialInvoiceRemovalIndicator is not None or
            self.UPScarbonneutralIndicator is not None or
            self.PreAlertNotification or
            self.ExchangeForwardIndicator is not None or
            self.HoldForPickupIndicator is not None or
            self.DropoffAtUPSFacilityIndicator is not None or
            self.LiftGateForPickUpIndicator is not None or
            self.LiftGateForDeliveryIndicator is not None or
            self.SDLShipmentIndicator is not None or
            self.EPRAReleaseCode is not None or
            self.RestrictedArticles is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SaturdayDelivery is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SaturdayDelivery>%s</SaturdayDelivery>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDelivery), input_name='SaturdayDelivery')), eol_))
        if self.SaturdayPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SaturdayPickupIndicator>%s</SaturdayPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayPickupIndicator), input_name='SaturdayPickupIndicator')), eol_))
        if self.COD is not None:
            self.COD.export(outfile, level, namespaceprefix_, name_='COD', pretty_print=pretty_print)
        if self.AccessPointCOD is not None:
            self.AccessPointCOD.export(outfile, level, namespaceprefix_, name_='AccessPointCOD', pretty_print=pretty_print)
        if self.DeliverToAddresseeOnlyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DeliverToAddresseeOnlyIndicator>%s</DeliverToAddresseeOnlyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeliverToAddresseeOnlyIndicator), input_name='DeliverToAddresseeOnlyIndicator')), eol_))
        if self.DirectDeliveryOnlyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DirectDeliveryOnlyIndicator>%s</DirectDeliveryOnlyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DirectDeliveryOnlyIndicator), input_name='DirectDeliveryOnlyIndicator')), eol_))
        for Notification_ in self.Notification:
            Notification_.export(outfile, level, namespaceprefix_, name_='Notification', pretty_print=pretty_print)
        if self.LabelDelivery is not None:
            self.LabelDelivery.export(outfile, level, namespaceprefix_, name_='LabelDelivery', pretty_print=pretty_print)
        if self.InternationalForms is not None:
            self.InternationalForms.export(outfile, level, namespaceprefix_, name_='InternationalForms', pretty_print=pretty_print)
        if self.ReturnOfDocumentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReturnOfDocumentIndicator>%s</ReturnOfDocumentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReturnOfDocumentIndicator), input_name='ReturnOfDocumentIndicator')), eol_))
        if self.DeliveryConfirmation is not None:
            self.DeliveryConfirmation.export(outfile, level, namespaceprefix_, name_='DeliveryConfirmation', pretty_print=pretty_print)
        if self.ImportControlIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ImportControlIndicator>%s</ImportControlIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ImportControlIndicator), input_name='ImportControlIndicator')), eol_))
        if self.LabelMethod is not None:
            self.LabelMethod.export(outfile, level, namespaceprefix_, name_='LabelMethod', pretty_print=pretty_print)
        if self.CommercialInvoiceRemovalIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommercialInvoiceRemovalIndicator>%s</CommercialInvoiceRemovalIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommercialInvoiceRemovalIndicator), input_name='CommercialInvoiceRemovalIndicator')), eol_))
        if self.UPScarbonneutralIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UPScarbonneutralIndicator>%s</UPScarbonneutralIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UPScarbonneutralIndicator), input_name='UPScarbonneutralIndicator')), eol_))
        for PreAlertNotification_ in self.PreAlertNotification:
            PreAlertNotification_.export(outfile, level, namespaceprefix_, name_='PreAlertNotification', pretty_print=pretty_print)
        if self.ExchangeForwardIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExchangeForwardIndicator>%s</ExchangeForwardIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeForwardIndicator), input_name='ExchangeForwardIndicator')), eol_))
        if self.HoldForPickupIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HoldForPickupIndicator>%s</HoldForPickupIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HoldForPickupIndicator), input_name='HoldForPickupIndicator')), eol_))
        if self.DropoffAtUPSFacilityIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DropoffAtUPSFacilityIndicator>%s</DropoffAtUPSFacilityIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DropoffAtUPSFacilityIndicator), input_name='DropoffAtUPSFacilityIndicator')), eol_))
        if self.LiftGateForPickUpIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LiftGateForPickUpIndicator>%s</LiftGateForPickUpIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateForPickUpIndicator), input_name='LiftGateForPickUpIndicator')), eol_))
        if self.LiftGateForDeliveryIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LiftGateForDeliveryIndicator>%s</LiftGateForDeliveryIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateForDeliveryIndicator), input_name='LiftGateForDeliveryIndicator')), eol_))
        if self.SDLShipmentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SDLShipmentIndicator>%s</SDLShipmentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SDLShipmentIndicator), input_name='SDLShipmentIndicator')), eol_))
        if self.EPRAReleaseCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EPRAReleaseCode>%s</EPRAReleaseCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EPRAReleaseCode), input_name='EPRAReleaseCode')), eol_))
        if self.RestrictedArticles is not None:
            self.RestrictedArticles.export(outfile, level, namespaceprefix_, name_='RestrictedArticles', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SaturdayDelivery':
            SaturdayDelivery_ = child_.text
            SaturdayDelivery_ = self.gds_validate_string(SaturdayDelivery_, node, 'SaturdayDelivery')
            self.SaturdayDelivery = SaturdayDelivery_
        elif nodeName_ == 'SaturdayPickupIndicator':
            SaturdayPickupIndicator_ = child_.text
            SaturdayPickupIndicator_ = self.gds_validate_string(SaturdayPickupIndicator_, node, 'SaturdayPickupIndicator')
            self.SaturdayPickupIndicator = SaturdayPickupIndicator_
        elif nodeName_ == 'COD':
            obj_ = ShipmentServiceOptionsCODType.factory()
            obj_.build(child_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'AccessPointCOD':
            obj_ = ShipmentServiceOptionsAccessPointCODType.factory()
            obj_.build(child_)
            self.AccessPointCOD = obj_
            obj_.original_tagname_ = 'AccessPointCOD'
        elif nodeName_ == 'DeliverToAddresseeOnlyIndicator':
            DeliverToAddresseeOnlyIndicator_ = child_.text
            DeliverToAddresseeOnlyIndicator_ = self.gds_validate_string(DeliverToAddresseeOnlyIndicator_, node, 'DeliverToAddresseeOnlyIndicator')
            self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator_
        elif nodeName_ == 'DirectDeliveryOnlyIndicator':
            DirectDeliveryOnlyIndicator_ = child_.text
            DirectDeliveryOnlyIndicator_ = self.gds_validate_string(DirectDeliveryOnlyIndicator_, node, 'DirectDeliveryOnlyIndicator')
            self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator_
        elif nodeName_ == 'Notification':
            obj_ = ShipmentServiceOptionsNotificationType.factory()
            obj_.build(child_)
            self.Notification.append(obj_)
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'LabelDelivery':
            obj_ = LabelDeliveryType.factory()
            obj_.build(child_)
            self.LabelDelivery = obj_
            obj_.original_tagname_ = 'LabelDelivery'
        elif nodeName_ == 'InternationalForms':
            obj_ = InternationalFormsType.factory()
            obj_.build(child_)
            self.InternationalForms = obj_
            obj_.original_tagname_ = 'InternationalForms'
        elif nodeName_ == 'ReturnOfDocumentIndicator':
            ReturnOfDocumentIndicator_ = child_.text
            ReturnOfDocumentIndicator_ = self.gds_validate_string(ReturnOfDocumentIndicator_, node, 'ReturnOfDocumentIndicator')
            self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator_
        elif nodeName_ == 'DeliveryConfirmation':
            obj_ = ShipmentServiceOptionsDeliveryConfirmationType.factory()
            obj_.build(child_)
            self.DeliveryConfirmation = obj_
            obj_.original_tagname_ = 'DeliveryConfirmation'
        elif nodeName_ == 'ImportControlIndicator':
            ImportControlIndicator_ = child_.text
            ImportControlIndicator_ = self.gds_validate_string(ImportControlIndicator_, node, 'ImportControlIndicator')
            self.ImportControlIndicator = ImportControlIndicator_
        elif nodeName_ == 'LabelMethod':
            obj_ = LabelMethodType.factory()
            obj_.build(child_)
            self.LabelMethod = obj_
            obj_.original_tagname_ = 'LabelMethod'
        elif nodeName_ == 'CommercialInvoiceRemovalIndicator':
            CommercialInvoiceRemovalIndicator_ = child_.text
            CommercialInvoiceRemovalIndicator_ = self.gds_validate_string(CommercialInvoiceRemovalIndicator_, node, 'CommercialInvoiceRemovalIndicator')
            self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator_
        elif nodeName_ == 'UPScarbonneutralIndicator':
            UPScarbonneutralIndicator_ = child_.text
            UPScarbonneutralIndicator_ = self.gds_validate_string(UPScarbonneutralIndicator_, node, 'UPScarbonneutralIndicator')
            self.UPScarbonneutralIndicator = UPScarbonneutralIndicator_
        elif nodeName_ == 'PreAlertNotification':
            obj_ = PreAlertNotificationType.factory()
            obj_.build(child_)
            self.PreAlertNotification.append(obj_)
            obj_.original_tagname_ = 'PreAlertNotification'
        elif nodeName_ == 'ExchangeForwardIndicator':
            ExchangeForwardIndicator_ = child_.text
            ExchangeForwardIndicator_ = self.gds_validate_string(ExchangeForwardIndicator_, node, 'ExchangeForwardIndicator')
            self.ExchangeForwardIndicator = ExchangeForwardIndicator_
        elif nodeName_ == 'HoldForPickupIndicator':
            HoldForPickupIndicator_ = child_.text
            HoldForPickupIndicator_ = self.gds_validate_string(HoldForPickupIndicator_, node, 'HoldForPickupIndicator')
            self.HoldForPickupIndicator = HoldForPickupIndicator_
        elif nodeName_ == 'DropoffAtUPSFacilityIndicator':
            DropoffAtUPSFacilityIndicator_ = child_.text
            DropoffAtUPSFacilityIndicator_ = self.gds_validate_string(DropoffAtUPSFacilityIndicator_, node, 'DropoffAtUPSFacilityIndicator')
            self.DropoffAtUPSFacilityIndicator = DropoffAtUPSFacilityIndicator_
        elif nodeName_ == 'LiftGateForPickUpIndicator':
            LiftGateForPickUpIndicator_ = child_.text
            LiftGateForPickUpIndicator_ = self.gds_validate_string(LiftGateForPickUpIndicator_, node, 'LiftGateForPickUpIndicator')
            self.LiftGateForPickUpIndicator = LiftGateForPickUpIndicator_
        elif nodeName_ == 'LiftGateForDeliveryIndicator':
            LiftGateForDeliveryIndicator_ = child_.text
            LiftGateForDeliveryIndicator_ = self.gds_validate_string(LiftGateForDeliveryIndicator_, node, 'LiftGateForDeliveryIndicator')
            self.LiftGateForDeliveryIndicator = LiftGateForDeliveryIndicator_
        elif nodeName_ == 'SDLShipmentIndicator':
            SDLShipmentIndicator_ = child_.text
            SDLShipmentIndicator_ = self.gds_validate_string(SDLShipmentIndicator_, node, 'SDLShipmentIndicator')
            self.SDLShipmentIndicator = SDLShipmentIndicator_
        elif nodeName_ == 'EPRAReleaseCode':
            EPRAReleaseCode_ = child_.text
            EPRAReleaseCode_ = self.gds_validate_string(EPRAReleaseCode_, node, 'EPRAReleaseCode')
            self.EPRAReleaseCode = EPRAReleaseCode_
        elif nodeName_ == 'RestrictedArticles':
            obj_ = RestrictedArticlesType.factory()
            obj_.build(child_)
            self.RestrictedArticles = obj_
            obj_.original_tagname_ = 'RestrictedArticles'
# end class ShipmentServiceOptionsType


class RestrictedArticlesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DiagnosticSpecimensIndicator=None, AlcoholicBeveragesIndicator=None, PerishablesIndicator=None, PlantsIndicator=None, SeedsIndicator=None, SpecialExceptionsIndicator=None, TobaccoIndicator=None):
        self.original_tagname_ = None
        self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator
        self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator
        self.PerishablesIndicator = PerishablesIndicator
        self.PlantsIndicator = PlantsIndicator
        self.SeedsIndicator = SeedsIndicator
        self.SpecialExceptionsIndicator = SpecialExceptionsIndicator
        self.TobaccoIndicator = TobaccoIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RestrictedArticlesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RestrictedArticlesType.subclass:
            return RestrictedArticlesType.subclass(*args_, **kwargs_)
        else:
            return RestrictedArticlesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DiagnosticSpecimensIndicator(self): return self.DiagnosticSpecimensIndicator
    def set_DiagnosticSpecimensIndicator(self, DiagnosticSpecimensIndicator): self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator
    def get_AlcoholicBeveragesIndicator(self): return self.AlcoholicBeveragesIndicator
    def set_AlcoholicBeveragesIndicator(self, AlcoholicBeveragesIndicator): self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator
    def get_PerishablesIndicator(self): return self.PerishablesIndicator
    def set_PerishablesIndicator(self, PerishablesIndicator): self.PerishablesIndicator = PerishablesIndicator
    def get_PlantsIndicator(self): return self.PlantsIndicator
    def set_PlantsIndicator(self, PlantsIndicator): self.PlantsIndicator = PlantsIndicator
    def get_SeedsIndicator(self): return self.SeedsIndicator
    def set_SeedsIndicator(self, SeedsIndicator): self.SeedsIndicator = SeedsIndicator
    def get_SpecialExceptionsIndicator(self): return self.SpecialExceptionsIndicator
    def set_SpecialExceptionsIndicator(self, SpecialExceptionsIndicator): self.SpecialExceptionsIndicator = SpecialExceptionsIndicator
    def get_TobaccoIndicator(self): return self.TobaccoIndicator
    def set_TobaccoIndicator(self, TobaccoIndicator): self.TobaccoIndicator = TobaccoIndicator
    def hasContent_(self):
        if (
            self.DiagnosticSpecimensIndicator is not None or
            self.AlcoholicBeveragesIndicator is not None or
            self.PerishablesIndicator is not None or
            self.PlantsIndicator is not None or
            self.SeedsIndicator is not None or
            self.SpecialExceptionsIndicator is not None or
            self.TobaccoIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='RestrictedArticlesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RestrictedArticlesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RestrictedArticlesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='RestrictedArticlesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RestrictedArticlesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='RestrictedArticlesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DiagnosticSpecimensIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DiagnosticSpecimensIndicator>%s</DiagnosticSpecimensIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DiagnosticSpecimensIndicator), input_name='DiagnosticSpecimensIndicator')), eol_))
        if self.AlcoholicBeveragesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AlcoholicBeveragesIndicator>%s</AlcoholicBeveragesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AlcoholicBeveragesIndicator), input_name='AlcoholicBeveragesIndicator')), eol_))
        if self.PerishablesIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PerishablesIndicator>%s</PerishablesIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PerishablesIndicator), input_name='PerishablesIndicator')), eol_))
        if self.PlantsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PlantsIndicator>%s</PlantsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PlantsIndicator), input_name='PlantsIndicator')), eol_))
        if self.SeedsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SeedsIndicator>%s</SeedsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SeedsIndicator), input_name='SeedsIndicator')), eol_))
        if self.SpecialExceptionsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SpecialExceptionsIndicator>%s</SpecialExceptionsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SpecialExceptionsIndicator), input_name='SpecialExceptionsIndicator')), eol_))
        if self.TobaccoIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TobaccoIndicator>%s</TobaccoIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TobaccoIndicator), input_name='TobaccoIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DiagnosticSpecimensIndicator':
            DiagnosticSpecimensIndicator_ = child_.text
            DiagnosticSpecimensIndicator_ = self.gds_validate_string(DiagnosticSpecimensIndicator_, node, 'DiagnosticSpecimensIndicator')
            self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator_
        elif nodeName_ == 'AlcoholicBeveragesIndicator':
            AlcoholicBeveragesIndicator_ = child_.text
            AlcoholicBeveragesIndicator_ = self.gds_validate_string(AlcoholicBeveragesIndicator_, node, 'AlcoholicBeveragesIndicator')
            self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator_
        elif nodeName_ == 'PerishablesIndicator':
            PerishablesIndicator_ = child_.text
            PerishablesIndicator_ = self.gds_validate_string(PerishablesIndicator_, node, 'PerishablesIndicator')
            self.PerishablesIndicator = PerishablesIndicator_
        elif nodeName_ == 'PlantsIndicator':
            PlantsIndicator_ = child_.text
            PlantsIndicator_ = self.gds_validate_string(PlantsIndicator_, node, 'PlantsIndicator')
            self.PlantsIndicator = PlantsIndicator_
        elif nodeName_ == 'SeedsIndicator':
            SeedsIndicator_ = child_.text
            SeedsIndicator_ = self.gds_validate_string(SeedsIndicator_, node, 'SeedsIndicator')
            self.SeedsIndicator = SeedsIndicator_
        elif nodeName_ == 'SpecialExceptionsIndicator':
            SpecialExceptionsIndicator_ = child_.text
            SpecialExceptionsIndicator_ = self.gds_validate_string(SpecialExceptionsIndicator_, node, 'SpecialExceptionsIndicator')
            self.SpecialExceptionsIndicator = SpecialExceptionsIndicator_
        elif nodeName_ == 'TobaccoIndicator':
            TobaccoIndicator_ = child_.text
            TobaccoIndicator_ = self.gds_validate_string(TobaccoIndicator_, node, 'TobaccoIndicator')
            self.TobaccoIndicator = TobaccoIndicator_
# end class RestrictedArticlesType


class PreAlertNotificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailMessage=None, VoiceMessage=None, TextMessage=None, Locale=None):
        self.original_tagname_ = None
        self.EMailMessage = EMailMessage
        self.VoiceMessage = VoiceMessage
        self.TextMessage = TextMessage
        self.Locale = Locale
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertNotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertNotificationType.subclass:
            return PreAlertNotificationType.subclass(*args_, **kwargs_)
        else:
            return PreAlertNotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailMessage(self): return self.EMailMessage
    def set_EMailMessage(self, EMailMessage): self.EMailMessage = EMailMessage
    def get_VoiceMessage(self): return self.VoiceMessage
    def set_VoiceMessage(self, VoiceMessage): self.VoiceMessage = VoiceMessage
    def get_TextMessage(self): return self.TextMessage
    def set_TextMessage(self, TextMessage): self.TextMessage = TextMessage
    def get_Locale(self): return self.Locale
    def set_Locale(self, Locale): self.Locale = Locale
    def hasContent_(self):
        if (
            self.EMailMessage is not None or
            self.VoiceMessage is not None or
            self.TextMessage is not None or
            self.Locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PreAlertNotificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertNotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertNotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PreAlertNotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertNotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PreAlertNotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailMessage is not None:
            self.EMailMessage.export(outfile, level, namespaceprefix_, name_='EMailMessage', pretty_print=pretty_print)
        if self.VoiceMessage is not None:
            self.VoiceMessage.export(outfile, level, namespaceprefix_, name_='VoiceMessage', pretty_print=pretty_print)
        if self.TextMessage is not None:
            self.TextMessage.export(outfile, level, namespaceprefix_, name_='TextMessage', pretty_print=pretty_print)
        if self.Locale is not None:
            self.Locale.export(outfile, level, namespaceprefix_, name_='Locale', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailMessage':
            obj_ = PreAlertEMailMessageType.factory()
            obj_.build(child_)
            self.EMailMessage = obj_
            obj_.original_tagname_ = 'EMailMessage'
        elif nodeName_ == 'VoiceMessage':
            obj_ = PreAlertVoiceMessageType.factory()
            obj_.build(child_)
            self.VoiceMessage = obj_
            obj_.original_tagname_ = 'VoiceMessage'
        elif nodeName_ == 'TextMessage':
            obj_ = PreAlertTextMessageType.factory()
            obj_.build(child_)
            self.TextMessage = obj_
            obj_.original_tagname_ = 'TextMessage'
        elif nodeName_ == 'Locale':
            obj_ = LocaleType.factory()
            obj_.build(child_)
            self.Locale = obj_
            obj_.original_tagname_ = 'Locale'
# end class PreAlertNotificationType


class PreAlertEMailMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, UndeliverableEMailAddress=None):
        self.original_tagname_ = None
        self.EMailAddress = EMailAddress
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertEMailMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertEMailMessageType.subclass:
            return PreAlertEMailMessageType.subclass(*args_, **kwargs_)
        else:
            return PreAlertEMailMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_UndeliverableEMailAddress(self): return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress): self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def hasContent_(self):
        if (
            self.EMailAddress is not None or
            self.UndeliverableEMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PreAlertEMailMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertEMailMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertEMailMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PreAlertEMailMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertEMailMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PreAlertEMailMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.UndeliverableEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UndeliverableEMailAddress>%s</UndeliverableEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'UndeliverableEMailAddress':
            UndeliverableEMailAddress_ = child_.text
            UndeliverableEMailAddress_ = self.gds_validate_string(UndeliverableEMailAddress_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = UndeliverableEMailAddress_
# end class PreAlertEMailMessageType


class LocaleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Language=None, Dialect=None):
        self.original_tagname_ = None
        self.Language = Language
        self.Dialect = Dialect
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocaleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocaleType.subclass:
            return LocaleType.subclass(*args_, **kwargs_)
        else:
            return LocaleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_Dialect(self): return self.Dialect
    def set_Dialect(self, Dialect): self.Dialect = Dialect
    def hasContent_(self):
        if (
            self.Language is not None or
            self.Dialect is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LocaleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocaleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocaleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LocaleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocaleType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LocaleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Language>%s</Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Language), input_name='Language')), eol_))
        if self.Dialect is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Dialect>%s</Dialect>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Dialect), input_name='Dialect')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
        elif nodeName_ == 'Dialect':
            Dialect_ = child_.text
            Dialect_ = self.gds_validate_string(Dialect_, node, 'Dialect')
            self.Dialect = Dialect_
# end class LocaleType


class PreAlertVoiceMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertVoiceMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertVoiceMessageType.subclass:
            return PreAlertVoiceMessageType.subclass(*args_, **kwargs_)
        else:
            return PreAlertVoiceMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PreAlertVoiceMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertVoiceMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertVoiceMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PreAlertVoiceMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertVoiceMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PreAlertVoiceMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class PreAlertVoiceMessageType


class PreAlertTextMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertTextMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertTextMessageType.subclass:
            return PreAlertTextMessageType.subclass(*args_, **kwargs_)
        else:
            return PreAlertTextMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PreAlertTextMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertTextMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertTextMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PreAlertTextMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertTextMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PreAlertTextMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class PreAlertTextMessageType


class ShipmentServiceOptionsCODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODCode=None, CODFundsCode=None, CODAmount=None):
        self.original_tagname_ = None
        self.CODCode = CODCode
        self.CODFundsCode = CODFundsCode
        self.CODAmount = CODAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsCODType.subclass:
            return ShipmentServiceOptionsCODType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODCode(self): return self.CODCode
    def set_CODCode(self, CODCode): self.CODCode = CODCode
    def get_CODFundsCode(self): return self.CODFundsCode
    def set_CODFundsCode(self, CODFundsCode): self.CODFundsCode = CODFundsCode
    def get_CODAmount(self): return self.CODAmount
    def set_CODAmount(self, CODAmount): self.CODAmount = CODAmount
    def hasContent_(self):
        if (
            self.CODCode is not None or
            self.CODFundsCode is not None or
            self.CODAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsCODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CODCode>%s</CODCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CODCode), input_name='CODCode')), eol_))
        if self.CODFundsCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CODFundsCode>%s</CODFundsCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CODFundsCode), input_name='CODFundsCode')), eol_))
        if self.CODAmount is not None:
            self.CODAmount.export(outfile, level, namespaceprefix_, name_='CODAmount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODCode':
            CODCode_ = child_.text
            CODCode_ = self.gds_validate_string(CODCode_, node, 'CODCode')
            self.CODCode = CODCode_
        elif nodeName_ == 'CODFundsCode':
            CODFundsCode_ = child_.text
            CODFundsCode_ = self.gds_validate_string(CODFundsCode_, node, 'CODFundsCode')
            self.CODFundsCode = CODFundsCode_
        elif nodeName_ == 'CODAmount':
            obj_ = ShipmentServiceOptionsCODAmountType.factory()
            obj_.build(child_)
            self.CODAmount = obj_
            obj_.original_tagname_ = 'CODAmount'
# end class ShipmentServiceOptionsCODType


class ShipmentServiceOptionsCODAmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsCODAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsCODAmountType.subclass:
            return ShipmentServiceOptionsCODAmountType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsCODAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsCODAmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsCODAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsCODAmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsCODAmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsCODAmountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsCODAmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class ShipmentServiceOptionsCODAmountType


class ShipmentServiceOptionsAccessPointCODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsAccessPointCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsAccessPointCODType.subclass:
            return ShipmentServiceOptionsAccessPointCODType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsAccessPointCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsAccessPointCODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsAccessPointCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsAccessPointCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsAccessPointCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsAccessPointCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsAccessPointCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class ShipmentServiceOptionsAccessPointCODType


class ShipmentServiceOptionsNotificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NotificationCode=None, EMailMessage=None, VoiceMessage=None, TextMessage=None, Locale=None):
        self.original_tagname_ = None
        self.NotificationCode = NotificationCode
        self.EMailMessage = EMailMessage
        self.VoiceMessage = VoiceMessage
        self.TextMessage = TextMessage
        self.Locale = Locale
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsNotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsNotificationType.subclass:
            return ShipmentServiceOptionsNotificationType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsNotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationCode(self): return self.NotificationCode
    def set_NotificationCode(self, NotificationCode): self.NotificationCode = NotificationCode
    def get_EMailMessage(self): return self.EMailMessage
    def set_EMailMessage(self, EMailMessage): self.EMailMessage = EMailMessage
    def get_VoiceMessage(self): return self.VoiceMessage
    def set_VoiceMessage(self, VoiceMessage): self.VoiceMessage = VoiceMessage
    def get_TextMessage(self): return self.TextMessage
    def set_TextMessage(self, TextMessage): self.TextMessage = TextMessage
    def get_Locale(self): return self.Locale
    def set_Locale(self, Locale): self.Locale = Locale
    def hasContent_(self):
        if (
            self.NotificationCode is not None or
            self.EMailMessage is not None or
            self.VoiceMessage is not None or
            self.TextMessage is not None or
            self.Locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsNotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsNotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NotificationCode>%s</NotificationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NotificationCode), input_name='NotificationCode')), eol_))
        if self.EMailMessage is not None:
            self.EMailMessage.export(outfile, level, namespaceprefix_, name_='EMailMessage', pretty_print=pretty_print)
        if self.VoiceMessage is not None:
            self.VoiceMessage.export(outfile, level, namespaceprefix_, name_='VoiceMessage', pretty_print=pretty_print)
        if self.TextMessage is not None:
            self.TextMessage.export(outfile, level, namespaceprefix_, name_='TextMessage', pretty_print=pretty_print)
        if self.Locale is not None:
            self.Locale.export(outfile, level, namespaceprefix_, name_='Locale', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationCode':
            NotificationCode_ = child_.text
            NotificationCode_ = self.gds_validate_string(NotificationCode_, node, 'NotificationCode')
            self.NotificationCode = NotificationCode_
        elif nodeName_ == 'EMailMessage':
            obj_ = ShipmentServiceOptionsNotificationEMailMessageType.factory()
            obj_.build(child_)
            self.EMailMessage = obj_
            obj_.original_tagname_ = 'EMailMessage'
        elif nodeName_ == 'VoiceMessage':
            obj_ = ShipmentServiceOptionsNotificationVoiceMessageType.factory()
            obj_.build(child_)
            self.VoiceMessage = obj_
            obj_.original_tagname_ = 'VoiceMessage'
        elif nodeName_ == 'TextMessage':
            obj_ = ShipmentServiceOptionsNotificationTextMessageType.factory()
            obj_.build(child_)
            self.TextMessage = obj_
            obj_.original_tagname_ = 'TextMessage'
        elif nodeName_ == 'Locale':
            obj_ = LocaleType.factory()
            obj_.build(child_)
            self.Locale = obj_
            obj_.original_tagname_ = 'Locale'
# end class ShipmentServiceOptionsNotificationType


class ShipmentServiceOptionsNotificationEMailMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, UndeliverableEMailAddress=None, FromEMailAddress=None, FromName=None, Memo=None, Subject=None, SubjectCode=None):
        self.original_tagname_ = None
        if EMailAddress is None:
            self.EMailAddress = []
        else:
            self.EMailAddress = EMailAddress
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.FromEMailAddress = FromEMailAddress
        self.FromName = FromName
        self.Memo = Memo
        self.Subject = Subject
        self.SubjectCode = SubjectCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsNotificationEMailMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsNotificationEMailMessageType.subclass:
            return ShipmentServiceOptionsNotificationEMailMessageType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsNotificationEMailMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def add_EMailAddress(self, value): self.EMailAddress.append(value)
    def insert_EMailAddress_at(self, index, value): self.EMailAddress.insert(index, value)
    def replace_EMailAddress_at(self, index, value): self.EMailAddress[index] = value
    def get_UndeliverableEMailAddress(self): return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress): self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_FromEMailAddress(self): return self.FromEMailAddress
    def set_FromEMailAddress(self, FromEMailAddress): self.FromEMailAddress = FromEMailAddress
    def get_FromName(self): return self.FromName
    def set_FromName(self, FromName): self.FromName = FromName
    def get_Memo(self): return self.Memo
    def set_Memo(self, Memo): self.Memo = Memo
    def get_Subject(self): return self.Subject
    def set_Subject(self, Subject): self.Subject = Subject
    def get_SubjectCode(self): return self.SubjectCode
    def set_SubjectCode(self, SubjectCode): self.SubjectCode = SubjectCode
    def hasContent_(self):
        if (
            self.EMailAddress or
            self.UndeliverableEMailAddress is not None or
            self.FromEMailAddress is not None or
            self.FromName is not None or
            self.Memo is not None or
            self.Subject is not None or
            self.SubjectCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationEMailMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsNotificationEMailMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsNotificationEMailMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationEMailMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationEMailMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationEMailMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailAddress_ in self.EMailAddress:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EMailAddress_), input_name='EMailAddress')), eol_))
        if self.UndeliverableEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UndeliverableEMailAddress>%s</UndeliverableEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), eol_))
        if self.FromEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromEMailAddress>%s</FromEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromEMailAddress), input_name='FromEMailAddress')), eol_))
        if self.FromName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromName>%s</FromName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromName), input_name='FromName')), eol_))
        if self.Memo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Memo>%s</Memo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Memo), input_name='Memo')), eol_))
        if self.Subject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Subject>%s</Subject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), eol_))
        if self.SubjectCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SubjectCode>%s</SubjectCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubjectCode), input_name='SubjectCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress.append(EMailAddress_)
        elif nodeName_ == 'UndeliverableEMailAddress':
            UndeliverableEMailAddress_ = child_.text
            UndeliverableEMailAddress_ = self.gds_validate_string(UndeliverableEMailAddress_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = UndeliverableEMailAddress_
        elif nodeName_ == 'FromEMailAddress':
            FromEMailAddress_ = child_.text
            FromEMailAddress_ = self.gds_validate_string(FromEMailAddress_, node, 'FromEMailAddress')
            self.FromEMailAddress = FromEMailAddress_
        elif nodeName_ == 'FromName':
            FromName_ = child_.text
            FromName_ = self.gds_validate_string(FromName_, node, 'FromName')
            self.FromName = FromName_
        elif nodeName_ == 'Memo':
            Memo_ = child_.text
            Memo_ = self.gds_validate_string(Memo_, node, 'Memo')
            self.Memo = Memo_
        elif nodeName_ == 'Subject':
            Subject_ = child_.text
            Subject_ = self.gds_validate_string(Subject_, node, 'Subject')
            self.Subject = Subject_
        elif nodeName_ == 'SubjectCode':
            SubjectCode_ = child_.text
            SubjectCode_ = self.gds_validate_string(SubjectCode_, node, 'SubjectCode')
            self.SubjectCode = SubjectCode_
# end class ShipmentServiceOptionsNotificationEMailMessageType


class LabelDeliveryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailMessage=None, LabelLinksIndicator=None):
        self.original_tagname_ = None
        self.EMailMessage = EMailMessage
        self.LabelLinksIndicator = LabelLinksIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelDeliveryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelDeliveryType.subclass:
            return LabelDeliveryType.subclass(*args_, **kwargs_)
        else:
            return LabelDeliveryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailMessage(self): return self.EMailMessage
    def set_EMailMessage(self, EMailMessage): self.EMailMessage = EMailMessage
    def get_LabelLinksIndicator(self): return self.LabelLinksIndicator
    def set_LabelLinksIndicator(self, LabelLinksIndicator): self.LabelLinksIndicator = LabelLinksIndicator
    def hasContent_(self):
        if (
            self.EMailMessage is not None or
            self.LabelLinksIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelDeliveryType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelDeliveryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelDeliveryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelDeliveryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelDeliveryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelDeliveryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailMessage is not None:
            self.EMailMessage.export(outfile, level, namespaceprefix_, name_='EMailMessage', pretty_print=pretty_print)
        if self.LabelLinksIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LabelLinksIndicator>%s</LabelLinksIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelLinksIndicator), input_name='LabelLinksIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailMessage':
            obj_ = LabelDeliveryEMailMessageType.factory()
            obj_.build(child_)
            self.EMailMessage = obj_
            obj_.original_tagname_ = 'EMailMessage'
        elif nodeName_ == 'LabelLinksIndicator':
            LabelLinksIndicator_ = child_.text
            LabelLinksIndicator_ = self.gds_validate_string(LabelLinksIndicator_, node, 'LabelLinksIndicator')
            self.LabelLinksIndicator = LabelLinksIndicator_
# end class LabelDeliveryType


class LabelDeliveryEMailMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, UndeliverableEMailAddress=None, FromEMailAddress=None, FromName=None, Memo=None, Subject=None, SubjectCode=None):
        self.original_tagname_ = None
        self.EMailAddress = EMailAddress
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.FromEMailAddress = FromEMailAddress
        self.FromName = FromName
        self.Memo = Memo
        self.Subject = Subject
        self.SubjectCode = SubjectCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelDeliveryEMailMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelDeliveryEMailMessageType.subclass:
            return LabelDeliveryEMailMessageType.subclass(*args_, **kwargs_)
        else:
            return LabelDeliveryEMailMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_UndeliverableEMailAddress(self): return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress): self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_FromEMailAddress(self): return self.FromEMailAddress
    def set_FromEMailAddress(self, FromEMailAddress): self.FromEMailAddress = FromEMailAddress
    def get_FromName(self): return self.FromName
    def set_FromName(self, FromName): self.FromName = FromName
    def get_Memo(self): return self.Memo
    def set_Memo(self, Memo): self.Memo = Memo
    def get_Subject(self): return self.Subject
    def set_Subject(self, Subject): self.Subject = Subject
    def get_SubjectCode(self): return self.SubjectCode
    def set_SubjectCode(self, SubjectCode): self.SubjectCode = SubjectCode
    def hasContent_(self):
        if (
            self.EMailAddress is not None or
            self.UndeliverableEMailAddress is not None or
            self.FromEMailAddress is not None or
            self.FromName is not None or
            self.Memo is not None or
            self.Subject is not None or
            self.SubjectCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelDeliveryEMailMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelDeliveryEMailMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelDeliveryEMailMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelDeliveryEMailMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelDeliveryEMailMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelDeliveryEMailMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.UndeliverableEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UndeliverableEMailAddress>%s</UndeliverableEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), eol_))
        if self.FromEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromEMailAddress>%s</FromEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromEMailAddress), input_name='FromEMailAddress')), eol_))
        if self.FromName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromName>%s</FromName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromName), input_name='FromName')), eol_))
        if self.Memo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Memo>%s</Memo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Memo), input_name='Memo')), eol_))
        if self.Subject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Subject>%s</Subject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), eol_))
        if self.SubjectCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SubjectCode>%s</SubjectCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubjectCode), input_name='SubjectCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'UndeliverableEMailAddress':
            UndeliverableEMailAddress_ = child_.text
            UndeliverableEMailAddress_ = self.gds_validate_string(UndeliverableEMailAddress_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = UndeliverableEMailAddress_
        elif nodeName_ == 'FromEMailAddress':
            FromEMailAddress_ = child_.text
            FromEMailAddress_ = self.gds_validate_string(FromEMailAddress_, node, 'FromEMailAddress')
            self.FromEMailAddress = FromEMailAddress_
        elif nodeName_ == 'FromName':
            FromName_ = child_.text
            FromName_ = self.gds_validate_string(FromName_, node, 'FromName')
            self.FromName = FromName_
        elif nodeName_ == 'Memo':
            Memo_ = child_.text
            Memo_ = self.gds_validate_string(Memo_, node, 'Memo')
            self.Memo = Memo_
        elif nodeName_ == 'Subject':
            Subject_ = child_.text
            Subject_ = self.gds_validate_string(Subject_, node, 'Subject')
            self.Subject = Subject_
        elif nodeName_ == 'SubjectCode':
            SubjectCode_ = child_.text
            SubjectCode_ = self.gds_validate_string(SubjectCode_, node, 'SubjectCode')
            self.SubjectCode = SubjectCode_
# end class LabelDeliveryEMailMessageType


class ShipmentServiceOptionsDeliveryConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DCISType=None):
        self.original_tagname_ = None
        self.DCISType = DCISType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsDeliveryConfirmationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsDeliveryConfirmationType.subclass:
            return ShipmentServiceOptionsDeliveryConfirmationType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsDeliveryConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DCISType(self): return self.DCISType
    def set_DCISType(self, DCISType): self.DCISType = DCISType
    def hasContent_(self):
        if (
            self.DCISType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsDeliveryConfirmationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsDeliveryConfirmationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsDeliveryConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsDeliveryConfirmationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsDeliveryConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsDeliveryConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DCISType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DCISType>%s</DCISType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DCISType), input_name='DCISType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DCISType':
            DCISType_ = child_.text
            DCISType_ = self.gds_validate_string(DCISType_, node, 'DCISType')
            self.DCISType = DCISType_
# end class ShipmentServiceOptionsDeliveryConfirmationType


class LabelMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelMethodType.subclass:
            return LabelMethodType.subclass(*args_, **kwargs_)
        else:
            return LabelMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelMethodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class LabelMethodType


class PackageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, PackagingType=None, Dimensions=None, DimWeight=None, PackageWeight=None, LargePackageIndicator=None, ReferenceNumber=None, AdditionalHandling=None, PackageServiceOptions=None, HazMatPackageInformation=None):
        self.original_tagname_ = None
        self.Description = Description
        self.PackagingType = PackagingType
        self.Dimensions = Dimensions
        self.DimWeight = DimWeight
        self.PackageWeight = PackageWeight
        self.LargePackageIndicator = LargePackageIndicator
        if ReferenceNumber is None:
            self.ReferenceNumber = []
        else:
            self.ReferenceNumber = ReferenceNumber
        self.AdditionalHandling = AdditionalHandling
        self.PackageServiceOptions = PackageServiceOptions
        self.HazMatPackageInformation = HazMatPackageInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageType.subclass:
            return PackageType.subclass(*args_, **kwargs_)
        else:
            return PackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_DimWeight(self): return self.DimWeight
    def set_DimWeight(self, DimWeight): self.DimWeight = DimWeight
    def get_PackageWeight(self): return self.PackageWeight
    def set_PackageWeight(self, PackageWeight): self.PackageWeight = PackageWeight
    def get_LargePackageIndicator(self): return self.LargePackageIndicator
    def set_LargePackageIndicator(self, LargePackageIndicator): self.LargePackageIndicator = LargePackageIndicator
    def get_ReferenceNumber(self): return self.ReferenceNumber
    def set_ReferenceNumber(self, ReferenceNumber): self.ReferenceNumber = ReferenceNumber
    def add_ReferenceNumber(self, value): self.ReferenceNumber.append(value)
    def insert_ReferenceNumber_at(self, index, value): self.ReferenceNumber.insert(index, value)
    def replace_ReferenceNumber_at(self, index, value): self.ReferenceNumber[index] = value
    def get_AdditionalHandling(self): return self.AdditionalHandling
    def set_AdditionalHandling(self, AdditionalHandling): self.AdditionalHandling = AdditionalHandling
    def get_PackageServiceOptions(self): return self.PackageServiceOptions
    def set_PackageServiceOptions(self, PackageServiceOptions): self.PackageServiceOptions = PackageServiceOptions
    def get_HazMatPackageInformation(self): return self.HazMatPackageInformation
    def set_HazMatPackageInformation(self, HazMatPackageInformation): self.HazMatPackageInformation = HazMatPackageInformation
    def hasContent_(self):
        if (
            self.Description is not None or
            self.PackagingType is not None or
            self.Dimensions is not None or
            self.DimWeight is not None or
            self.PackageWeight is not None or
            self.LargePackageIndicator is not None or
            self.ReferenceNumber or
            self.AdditionalHandling is not None or
            self.PackageServiceOptions is not None or
            self.HazMatPackageInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PackagingType is not None:
            self.PackagingType.export(outfile, level, namespaceprefix_, name_='PackagingType', pretty_print=pretty_print)
        if self.Dimensions is not None:
            self.Dimensions.export(outfile, level, namespaceprefix_, name_='Dimensions', pretty_print=pretty_print)
        if self.DimWeight is not None:
            self.DimWeight.export(outfile, level, namespaceprefix_, name_='DimWeight', pretty_print=pretty_print)
        if self.PackageWeight is not None:
            self.PackageWeight.export(outfile, level, namespaceprefix_, name_='PackageWeight', pretty_print=pretty_print)
        if self.LargePackageIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LargePackageIndicator>%s</LargePackageIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LargePackageIndicator), input_name='LargePackageIndicator')), eol_))
        for ReferenceNumber_ in self.ReferenceNumber:
            ReferenceNumber_.export(outfile, level, namespaceprefix_, name_='ReferenceNumber', pretty_print=pretty_print)
        if self.AdditionalHandling is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AdditionalHandling>%s</AdditionalHandling>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalHandling), input_name='AdditionalHandling')), eol_))
        if self.PackageServiceOptions is not None:
            self.PackageServiceOptions.export(outfile, level, namespaceprefix_, name_='PackageServiceOptions', pretty_print=pretty_print)
        if self.HazMatPackageInformation is not None:
            self.HazMatPackageInformation.export(outfile, level, namespaceprefix_, name_='HazMatPackageInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PackagingType':
            obj_ = PackagingTypeType.factory()
            obj_.build(child_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory()
            obj_.build(child_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'DimWeight':
            obj_ = PackageWeightType.factory()
            obj_.build(child_)
            self.DimWeight = obj_
            obj_.original_tagname_ = 'DimWeight'
        elif nodeName_ == 'PackageWeight':
            obj_ = PackageWeightType.factory()
            obj_.build(child_)
            self.PackageWeight = obj_
            obj_.original_tagname_ = 'PackageWeight'
        elif nodeName_ == 'LargePackageIndicator':
            LargePackageIndicator_ = child_.text
            LargePackageIndicator_ = self.gds_validate_string(LargePackageIndicator_, node, 'LargePackageIndicator')
            self.LargePackageIndicator = LargePackageIndicator_
        elif nodeName_ == 'ReferenceNumber':
            obj_ = ReferenceNumberType.factory()
            obj_.build(child_)
            self.ReferenceNumber.append(obj_)
            obj_.original_tagname_ = 'ReferenceNumber'
        elif nodeName_ == 'AdditionalHandling':
            AdditionalHandling_ = child_.text
            AdditionalHandling_ = self.gds_validate_string(AdditionalHandling_, node, 'AdditionalHandling')
            self.AdditionalHandling = AdditionalHandling_
        elif nodeName_ == 'PackageServiceOptions':
            obj_ = PackageServiceOptionsType.factory()
            obj_.build(child_)
            self.PackageServiceOptions = obj_
            obj_.original_tagname_ = 'PackageServiceOptions'
        elif nodeName_ == 'HazMatPackageInformation':
            obj_ = HazMatPackageInformationType.factory()
            obj_.build(child_)
            self.HazMatPackageInformation = obj_
            obj_.original_tagname_ = 'HazMatPackageInformation'
# end class PackageType


class PackagingTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingTypeType.subclass:
            return PackagingTypeType.subclass(*args_, **kwargs_)
        else:
            return PackagingTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackagingTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackagingTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackagingTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackagingTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackagingTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackagingTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class PackagingTypeType


class DimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DimensionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Length>%s</Length>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Width>%s</Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Height>%s</Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class DimensionsType


class UnitOfMeasurementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UnitOfMeasurementType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UnitOfMeasurementType


class PackageWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageWeightType.subclass:
            return PackageWeightType.subclass(*args_, **kwargs_)
        else:
            return PackageWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Weight>%s</Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class PackageWeightType


class PackageServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DeliveryConfirmation=None, InsuredValue=None, COD=None, AccessPointCOD=None, VerbalConfirmation=None, ShipperReleaseIndicator=None, Notification=None, HazMat=None, DryIce=None, UPSPremiumCareIndicator=None, ProactiveIndicator=None, PackageIdentifier=None, ClinicalTrialsID=None, RefrigerationIndicator=None):
        self.original_tagname_ = None
        self.DeliveryConfirmation = DeliveryConfirmation
        self.InsuredValue = InsuredValue
        self.COD = COD
        self.AccessPointCOD = AccessPointCOD
        self.VerbalConfirmation = VerbalConfirmation
        self.ShipperReleaseIndicator = ShipperReleaseIndicator
        self.Notification = Notification
        if HazMat is None:
            self.HazMat = []
        else:
            self.HazMat = HazMat
        self.DryIce = DryIce
        self.UPSPremiumCareIndicator = UPSPremiumCareIndicator
        self.ProactiveIndicator = ProactiveIndicator
        self.PackageIdentifier = PackageIdentifier
        self.ClinicalTrialsID = ClinicalTrialsID
        self.RefrigerationIndicator = RefrigerationIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsType.subclass:
            return PackageServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DeliveryConfirmation(self): return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation): self.DeliveryConfirmation = DeliveryConfirmation
    def get_InsuredValue(self): return self.InsuredValue
    def set_InsuredValue(self, InsuredValue): self.InsuredValue = InsuredValue
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_AccessPointCOD(self): return self.AccessPointCOD
    def set_AccessPointCOD(self, AccessPointCOD): self.AccessPointCOD = AccessPointCOD
    def get_VerbalConfirmation(self): return self.VerbalConfirmation
    def set_VerbalConfirmation(self, VerbalConfirmation): self.VerbalConfirmation = VerbalConfirmation
    def get_ShipperReleaseIndicator(self): return self.ShipperReleaseIndicator
    def set_ShipperReleaseIndicator(self, ShipperReleaseIndicator): self.ShipperReleaseIndicator = ShipperReleaseIndicator
    def get_Notification(self): return self.Notification
    def set_Notification(self, Notification): self.Notification = Notification
    def get_HazMat(self): return self.HazMat
    def set_HazMat(self, HazMat): self.HazMat = HazMat
    def add_HazMat(self, value): self.HazMat.append(value)
    def insert_HazMat_at(self, index, value): self.HazMat.insert(index, value)
    def replace_HazMat_at(self, index, value): self.HazMat[index] = value
    def get_DryIce(self): return self.DryIce
    def set_DryIce(self, DryIce): self.DryIce = DryIce
    def get_UPSPremiumCareIndicator(self): return self.UPSPremiumCareIndicator
    def set_UPSPremiumCareIndicator(self, UPSPremiumCareIndicator): self.UPSPremiumCareIndicator = UPSPremiumCareIndicator
    def get_ProactiveIndicator(self): return self.ProactiveIndicator
    def set_ProactiveIndicator(self, ProactiveIndicator): self.ProactiveIndicator = ProactiveIndicator
    def get_PackageIdentifier(self): return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier): self.PackageIdentifier = PackageIdentifier
    def get_ClinicalTrialsID(self): return self.ClinicalTrialsID
    def set_ClinicalTrialsID(self, ClinicalTrialsID): self.ClinicalTrialsID = ClinicalTrialsID
    def get_RefrigerationIndicator(self): return self.RefrigerationIndicator
    def set_RefrigerationIndicator(self, RefrigerationIndicator): self.RefrigerationIndicator = RefrigerationIndicator
    def hasContent_(self):
        if (
            self.DeliveryConfirmation is not None or
            self.InsuredValue is not None or
            self.COD is not None or
            self.AccessPointCOD is not None or
            self.VerbalConfirmation is not None or
            self.ShipperReleaseIndicator is not None or
            self.Notification is not None or
            self.HazMat or
            self.DryIce is not None or
            self.UPSPremiumCareIndicator is not None or
            self.ProactiveIndicator is not None or
            self.PackageIdentifier is not None or
            self.ClinicalTrialsID is not None or
            self.RefrigerationIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryConfirmation is not None:
            self.DeliveryConfirmation.export(outfile, level, namespaceprefix_, name_='DeliveryConfirmation', pretty_print=pretty_print)
        if self.InsuredValue is not None:
            self.InsuredValue.export(outfile, level, namespaceprefix_, name_='InsuredValue', pretty_print=pretty_print)
        if self.COD is not None:
            self.COD.export(outfile, level, namespaceprefix_, name_='COD', pretty_print=pretty_print)
        if self.AccessPointCOD is not None:
            self.AccessPointCOD.export(outfile, level, namespaceprefix_, name_='AccessPointCOD', pretty_print=pretty_print)
        if self.VerbalConfirmation is not None:
            self.VerbalConfirmation.export(outfile, level, namespaceprefix_, name_='VerbalConfirmation', pretty_print=pretty_print)
        if self.ShipperReleaseIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipperReleaseIndicator>%s</ShipperReleaseIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperReleaseIndicator), input_name='ShipperReleaseIndicator')), eol_))
        if self.Notification is not None:
            self.Notification.export(outfile, level, namespaceprefix_, name_='Notification', pretty_print=pretty_print)
        for HazMat_ in self.HazMat:
            HazMat_.export(outfile, level, namespaceprefix_, name_='HazMat', pretty_print=pretty_print)
        if self.DryIce is not None:
            self.DryIce.export(outfile, level, namespaceprefix_, name_='DryIce', pretty_print=pretty_print)
        if self.UPSPremiumCareIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UPSPremiumCareIndicator>%s</UPSPremiumCareIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UPSPremiumCareIndicator), input_name='UPSPremiumCareIndicator')), eol_))
        if self.ProactiveIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ProactiveIndicator>%s</ProactiveIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProactiveIndicator), input_name='ProactiveIndicator')), eol_))
        if self.PackageIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackageIdentifier>%s</PackageIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageIdentifier), input_name='PackageIdentifier')), eol_))
        if self.ClinicalTrialsID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ClinicalTrialsID>%s</ClinicalTrialsID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClinicalTrialsID), input_name='ClinicalTrialsID')), eol_))
        if self.RefrigerationIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RefrigerationIndicator>%s</RefrigerationIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RefrigerationIndicator), input_name='RefrigerationIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DeliveryConfirmation':
            obj_ = PackageServiceOptionsDeliveryConfirmationType.factory()
            obj_.build(child_)
            self.DeliveryConfirmation = obj_
            obj_.original_tagname_ = 'DeliveryConfirmation'
        elif nodeName_ == 'InsuredValue':
            obj_ = InsuredValueType.factory()
            obj_.build(child_)
            self.InsuredValue = obj_
            obj_.original_tagname_ = 'InsuredValue'
        elif nodeName_ == 'COD':
            obj_ = PackageServiceOptionsCODType.factory()
            obj_.build(child_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'AccessPointCOD':
            obj_ = PackageServiceOptionsAccessPointCODType.factory()
            obj_.build(child_)
            self.AccessPointCOD = obj_
            obj_.original_tagname_ = 'AccessPointCOD'
        elif nodeName_ == 'VerbalConfirmation':
            obj_ = VerbalConfirmationType.factory()
            obj_.build(child_)
            self.VerbalConfirmation = obj_
            obj_.original_tagname_ = 'VerbalConfirmation'
        elif nodeName_ == 'ShipperReleaseIndicator':
            ShipperReleaseIndicator_ = child_.text
            ShipperReleaseIndicator_ = self.gds_validate_string(ShipperReleaseIndicator_, node, 'ShipperReleaseIndicator')
            self.ShipperReleaseIndicator = ShipperReleaseIndicator_
        elif nodeName_ == 'Notification':
            obj_ = PackageServiceOptionsNotificationType.factory()
            obj_.build(child_)
            self.Notification = obj_
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'HazMat':
            obj_ = HazMatType.factory()
            obj_.build(child_)
            self.HazMat.append(obj_)
            obj_.original_tagname_ = 'HazMat'
        elif nodeName_ == 'DryIce':
            obj_ = DryIceType.factory()
            obj_.build(child_)
            self.DryIce = obj_
            obj_.original_tagname_ = 'DryIce'
        elif nodeName_ == 'UPSPremiumCareIndicator':
            UPSPremiumCareIndicator_ = child_.text
            UPSPremiumCareIndicator_ = self.gds_validate_string(UPSPremiumCareIndicator_, node, 'UPSPremiumCareIndicator')
            self.UPSPremiumCareIndicator = UPSPremiumCareIndicator_
        elif nodeName_ == 'ProactiveIndicator':
            ProactiveIndicator_ = child_.text
            ProactiveIndicator_ = self.gds_validate_string(ProactiveIndicator_, node, 'ProactiveIndicator')
            self.ProactiveIndicator = ProactiveIndicator_
        elif nodeName_ == 'PackageIdentifier':
            PackageIdentifier_ = child_.text
            PackageIdentifier_ = self.gds_validate_string(PackageIdentifier_, node, 'PackageIdentifier')
            self.PackageIdentifier = PackageIdentifier_
        elif nodeName_ == 'ClinicalTrialsID':
            ClinicalTrialsID_ = child_.text
            ClinicalTrialsID_ = self.gds_validate_string(ClinicalTrialsID_, node, 'ClinicalTrialsID')
            self.ClinicalTrialsID = ClinicalTrialsID_
        elif nodeName_ == 'RefrigerationIndicator':
            RefrigerationIndicator_ = child_.text
            RefrigerationIndicator_ = self.gds_validate_string(RefrigerationIndicator_, node, 'RefrigerationIndicator')
            self.RefrigerationIndicator = RefrigerationIndicator_
# end class PackageServiceOptionsType


class PackageServiceOptionsDeliveryConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DCISType=None, DCISNumber=None):
        self.original_tagname_ = None
        self.DCISType = DCISType
        self.DCISNumber = DCISNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsDeliveryConfirmationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsDeliveryConfirmationType.subclass:
            return PackageServiceOptionsDeliveryConfirmationType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsDeliveryConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DCISType(self): return self.DCISType
    def set_DCISType(self, DCISType): self.DCISType = DCISType
    def get_DCISNumber(self): return self.DCISNumber
    def set_DCISNumber(self, DCISNumber): self.DCISNumber = DCISNumber
    def hasContent_(self):
        if (
            self.DCISType is not None or
            self.DCISNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsDeliveryConfirmationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsDeliveryConfirmationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsDeliveryConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsDeliveryConfirmationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsDeliveryConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsDeliveryConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DCISType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DCISType>%s</DCISType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DCISType), input_name='DCISType')), eol_))
        if self.DCISNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DCISNumber>%s</DCISNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DCISNumber), input_name='DCISNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DCISType':
            DCISType_ = child_.text
            DCISType_ = self.gds_validate_string(DCISType_, node, 'DCISType')
            self.DCISType = DCISType_
        elif nodeName_ == 'DCISNumber':
            DCISNumber_ = child_.text
            DCISNumber_ = self.gds_validate_string(DCISNumber_, node, 'DCISNumber')
            self.DCISNumber = DCISNumber_
# end class PackageServiceOptionsDeliveryConfirmationType


class InsuredValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.Type = Type
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InsuredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InsuredValueType.subclass:
            return InsuredValueType.subclass(*args_, **kwargs_)
        else:
            return InsuredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.Type is not None or
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='InsuredValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InsuredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InsuredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='InsuredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InsuredValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='InsuredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            self.Type.export(outfile, level, namespaceprefix_, name_='Type', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            obj_ = InsuredValueCodeDescriptionType.factory()
            obj_.build(child_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InsuredValueType


class InsuredValueCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InsuredValueCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InsuredValueCodeDescriptionType.subclass:
            return InsuredValueCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return InsuredValueCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='InsuredValueCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InsuredValueCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InsuredValueCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='InsuredValueCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InsuredValueCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='InsuredValueCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class InsuredValueCodeDescriptionType


class PackageServiceOptionsCODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODCode=None, CODFundsCode=None, CODAmount=None):
        self.original_tagname_ = None
        self.CODCode = CODCode
        self.CODFundsCode = CODFundsCode
        self.CODAmount = CODAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsCODType.subclass:
            return PackageServiceOptionsCODType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODCode(self): return self.CODCode
    def set_CODCode(self, CODCode): self.CODCode = CODCode
    def get_CODFundsCode(self): return self.CODFundsCode
    def set_CODFundsCode(self, CODFundsCode): self.CODFundsCode = CODFundsCode
    def get_CODAmount(self): return self.CODAmount
    def set_CODAmount(self, CODAmount): self.CODAmount = CODAmount
    def hasContent_(self):
        if (
            self.CODCode is not None or
            self.CODFundsCode is not None or
            self.CODAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsCODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CODCode>%s</CODCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CODCode), input_name='CODCode')), eol_))
        if self.CODFundsCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CODFundsCode>%s</CODFundsCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CODFundsCode), input_name='CODFundsCode')), eol_))
        if self.CODAmount is not None:
            self.CODAmount.export(outfile, level, namespaceprefix_, name_='CODAmount', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODCode':
            CODCode_ = child_.text
            CODCode_ = self.gds_validate_string(CODCode_, node, 'CODCode')
            self.CODCode = CODCode_
        elif nodeName_ == 'CODFundsCode':
            CODFundsCode_ = child_.text
            CODFundsCode_ = self.gds_validate_string(CODFundsCode_, node, 'CODFundsCode')
            self.CODFundsCode = CODFundsCode_
        elif nodeName_ == 'CODAmount':
            obj_ = PackageServiceOptionsCODAmountType.factory()
            obj_.build(child_)
            self.CODAmount = obj_
            obj_.original_tagname_ = 'CODAmount'
# end class PackageServiceOptionsCODType


class PackageServiceOptionsCODAmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsCODAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsCODAmountType.subclass:
            return PackageServiceOptionsCODAmountType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsCODAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsCODAmountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsCODAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsCODAmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsCODAmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsCODAmountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsCODAmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class PackageServiceOptionsCODAmountType


class PackageServiceOptionsAccessPointCODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.original_tagname_ = None
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsAccessPointCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsAccessPointCODType.subclass:
            return PackageServiceOptionsAccessPointCODType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsAccessPointCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsAccessPointCODType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsAccessPointCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsAccessPointCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsAccessPointCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsAccessPointCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsAccessPointCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class PackageServiceOptionsAccessPointCODType


class VerbalConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactInfo=None):
        self.original_tagname_ = None
        self.ContactInfo = ContactInfo
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VerbalConfirmationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VerbalConfirmationType.subclass:
            return VerbalConfirmationType.subclass(*args_, **kwargs_)
        else:
            return VerbalConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactInfo(self): return self.ContactInfo
    def set_ContactInfo(self, ContactInfo): self.ContactInfo = ContactInfo
    def hasContent_(self):
        if (
            self.ContactInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='VerbalConfirmationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VerbalConfirmationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VerbalConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='VerbalConfirmationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VerbalConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='VerbalConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactInfo is not None:
            self.ContactInfo.export(outfile, level, namespaceprefix_, name_='ContactInfo', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactInfo':
            obj_ = VerbalConfirmationContactInfoType.factory()
            obj_.build(child_)
            self.ContactInfo = obj_
            obj_.original_tagname_ = 'ContactInfo'
# end class VerbalConfirmationType


class VerbalConfirmationContactInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, PhoneNumber=None):
        self.original_tagname_ = None
        self.Name = Name
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VerbalConfirmationContactInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VerbalConfirmationContactInfoType.subclass:
            return VerbalConfirmationContactInfoType.subclass(*args_, **kwargs_)
        else:
            return VerbalConfirmationContactInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.Name is not None or
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='VerbalConfirmationContactInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VerbalConfirmationContactInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VerbalConfirmationContactInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='VerbalConfirmationContactInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VerbalConfirmationContactInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='VerbalConfirmationContactInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class VerbalConfirmationContactInfoType


class PackageServiceOptionsNotificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NotificationCode=None, EMailMessage=None):
        self.original_tagname_ = None
        self.NotificationCode = NotificationCode
        self.EMailMessage = EMailMessage
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsNotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsNotificationType.subclass:
            return PackageServiceOptionsNotificationType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsNotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationCode(self): return self.NotificationCode
    def set_NotificationCode(self, NotificationCode): self.NotificationCode = NotificationCode
    def get_EMailMessage(self): return self.EMailMessage
    def set_EMailMessage(self, EMailMessage): self.EMailMessage = EMailMessage
    def hasContent_(self):
        if (
            self.NotificationCode is not None or
            self.EMailMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsNotificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsNotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsNotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsNotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsNotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsNotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NotificationCode>%s</NotificationCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NotificationCode), input_name='NotificationCode')), eol_))
        if self.EMailMessage is not None:
            self.EMailMessage.export(outfile, level, namespaceprefix_, name_='EMailMessage', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationCode':
            NotificationCode_ = child_.text
            NotificationCode_ = self.gds_validate_string(NotificationCode_, node, 'NotificationCode')
            self.NotificationCode = NotificationCode_
        elif nodeName_ == 'EMailMessage':
            obj_ = PackageServiceOptionsNotificationEMailMessageType.factory()
            obj_.build(child_)
            self.EMailMessage = obj_
            obj_.original_tagname_ = 'EMailMessage'
# end class PackageServiceOptionsNotificationType


class PackageServiceOptionsNotificationEMailMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, UndeliverableEMailAddress=None, FromEMailAddress=None, FromName=None, Memo=None, Subject=None, SubjectCode=None):
        self.original_tagname_ = None
        if EMailAddress is None:
            self.EMailAddress = []
        else:
            self.EMailAddress = EMailAddress
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.FromEMailAddress = FromEMailAddress
        self.FromName = FromName
        self.Memo = Memo
        self.Subject = Subject
        self.SubjectCode = SubjectCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsNotificationEMailMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsNotificationEMailMessageType.subclass:
            return PackageServiceOptionsNotificationEMailMessageType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsNotificationEMailMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def add_EMailAddress(self, value): self.EMailAddress.append(value)
    def insert_EMailAddress_at(self, index, value): self.EMailAddress.insert(index, value)
    def replace_EMailAddress_at(self, index, value): self.EMailAddress[index] = value
    def get_UndeliverableEMailAddress(self): return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress): self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_FromEMailAddress(self): return self.FromEMailAddress
    def set_FromEMailAddress(self, FromEMailAddress): self.FromEMailAddress = FromEMailAddress
    def get_FromName(self): return self.FromName
    def set_FromName(self, FromName): self.FromName = FromName
    def get_Memo(self): return self.Memo
    def set_Memo(self, Memo): self.Memo = Memo
    def get_Subject(self): return self.Subject
    def set_Subject(self, Subject): self.Subject = Subject
    def get_SubjectCode(self): return self.SubjectCode
    def set_SubjectCode(self, SubjectCode): self.SubjectCode = SubjectCode
    def hasContent_(self):
        if (
            self.EMailAddress or
            self.UndeliverableEMailAddress is not None or
            self.FromEMailAddress is not None or
            self.FromName is not None or
            self.Memo is not None or
            self.Subject is not None or
            self.SubjectCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsNotificationEMailMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsNotificationEMailMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsNotificationEMailMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageServiceOptionsNotificationEMailMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsNotificationEMailMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageServiceOptionsNotificationEMailMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailAddress_ in self.EMailAddress:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(EMailAddress_), input_name='EMailAddress')), eol_))
        if self.UndeliverableEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UndeliverableEMailAddress>%s</UndeliverableEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), eol_))
        if self.FromEMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromEMailAddress>%s</FromEMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromEMailAddress), input_name='FromEMailAddress')), eol_))
        if self.FromName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FromName>%s</FromName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FromName), input_name='FromName')), eol_))
        if self.Memo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Memo>%s</Memo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Memo), input_name='Memo')), eol_))
        if self.Subject is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Subject>%s</Subject>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), eol_))
        if self.SubjectCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SubjectCode>%s</SubjectCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubjectCode), input_name='SubjectCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress.append(EMailAddress_)
        elif nodeName_ == 'UndeliverableEMailAddress':
            UndeliverableEMailAddress_ = child_.text
            UndeliverableEMailAddress_ = self.gds_validate_string(UndeliverableEMailAddress_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = UndeliverableEMailAddress_
        elif nodeName_ == 'FromEMailAddress':
            FromEMailAddress_ = child_.text
            FromEMailAddress_ = self.gds_validate_string(FromEMailAddress_, node, 'FromEMailAddress')
            self.FromEMailAddress = FromEMailAddress_
        elif nodeName_ == 'FromName':
            FromName_ = child_.text
            FromName_ = self.gds_validate_string(FromName_, node, 'FromName')
            self.FromName = FromName_
        elif nodeName_ == 'Memo':
            Memo_ = child_.text
            Memo_ = self.gds_validate_string(Memo_, node, 'Memo')
            self.Memo = Memo_
        elif nodeName_ == 'Subject':
            Subject_ = child_.text
            Subject_ = self.gds_validate_string(Subject_, node, 'Subject')
            self.Subject = Subject_
        elif nodeName_ == 'SubjectCode':
            SubjectCode_ = child_.text
            SubjectCode_ = self.gds_validate_string(SubjectCode_, node, 'SubjectCode')
            self.SubjectCode = SubjectCode_
# end class PackageServiceOptionsNotificationEMailMessageType


class LabelSpecificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LabelPrintMethod=None, HTTPUserAgent=None, LabelStockSize=None, LabelImageFormat=None, Instruction=None, CharacterSet=None):
        self.original_tagname_ = None
        self.LabelPrintMethod = LabelPrintMethod
        self.HTTPUserAgent = HTTPUserAgent
        self.LabelStockSize = LabelStockSize
        self.LabelImageFormat = LabelImageFormat
        if Instruction is None:
            self.Instruction = []
        else:
            self.Instruction = Instruction
        self.CharacterSet = CharacterSet
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelSpecificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelSpecificationType.subclass:
            return LabelSpecificationType.subclass(*args_, **kwargs_)
        else:
            return LabelSpecificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LabelPrintMethod(self): return self.LabelPrintMethod
    def set_LabelPrintMethod(self, LabelPrintMethod): self.LabelPrintMethod = LabelPrintMethod
    def get_HTTPUserAgent(self): return self.HTTPUserAgent
    def set_HTTPUserAgent(self, HTTPUserAgent): self.HTTPUserAgent = HTTPUserAgent
    def get_LabelStockSize(self): return self.LabelStockSize
    def set_LabelStockSize(self, LabelStockSize): self.LabelStockSize = LabelStockSize
    def get_LabelImageFormat(self): return self.LabelImageFormat
    def set_LabelImageFormat(self, LabelImageFormat): self.LabelImageFormat = LabelImageFormat
    def get_Instruction(self): return self.Instruction
    def set_Instruction(self, Instruction): self.Instruction = Instruction
    def add_Instruction(self, value): self.Instruction.append(value)
    def insert_Instruction_at(self, index, value): self.Instruction.insert(index, value)
    def replace_Instruction_at(self, index, value): self.Instruction[index] = value
    def get_CharacterSet(self): return self.CharacterSet
    def set_CharacterSet(self, CharacterSet): self.CharacterSet = CharacterSet
    def hasContent_(self):
        if (
            self.LabelPrintMethod is not None or
            self.HTTPUserAgent is not None or
            self.LabelStockSize is not None or
            self.LabelImageFormat is not None or
            self.Instruction or
            self.CharacterSet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelSpecificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelSpecificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelSpecificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelSpecificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelSpecificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelSpecificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelPrintMethod is not None:
            self.LabelPrintMethod.export(outfile, level, namespaceprefix_, name_='LabelPrintMethod', pretty_print=pretty_print)
        if self.HTTPUserAgent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HTTPUserAgent>%s</HTTPUserAgent>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HTTPUserAgent), input_name='HTTPUserAgent')), eol_))
        if self.LabelStockSize is not None:
            self.LabelStockSize.export(outfile, level, namespaceprefix_, name_='LabelStockSize', pretty_print=pretty_print)
        if self.LabelImageFormat is not None:
            self.LabelImageFormat.export(outfile, level, namespaceprefix_, name_='LabelImageFormat', pretty_print=pretty_print)
        for Instruction_ in self.Instruction:
            Instruction_.export(outfile, level, namespaceprefix_, name_='Instruction', pretty_print=pretty_print)
        if self.CharacterSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CharacterSet>%s</CharacterSet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CharacterSet), input_name='CharacterSet')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LabelPrintMethod':
            obj_ = LabelPrintMethodCodeDescriptionType.factory()
            obj_.build(child_)
            self.LabelPrintMethod = obj_
            obj_.original_tagname_ = 'LabelPrintMethod'
        elif nodeName_ == 'HTTPUserAgent':
            HTTPUserAgent_ = child_.text
            HTTPUserAgent_ = self.gds_validate_string(HTTPUserAgent_, node, 'HTTPUserAgent')
            self.HTTPUserAgent = HTTPUserAgent_
        elif nodeName_ == 'LabelStockSize':
            obj_ = LabelStockSizeType.factory()
            obj_.build(child_)
            self.LabelStockSize = obj_
            obj_.original_tagname_ = 'LabelStockSize'
        elif nodeName_ == 'LabelImageFormat':
            obj_ = LabelImageFormatCodeDescriptionType.factory()
            obj_.build(child_)
            self.LabelImageFormat = obj_
            obj_.original_tagname_ = 'LabelImageFormat'
        elif nodeName_ == 'Instruction':
            obj_ = InstructionCodeDescriptionType.factory()
            obj_.build(child_)
            self.Instruction.append(obj_)
            obj_.original_tagname_ = 'Instruction'
        elif nodeName_ == 'CharacterSet':
            CharacterSet_ = child_.text
            CharacterSet_ = self.gds_validate_string(CharacterSet_, node, 'CharacterSet')
            self.CharacterSet = CharacterSet_
# end class LabelSpecificationType


class InstructionCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstructionCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstructionCodeDescriptionType.subclass:
            return InstructionCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return InstructionCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='InstructionCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstructionCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstructionCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='InstructionCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstructionCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='InstructionCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class InstructionCodeDescriptionType


class LabelPrintMethodCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelPrintMethodCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelPrintMethodCodeDescriptionType.subclass:
            return LabelPrintMethodCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return LabelPrintMethodCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelPrintMethodCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelPrintMethodCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelPrintMethodCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelPrintMethodCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelPrintMethodCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelPrintMethodCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class LabelPrintMethodCodeDescriptionType


class LabelStockSizeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Height=None, Width=None):
        self.original_tagname_ = None
        self.Height = Height
        self.Width = Width
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelStockSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelStockSizeType.subclass:
            return LabelStockSizeType.subclass(*args_, **kwargs_)
        else:
            return LabelStockSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def hasContent_(self):
        if (
            self.Height is not None or
            self.Width is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelStockSizeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelStockSizeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelStockSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelStockSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelStockSizeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelStockSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Height>%s</Height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), eol_))
        if self.Width is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Width>%s</Width>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
# end class LabelStockSizeType


class LabelImageFormatCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelImageFormatCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelImageFormatCodeDescriptionType.subclass:
            return LabelImageFormatCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return LabelImageFormatCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LabelImageFormatCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelImageFormatCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelImageFormatCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LabelImageFormatCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelImageFormatCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LabelImageFormatCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class LabelImageFormatCodeDescriptionType


class HazMatPackageInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllPackedInOneIndicator=None, OverPackedIndicator=None, QValue=None):
        self.original_tagname_ = None
        self.AllPackedInOneIndicator = AllPackedInOneIndicator
        self.OverPackedIndicator = OverPackedIndicator
        self.QValue = QValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazMatPackageInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazMatPackageInformationType.subclass:
            return HazMatPackageInformationType.subclass(*args_, **kwargs_)
        else:
            return HazMatPackageInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllPackedInOneIndicator(self): return self.AllPackedInOneIndicator
    def set_AllPackedInOneIndicator(self, AllPackedInOneIndicator): self.AllPackedInOneIndicator = AllPackedInOneIndicator
    def get_OverPackedIndicator(self): return self.OverPackedIndicator
    def set_OverPackedIndicator(self, OverPackedIndicator): self.OverPackedIndicator = OverPackedIndicator
    def get_QValue(self): return self.QValue
    def set_QValue(self, QValue): self.QValue = QValue
    def hasContent_(self):
        if (
            self.AllPackedInOneIndicator is not None or
            self.OverPackedIndicator is not None or
            self.QValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='HazMatPackageInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazMatPackageInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazMatPackageInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='HazMatPackageInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazMatPackageInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='HazMatPackageInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllPackedInOneIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AllPackedInOneIndicator>%s</AllPackedInOneIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AllPackedInOneIndicator), input_name='AllPackedInOneIndicator')), eol_))
        if self.OverPackedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OverPackedIndicator>%s</OverPackedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OverPackedIndicator), input_name='OverPackedIndicator')), eol_))
        if self.QValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<QValue>%s</QValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.QValue), input_name='QValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllPackedInOneIndicator':
            AllPackedInOneIndicator_ = child_.text
            AllPackedInOneIndicator_ = self.gds_validate_string(AllPackedInOneIndicator_, node, 'AllPackedInOneIndicator')
            self.AllPackedInOneIndicator = AllPackedInOneIndicator_
        elif nodeName_ == 'OverPackedIndicator':
            OverPackedIndicator_ = child_.text
            OverPackedIndicator_ = self.gds_validate_string(OverPackedIndicator_, node, 'OverPackedIndicator')
            self.OverPackedIndicator = OverPackedIndicator_
        elif nodeName_ == 'QValue':
            QValue_ = child_.text
            QValue_ = self.gds_validate_string(QValue_, node, 'QValue')
            self.QValue = QValue_
# end class HazMatPackageInformationType


class HazMatType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackagingTypeQuantity=None, RecordIdentifier1=None, RecordIdentifier2=None, RecordIdentifier3=None, SubRiskClass=None, aDRItemNumber=None, aDRPackingGroupLetter=None, TechnicalName=None, HazardLabelRequired=None, ClassDivisionNumber=None, ReferenceNumber=None, Quantity=None, UOM=None, PackagingType=None, IDNumber=None, ProperShippingName=None, AdditionalDescription=None, PackagingGroupType=None, PackagingInstructionCode=None, EmergencyPhone=None, EmergencyContact=None, ReportableQuantity=None, RegulationSet=None, TransportationMode=None, CommodityRegulatedLevelCode=None, TransportCategory=None, TunnelRestrictionCode=None, ChemicalRecordIdentifier=None, LocalTechnicalName=None, LocalProperShippingName=None):
        self.original_tagname_ = None
        self.PackagingTypeQuantity = PackagingTypeQuantity
        self.RecordIdentifier1 = RecordIdentifier1
        self.RecordIdentifier2 = RecordIdentifier2
        self.RecordIdentifier3 = RecordIdentifier3
        self.SubRiskClass = SubRiskClass
        self.aDRItemNumber = aDRItemNumber
        self.aDRPackingGroupLetter = aDRPackingGroupLetter
        self.TechnicalName = TechnicalName
        self.HazardLabelRequired = HazardLabelRequired
        self.ClassDivisionNumber = ClassDivisionNumber
        self.ReferenceNumber = ReferenceNumber
        self.Quantity = Quantity
        self.UOM = UOM
        self.PackagingType = PackagingType
        self.IDNumber = IDNumber
        self.ProperShippingName = ProperShippingName
        self.AdditionalDescription = AdditionalDescription
        self.PackagingGroupType = PackagingGroupType
        self.PackagingInstructionCode = PackagingInstructionCode
        self.EmergencyPhone = EmergencyPhone
        self.EmergencyContact = EmergencyContact
        self.ReportableQuantity = ReportableQuantity
        self.RegulationSet = RegulationSet
        self.TransportationMode = TransportationMode
        self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode
        self.TransportCategory = TransportCategory
        self.TunnelRestrictionCode = TunnelRestrictionCode
        self.ChemicalRecordIdentifier = ChemicalRecordIdentifier
        self.LocalTechnicalName = LocalTechnicalName
        self.LocalProperShippingName = LocalProperShippingName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazMatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazMatType.subclass:
            return HazMatType.subclass(*args_, **kwargs_)
        else:
            return HazMatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackagingTypeQuantity(self): return self.PackagingTypeQuantity
    def set_PackagingTypeQuantity(self, PackagingTypeQuantity): self.PackagingTypeQuantity = PackagingTypeQuantity
    def get_RecordIdentifier1(self): return self.RecordIdentifier1
    def set_RecordIdentifier1(self, RecordIdentifier1): self.RecordIdentifier1 = RecordIdentifier1
    def get_RecordIdentifier2(self): return self.RecordIdentifier2
    def set_RecordIdentifier2(self, RecordIdentifier2): self.RecordIdentifier2 = RecordIdentifier2
    def get_RecordIdentifier3(self): return self.RecordIdentifier3
    def set_RecordIdentifier3(self, RecordIdentifier3): self.RecordIdentifier3 = RecordIdentifier3
    def get_SubRiskClass(self): return self.SubRiskClass
    def set_SubRiskClass(self, SubRiskClass): self.SubRiskClass = SubRiskClass
    def get_aDRItemNumber(self): return self.aDRItemNumber
    def set_aDRItemNumber(self, aDRItemNumber): self.aDRItemNumber = aDRItemNumber
    def get_aDRPackingGroupLetter(self): return self.aDRPackingGroupLetter
    def set_aDRPackingGroupLetter(self, aDRPackingGroupLetter): self.aDRPackingGroupLetter = aDRPackingGroupLetter
    def get_TechnicalName(self): return self.TechnicalName
    def set_TechnicalName(self, TechnicalName): self.TechnicalName = TechnicalName
    def get_HazardLabelRequired(self): return self.HazardLabelRequired
    def set_HazardLabelRequired(self, HazardLabelRequired): self.HazardLabelRequired = HazardLabelRequired
    def get_ClassDivisionNumber(self): return self.ClassDivisionNumber
    def set_ClassDivisionNumber(self, ClassDivisionNumber): self.ClassDivisionNumber = ClassDivisionNumber
    def get_ReferenceNumber(self): return self.ReferenceNumber
    def set_ReferenceNumber(self, ReferenceNumber): self.ReferenceNumber = ReferenceNumber
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UOM(self): return self.UOM
    def set_UOM(self, UOM): self.UOM = UOM
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_IDNumber(self): return self.IDNumber
    def set_IDNumber(self, IDNumber): self.IDNumber = IDNumber
    def get_ProperShippingName(self): return self.ProperShippingName
    def set_ProperShippingName(self, ProperShippingName): self.ProperShippingName = ProperShippingName
    def get_AdditionalDescription(self): return self.AdditionalDescription
    def set_AdditionalDescription(self, AdditionalDescription): self.AdditionalDescription = AdditionalDescription
    def get_PackagingGroupType(self): return self.PackagingGroupType
    def set_PackagingGroupType(self, PackagingGroupType): self.PackagingGroupType = PackagingGroupType
    def get_PackagingInstructionCode(self): return self.PackagingInstructionCode
    def set_PackagingInstructionCode(self, PackagingInstructionCode): self.PackagingInstructionCode = PackagingInstructionCode
    def get_EmergencyPhone(self): return self.EmergencyPhone
    def set_EmergencyPhone(self, EmergencyPhone): self.EmergencyPhone = EmergencyPhone
    def get_EmergencyContact(self): return self.EmergencyContact
    def set_EmergencyContact(self, EmergencyContact): self.EmergencyContact = EmergencyContact
    def get_ReportableQuantity(self): return self.ReportableQuantity
    def set_ReportableQuantity(self, ReportableQuantity): self.ReportableQuantity = ReportableQuantity
    def get_RegulationSet(self): return self.RegulationSet
    def set_RegulationSet(self, RegulationSet): self.RegulationSet = RegulationSet
    def get_TransportationMode(self): return self.TransportationMode
    def set_TransportationMode(self, TransportationMode): self.TransportationMode = TransportationMode
    def get_CommodityRegulatedLevelCode(self): return self.CommodityRegulatedLevelCode
    def set_CommodityRegulatedLevelCode(self, CommodityRegulatedLevelCode): self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode
    def get_TransportCategory(self): return self.TransportCategory
    def set_TransportCategory(self, TransportCategory): self.TransportCategory = TransportCategory
    def get_TunnelRestrictionCode(self): return self.TunnelRestrictionCode
    def set_TunnelRestrictionCode(self, TunnelRestrictionCode): self.TunnelRestrictionCode = TunnelRestrictionCode
    def get_ChemicalRecordIdentifier(self): return self.ChemicalRecordIdentifier
    def set_ChemicalRecordIdentifier(self, ChemicalRecordIdentifier): self.ChemicalRecordIdentifier = ChemicalRecordIdentifier
    def get_LocalTechnicalName(self): return self.LocalTechnicalName
    def set_LocalTechnicalName(self, LocalTechnicalName): self.LocalTechnicalName = LocalTechnicalName
    def get_LocalProperShippingName(self): return self.LocalProperShippingName
    def set_LocalProperShippingName(self, LocalProperShippingName): self.LocalProperShippingName = LocalProperShippingName
    def hasContent_(self):
        if (
            self.PackagingTypeQuantity is not None or
            self.RecordIdentifier1 is not None or
            self.RecordIdentifier2 is not None or
            self.RecordIdentifier3 is not None or
            self.SubRiskClass is not None or
            self.aDRItemNumber is not None or
            self.aDRPackingGroupLetter is not None or
            self.TechnicalName is not None or
            self.HazardLabelRequired is not None or
            self.ClassDivisionNumber is not None or
            self.ReferenceNumber is not None or
            self.Quantity is not None or
            self.UOM is not None or
            self.PackagingType is not None or
            self.IDNumber is not None or
            self.ProperShippingName is not None or
            self.AdditionalDescription is not None or
            self.PackagingGroupType is not None or
            self.PackagingInstructionCode is not None or
            self.EmergencyPhone is not None or
            self.EmergencyContact is not None or
            self.ReportableQuantity is not None or
            self.RegulationSet is not None or
            self.TransportationMode is not None or
            self.CommodityRegulatedLevelCode is not None or
            self.TransportCategory is not None or
            self.TunnelRestrictionCode is not None or
            self.ChemicalRecordIdentifier is not None or
            self.LocalTechnicalName is not None or
            self.LocalProperShippingName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='HazMatType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazMatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazMatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='HazMatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazMatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='HazMatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackagingTypeQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackagingTypeQuantity>%s</PackagingTypeQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingTypeQuantity), input_name='PackagingTypeQuantity')), eol_))
        if self.RecordIdentifier1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RecordIdentifier1>%s</RecordIdentifier1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier1), input_name='RecordIdentifier1')), eol_))
        if self.RecordIdentifier2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RecordIdentifier2>%s</RecordIdentifier2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier2), input_name='RecordIdentifier2')), eol_))
        if self.RecordIdentifier3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RecordIdentifier3>%s</RecordIdentifier3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier3), input_name='RecordIdentifier3')), eol_))
        if self.SubRiskClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SubRiskClass>%s</SubRiskClass>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SubRiskClass), input_name='SubRiskClass')), eol_))
        if self.aDRItemNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<aDRItemNumber>%s</aDRItemNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.aDRItemNumber), input_name='aDRItemNumber')), eol_))
        if self.aDRPackingGroupLetter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<aDRPackingGroupLetter>%s</aDRPackingGroupLetter>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.aDRPackingGroupLetter), input_name='aDRPackingGroupLetter')), eol_))
        if self.TechnicalName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TechnicalName>%s</TechnicalName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TechnicalName), input_name='TechnicalName')), eol_))
        if self.HazardLabelRequired is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HazardLabelRequired>%s</HazardLabelRequired>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HazardLabelRequired), input_name='HazardLabelRequired')), eol_))
        if self.ClassDivisionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ClassDivisionNumber>%s</ClassDivisionNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ClassDivisionNumber), input_name='ClassDivisionNumber')), eol_))
        if self.ReferenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReferenceNumber>%s</ReferenceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceNumber), input_name='ReferenceNumber')), eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Quantity>%s</Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.UOM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UOM>%s</UOM>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UOM), input_name='UOM')), eol_))
        if self.PackagingType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackagingType>%s</PackagingType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), eol_))
        if self.IDNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<IDNumber>%s</IDNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.IDNumber), input_name='IDNumber')), eol_))
        if self.ProperShippingName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ProperShippingName>%s</ProperShippingName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingName), input_name='ProperShippingName')), eol_))
        if self.AdditionalDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AdditionalDescription>%s</AdditionalDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDescription), input_name='AdditionalDescription')), eol_))
        if self.PackagingGroupType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackagingGroupType>%s</PackagingGroupType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingGroupType), input_name='PackagingGroupType')), eol_))
        if self.PackagingInstructionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackagingInstructionCode>%s</PackagingInstructionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackagingInstructionCode), input_name='PackagingInstructionCode')), eol_))
        if self.EmergencyPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EmergencyPhone>%s</EmergencyPhone>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyPhone), input_name='EmergencyPhone')), eol_))
        if self.EmergencyContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EmergencyContact>%s</EmergencyContact>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyContact), input_name='EmergencyContact')), eol_))
        if self.ReportableQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReportableQuantity>%s</ReportableQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReportableQuantity), input_name='ReportableQuantity')), eol_))
        if self.RegulationSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RegulationSet>%s</RegulationSet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RegulationSet), input_name='RegulationSet')), eol_))
        if self.TransportationMode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TransportationMode>%s</TransportationMode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransportationMode), input_name='TransportationMode')), eol_))
        if self.CommodityRegulatedLevelCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommodityRegulatedLevelCode>%s</CommodityRegulatedLevelCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityRegulatedLevelCode), input_name='CommodityRegulatedLevelCode')), eol_))
        if self.TransportCategory is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TransportCategory>%s</TransportCategory>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TransportCategory), input_name='TransportCategory')), eol_))
        if self.TunnelRestrictionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TunnelRestrictionCode>%s</TunnelRestrictionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TunnelRestrictionCode), input_name='TunnelRestrictionCode')), eol_))
        if self.ChemicalRecordIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ChemicalRecordIdentifier>%s</ChemicalRecordIdentifier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ChemicalRecordIdentifier), input_name='ChemicalRecordIdentifier')), eol_))
        if self.LocalTechnicalName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LocalTechnicalName>%s</LocalTechnicalName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalTechnicalName), input_name='LocalTechnicalName')), eol_))
        if self.LocalProperShippingName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LocalProperShippingName>%s</LocalProperShippingName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalProperShippingName), input_name='LocalProperShippingName')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackagingTypeQuantity':
            PackagingTypeQuantity_ = child_.text
            PackagingTypeQuantity_ = self.gds_validate_string(PackagingTypeQuantity_, node, 'PackagingTypeQuantity')
            self.PackagingTypeQuantity = PackagingTypeQuantity_
        elif nodeName_ == 'RecordIdentifier1':
            RecordIdentifier1_ = child_.text
            RecordIdentifier1_ = self.gds_validate_string(RecordIdentifier1_, node, 'RecordIdentifier1')
            self.RecordIdentifier1 = RecordIdentifier1_
        elif nodeName_ == 'RecordIdentifier2':
            RecordIdentifier2_ = child_.text
            RecordIdentifier2_ = self.gds_validate_string(RecordIdentifier2_, node, 'RecordIdentifier2')
            self.RecordIdentifier2 = RecordIdentifier2_
        elif nodeName_ == 'RecordIdentifier3':
            RecordIdentifier3_ = child_.text
            RecordIdentifier3_ = self.gds_validate_string(RecordIdentifier3_, node, 'RecordIdentifier3')
            self.RecordIdentifier3 = RecordIdentifier3_
        elif nodeName_ == 'SubRiskClass':
            SubRiskClass_ = child_.text
            SubRiskClass_ = self.gds_validate_string(SubRiskClass_, node, 'SubRiskClass')
            self.SubRiskClass = SubRiskClass_
        elif nodeName_ == 'aDRItemNumber':
            aDRItemNumber_ = child_.text
            aDRItemNumber_ = self.gds_validate_string(aDRItemNumber_, node, 'aDRItemNumber')
            self.aDRItemNumber = aDRItemNumber_
        elif nodeName_ == 'aDRPackingGroupLetter':
            aDRPackingGroupLetter_ = child_.text
            aDRPackingGroupLetter_ = self.gds_validate_string(aDRPackingGroupLetter_, node, 'aDRPackingGroupLetter')
            self.aDRPackingGroupLetter = aDRPackingGroupLetter_
        elif nodeName_ == 'TechnicalName':
            TechnicalName_ = child_.text
            TechnicalName_ = self.gds_validate_string(TechnicalName_, node, 'TechnicalName')
            self.TechnicalName = TechnicalName_
        elif nodeName_ == 'HazardLabelRequired':
            HazardLabelRequired_ = child_.text
            HazardLabelRequired_ = self.gds_validate_string(HazardLabelRequired_, node, 'HazardLabelRequired')
            self.HazardLabelRequired = HazardLabelRequired_
        elif nodeName_ == 'ClassDivisionNumber':
            ClassDivisionNumber_ = child_.text
            ClassDivisionNumber_ = self.gds_validate_string(ClassDivisionNumber_, node, 'ClassDivisionNumber')
            self.ClassDivisionNumber = ClassDivisionNumber_
        elif nodeName_ == 'ReferenceNumber':
            ReferenceNumber_ = child_.text
            ReferenceNumber_ = self.gds_validate_string(ReferenceNumber_, node, 'ReferenceNumber')
            self.ReferenceNumber = ReferenceNumber_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UOM':
            UOM_ = child_.text
            UOM_ = self.gds_validate_string(UOM_, node, 'UOM')
            self.UOM = UOM_
        elif nodeName_ == 'PackagingType':
            PackagingType_ = child_.text
            PackagingType_ = self.gds_validate_string(PackagingType_, node, 'PackagingType')
            self.PackagingType = PackagingType_
        elif nodeName_ == 'IDNumber':
            IDNumber_ = child_.text
            IDNumber_ = self.gds_validate_string(IDNumber_, node, 'IDNumber')
            self.IDNumber = IDNumber_
        elif nodeName_ == 'ProperShippingName':
            ProperShippingName_ = child_.text
            ProperShippingName_ = self.gds_validate_string(ProperShippingName_, node, 'ProperShippingName')
            self.ProperShippingName = ProperShippingName_
        elif nodeName_ == 'AdditionalDescription':
            AdditionalDescription_ = child_.text
            AdditionalDescription_ = self.gds_validate_string(AdditionalDescription_, node, 'AdditionalDescription')
            self.AdditionalDescription = AdditionalDescription_
        elif nodeName_ == 'PackagingGroupType':
            PackagingGroupType_ = child_.text
            PackagingGroupType_ = self.gds_validate_string(PackagingGroupType_, node, 'PackagingGroupType')
            self.PackagingGroupType = PackagingGroupType_
        elif nodeName_ == 'PackagingInstructionCode':
            PackagingInstructionCode_ = child_.text
            PackagingInstructionCode_ = self.gds_validate_string(PackagingInstructionCode_, node, 'PackagingInstructionCode')
            self.PackagingInstructionCode = PackagingInstructionCode_
        elif nodeName_ == 'EmergencyPhone':
            EmergencyPhone_ = child_.text
            EmergencyPhone_ = self.gds_validate_string(EmergencyPhone_, node, 'EmergencyPhone')
            self.EmergencyPhone = EmergencyPhone_
        elif nodeName_ == 'EmergencyContact':
            EmergencyContact_ = child_.text
            EmergencyContact_ = self.gds_validate_string(EmergencyContact_, node, 'EmergencyContact')
            self.EmergencyContact = EmergencyContact_
        elif nodeName_ == 'ReportableQuantity':
            ReportableQuantity_ = child_.text
            ReportableQuantity_ = self.gds_validate_string(ReportableQuantity_, node, 'ReportableQuantity')
            self.ReportableQuantity = ReportableQuantity_
        elif nodeName_ == 'RegulationSet':
            RegulationSet_ = child_.text
            RegulationSet_ = self.gds_validate_string(RegulationSet_, node, 'RegulationSet')
            self.RegulationSet = RegulationSet_
        elif nodeName_ == 'TransportationMode':
            TransportationMode_ = child_.text
            TransportationMode_ = self.gds_validate_string(TransportationMode_, node, 'TransportationMode')
            self.TransportationMode = TransportationMode_
        elif nodeName_ == 'CommodityRegulatedLevelCode':
            CommodityRegulatedLevelCode_ = child_.text
            CommodityRegulatedLevelCode_ = self.gds_validate_string(CommodityRegulatedLevelCode_, node, 'CommodityRegulatedLevelCode')
            self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode_
        elif nodeName_ == 'TransportCategory':
            TransportCategory_ = child_.text
            TransportCategory_ = self.gds_validate_string(TransportCategory_, node, 'TransportCategory')
            self.TransportCategory = TransportCategory_
        elif nodeName_ == 'TunnelRestrictionCode':
            TunnelRestrictionCode_ = child_.text
            TunnelRestrictionCode_ = self.gds_validate_string(TunnelRestrictionCode_, node, 'TunnelRestrictionCode')
            self.TunnelRestrictionCode = TunnelRestrictionCode_
        elif nodeName_ == 'ChemicalRecordIdentifier':
            ChemicalRecordIdentifier_ = child_.text
            ChemicalRecordIdentifier_ = self.gds_validate_string(ChemicalRecordIdentifier_, node, 'ChemicalRecordIdentifier')
            self.ChemicalRecordIdentifier = ChemicalRecordIdentifier_
        elif nodeName_ == 'LocalTechnicalName':
            LocalTechnicalName_ = child_.text
            LocalTechnicalName_ = self.gds_validate_string(LocalTechnicalName_, node, 'LocalTechnicalName')
            self.LocalTechnicalName = LocalTechnicalName_
        elif nodeName_ == 'LocalProperShippingName':
            LocalProperShippingName_ = child_.text
            LocalProperShippingName_ = self.gds_validate_string(LocalProperShippingName_, node, 'LocalProperShippingName')
            self.LocalProperShippingName = LocalProperShippingName_
# end class HazMatType


class DryIceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RegulationSet=None, DryIceWeight=None, MedicalUseIndicator=None):
        self.original_tagname_ = None
        self.RegulationSet = RegulationSet
        self.DryIceWeight = DryIceWeight
        self.MedicalUseIndicator = MedicalUseIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DryIceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DryIceType.subclass:
            return DryIceType.subclass(*args_, **kwargs_)
        else:
            return DryIceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RegulationSet(self): return self.RegulationSet
    def set_RegulationSet(self, RegulationSet): self.RegulationSet = RegulationSet
    def get_DryIceWeight(self): return self.DryIceWeight
    def set_DryIceWeight(self, DryIceWeight): self.DryIceWeight = DryIceWeight
    def get_MedicalUseIndicator(self): return self.MedicalUseIndicator
    def set_MedicalUseIndicator(self, MedicalUseIndicator): self.MedicalUseIndicator = MedicalUseIndicator
    def hasContent_(self):
        if (
            self.RegulationSet is not None or
            self.DryIceWeight is not None or
            self.MedicalUseIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DryIceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DryIceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DryIceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DryIceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DryIceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DryIceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegulationSet is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RegulationSet>%s</RegulationSet>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RegulationSet), input_name='RegulationSet')), eol_))
        if self.DryIceWeight is not None:
            self.DryIceWeight.export(outfile, level, namespaceprefix_, name_='DryIceWeight', pretty_print=pretty_print)
        if self.MedicalUseIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MedicalUseIndicator>%s</MedicalUseIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MedicalUseIndicator), input_name='MedicalUseIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RegulationSet':
            RegulationSet_ = child_.text
            RegulationSet_ = self.gds_validate_string(RegulationSet_, node, 'RegulationSet')
            self.RegulationSet = RegulationSet_
        elif nodeName_ == 'DryIceWeight':
            obj_ = DryIceWeightType.factory()
            obj_.build(child_)
            self.DryIceWeight = obj_
            obj_.original_tagname_ = 'DryIceWeight'
        elif nodeName_ == 'MedicalUseIndicator':
            MedicalUseIndicator_ = child_.text
            MedicalUseIndicator_ = self.gds_validate_string(MedicalUseIndicator_, node, 'MedicalUseIndicator')
            self.MedicalUseIndicator = MedicalUseIndicator_
# end class DryIceType


class DryIceWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DryIceWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DryIceWeightType.subclass:
            return DryIceWeightType.subclass(*args_, **kwargs_)
        else:
            return DryIceWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DryIceWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DryIceWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DryIceWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DryIceWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DryIceWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DryIceWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Weight>%s</Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class DryIceWeightType


class ReceiptSpecificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ImageFormat=None):
        self.original_tagname_ = None
        self.ImageFormat = ImageFormat
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiptSpecificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiptSpecificationType.subclass:
            return ReceiptSpecificationType.subclass(*args_, **kwargs_)
        else:
            return ReceiptSpecificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ImageFormat(self): return self.ImageFormat
    def set_ImageFormat(self, ImageFormat): self.ImageFormat = ImageFormat
    def hasContent_(self):
        if (
            self.ImageFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ReceiptSpecificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiptSpecificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReceiptSpecificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ReceiptSpecificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReceiptSpecificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ReceiptSpecificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ImageFormat is not None:
            self.ImageFormat.export(outfile, level, namespaceprefix_, name_='ImageFormat', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ImageFormat':
            obj_ = ImageFormatCodeDescriptionType.factory()
            obj_.build(child_)
            self.ImageFormat = obj_
            obj_.original_tagname_ = 'ImageFormat'
# end class ReceiptSpecificationType


class ImageFormatCodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageFormatCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageFormatCodeDescriptionType.subclass:
            return ImageFormatCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ImageFormatCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ImageFormatCodeDescriptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageFormatCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageFormatCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ImageFormatCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageFormatCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ImageFormatCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class ImageFormatCodeDescriptionType


class AlternateDeliveryAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, UPSAccessPointID=None, Address=None):
        self.original_tagname_ = None
        self.Name = Name
        self.AttentionName = AttentionName
        self.UPSAccessPointID = UPSAccessPointID
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlternateDeliveryAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlternateDeliveryAddressType.subclass:
            return AlternateDeliveryAddressType.subclass(*args_, **kwargs_)
        else:
            return AlternateDeliveryAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_UPSAccessPointID(self): return self.UPSAccessPointID
    def set_UPSAccessPointID(self, UPSAccessPointID): self.UPSAccessPointID = UPSAccessPointID
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.UPSAccessPointID is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='AlternateDeliveryAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlternateDeliveryAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AlternateDeliveryAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='AlternateDeliveryAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AlternateDeliveryAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='AlternateDeliveryAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AttentionName>%s</AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.UPSAccessPointID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<UPSAccessPointID>%s</UPSAccessPointID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.UPSAccessPointID), input_name='UPSAccessPointID')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'UPSAccessPointID':
            UPSAccessPointID_ = child_.text
            UPSAccessPointID_ = self.gds_validate_string(UPSAccessPointID_, node, 'UPSAccessPointID')
            self.UPSAccessPointID = UPSAccessPointID_
        elif nodeName_ == 'Address':
            obj_ = ADLAddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class AlternateDeliveryAddressType


class IndicationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicationType.subclass:
            return IndicationType.subclass(*args_, **kwargs_)
        else:
            return IndicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='IndicationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='IndicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndicationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='IndicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class IndicationType


class ShipmentServiceOptionsNotificationVoiceMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsNotificationVoiceMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsNotificationVoiceMessageType.subclass:
            return ShipmentServiceOptionsNotificationVoiceMessageType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsNotificationVoiceMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsNotificationVoiceMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsNotificationVoiceMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class ShipmentServiceOptionsNotificationVoiceMessageType


class ShipmentServiceOptionsNotificationTextMessageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None):
        self.original_tagname_ = None
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsNotificationTextMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsNotificationTextMessageType.subclass:
            return ShipmentServiceOptionsNotificationTextMessageType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsNotificationTextMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationTextMessageType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsNotificationTextMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsNotificationTextMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationTextMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationTextMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationTextMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PhoneNumber>%s</PhoneNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class ShipmentServiceOptionsNotificationTextMessageType


class ADLAddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ADLAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ADLAddressType.subclass:
            return ADLAddressType.subclass(*args_, **kwargs_)
        else:
            return ADLAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ADLAddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ADLAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ADLAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ADLAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ADLAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ADLAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class ADLAddressType


class TaxIDCodeDescType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxIDCodeDescType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDCodeDescType.subclass:
            return TaxIDCodeDescType.subclass(*args_, **kwargs_)
        else:
            return TaxIDCodeDescType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TaxIDCodeDescType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxIDCodeDescType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxIDCodeDescType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TaxIDCodeDescType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxIDCodeDescType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TaxIDCodeDescType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TaxIDCodeDescType


class DGSignatoryInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Title=None, Place=None, Date=None, ShipperDeclaration=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Title = Title
        self.Place = Place
        self.Date = Date
        self.ShipperDeclaration = ShipperDeclaration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DGSignatoryInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DGSignatoryInfoType.subclass:
            return DGSignatoryInfoType.subclass(*args_, **kwargs_)
        else:
            return DGSignatoryInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_Place(self): return self.Place
    def set_Place(self, Place): self.Place = Place
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_ShipperDeclaration(self): return self.ShipperDeclaration
    def set_ShipperDeclaration(self, ShipperDeclaration): self.ShipperDeclaration = ShipperDeclaration
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Title is not None or
            self.Place is not None or
            self.Date is not None or
            self.ShipperDeclaration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DGSignatoryInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DGSignatoryInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DGSignatoryInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DGSignatoryInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DGSignatoryInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DGSignatoryInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Title>%s</Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.Place is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Place>%s</Place>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Place), input_name='Place')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Date>%s</Date>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), eol_))
        if self.ShipperDeclaration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipperDeclaration>%s</ShipperDeclaration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperDeclaration), input_name='ShipperDeclaration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'Place':
            Place_ = child_.text
            Place_ = self.gds_validate_string(Place_, node, 'Place')
            self.Place = Place_
        elif nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'ShipperDeclaration':
            ShipperDeclaration_ = child_.text
            ShipperDeclaration_ = self.gds_validate_string(ShipperDeclaration_, node, 'ShipperDeclaration')
            self.ShipperDeclaration = ShipperDeclaration_
# end class DGSignatoryInfoType


class InternationalFormsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FormType=None, UserCreatedForm=None, CN22Form=None, UPSPremiumCareForm=None, AdditionalDocumentIndicator=None, FormGroupIdName=None, SEDFilingOption=None, Contacts=None, Product=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, TermsOfShipment=None, ReasonForExport=None, Comments=None, DeclarationStatement=None, Discount=None, FreightCharges=None, InsuranceCharges=None, OtherCharges=None, CurrencyCode=None, BlanketPeriod=None, ExportDate=None, ExportingCarrier=None, CarrierID=None, InBondCode=None, EntryNumber=None, PointOfOrigin=None, ModeOfTransport=None, PortOfExport=None, PortOfUnloading=None, LoadingPier=None, PartiesToTransaction=None, RoutedExportTransactionIndicator=None, ContainerizedIndicator=None, License=None, ECCNNumber=None, ShipperMemo=None, OverridePaperlessIndicator=None, MultiCurrencyInvoiceLineTotal=None, PointOfOriginType=None, EEIFilingOption=None, HazardousMaterialsIndicator=None):
        self.original_tagname_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
        self.UserCreatedForm = UserCreatedForm
        self.CN22Form = CN22Form
        self.UPSPremiumCareForm = UPSPremiumCareForm
        self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
        self.FormGroupIdName = FormGroupIdName
        self.SEDFilingOption = SEDFilingOption
        self.Contacts = Contacts
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceDate = InvoiceDate
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.TermsOfShipment = TermsOfShipment
        self.ReasonForExport = ReasonForExport
        self.Comments = Comments
        self.DeclarationStatement = DeclarationStatement
        self.Discount = Discount
        self.FreightCharges = FreightCharges
        self.InsuranceCharges = InsuranceCharges
        self.OtherCharges = OtherCharges
        self.CurrencyCode = CurrencyCode
        self.BlanketPeriod = BlanketPeriod
        self.ExportDate = ExportDate
        self.ExportingCarrier = ExportingCarrier
        self.CarrierID = CarrierID
        self.InBondCode = InBondCode
        self.EntryNumber = EntryNumber
        self.PointOfOrigin = PointOfOrigin
        self.ModeOfTransport = ModeOfTransport
        self.PortOfExport = PortOfExport
        self.PortOfUnloading = PortOfUnloading
        self.LoadingPier = LoadingPier
        self.PartiesToTransaction = PartiesToTransaction
        self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
        self.ContainerizedIndicator = ContainerizedIndicator
        self.License = License
        self.ECCNNumber = ECCNNumber
        self.ShipperMemo = ShipperMemo
        self.OverridePaperlessIndicator = OverridePaperlessIndicator
        self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
        self.PointOfOriginType = PointOfOriginType
        self.EEIFilingOption = EEIFilingOption
        self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalFormsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalFormsType.subclass:
            return InternationalFormsType.subclass(*args_, **kwargs_)
        else:
            return InternationalFormsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FormType(self): return self.FormType
    def set_FormType(self, FormType): self.FormType = FormType
    def add_FormType(self, value): self.FormType.append(value)
    def insert_FormType_at(self, index, value): self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value): self.FormType[index] = value
    def get_UserCreatedForm(self): return self.UserCreatedForm
    def set_UserCreatedForm(self, UserCreatedForm): self.UserCreatedForm = UserCreatedForm
    def get_CN22Form(self): return self.CN22Form
    def set_CN22Form(self, CN22Form): self.CN22Form = CN22Form
    def get_UPSPremiumCareForm(self): return self.UPSPremiumCareForm
    def set_UPSPremiumCareForm(self, UPSPremiumCareForm): self.UPSPremiumCareForm = UPSPremiumCareForm
    def get_AdditionalDocumentIndicator(self): return self.AdditionalDocumentIndicator
    def set_AdditionalDocumentIndicator(self, AdditionalDocumentIndicator): self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
    def get_FormGroupIdName(self): return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName): self.FormGroupIdName = FormGroupIdName
    def get_SEDFilingOption(self): return self.SEDFilingOption
    def set_SEDFilingOption(self, SEDFilingOption): self.SEDFilingOption = SEDFilingOption
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def get_Product(self): return self.Product
    def set_Product(self, Product): self.Product = Product
    def add_Product(self, value): self.Product.append(value)
    def insert_Product_at(self, index, value): self.Product.insert(index, value)
    def replace_Product_at(self, index, value): self.Product[index] = value
    def get_InvoiceNumber(self): return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber): self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self): return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate): self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_TermsOfShipment(self): return self.TermsOfShipment
    def set_TermsOfShipment(self, TermsOfShipment): self.TermsOfShipment = TermsOfShipment
    def get_ReasonForExport(self): return self.ReasonForExport
    def set_ReasonForExport(self, ReasonForExport): self.ReasonForExport = ReasonForExport
    def get_Comments(self): return self.Comments
    def set_Comments(self, Comments): self.Comments = Comments
    def get_DeclarationStatement(self): return self.DeclarationStatement
    def set_DeclarationStatement(self, DeclarationStatement): self.DeclarationStatement = DeclarationStatement
    def get_Discount(self): return self.Discount
    def set_Discount(self, Discount): self.Discount = Discount
    def get_FreightCharges(self): return self.FreightCharges
    def set_FreightCharges(self, FreightCharges): self.FreightCharges = FreightCharges
    def get_InsuranceCharges(self): return self.InsuranceCharges
    def set_InsuranceCharges(self, InsuranceCharges): self.InsuranceCharges = InsuranceCharges
    def get_OtherCharges(self): return self.OtherCharges
    def set_OtherCharges(self, OtherCharges): self.OtherCharges = OtherCharges
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_BlanketPeriod(self): return self.BlanketPeriod
    def set_BlanketPeriod(self, BlanketPeriod): self.BlanketPeriod = BlanketPeriod
    def get_ExportDate(self): return self.ExportDate
    def set_ExportDate(self, ExportDate): self.ExportDate = ExportDate
    def get_ExportingCarrier(self): return self.ExportingCarrier
    def set_ExportingCarrier(self, ExportingCarrier): self.ExportingCarrier = ExportingCarrier
    def get_CarrierID(self): return self.CarrierID
    def set_CarrierID(self, CarrierID): self.CarrierID = CarrierID
    def get_InBondCode(self): return self.InBondCode
    def set_InBondCode(self, InBondCode): self.InBondCode = InBondCode
    def get_EntryNumber(self): return self.EntryNumber
    def set_EntryNumber(self, EntryNumber): self.EntryNumber = EntryNumber
    def get_PointOfOrigin(self): return self.PointOfOrigin
    def set_PointOfOrigin(self, PointOfOrigin): self.PointOfOrigin = PointOfOrigin
    def get_ModeOfTransport(self): return self.ModeOfTransport
    def set_ModeOfTransport(self, ModeOfTransport): self.ModeOfTransport = ModeOfTransport
    def get_PortOfExport(self): return self.PortOfExport
    def set_PortOfExport(self, PortOfExport): self.PortOfExport = PortOfExport
    def get_PortOfUnloading(self): return self.PortOfUnloading
    def set_PortOfUnloading(self, PortOfUnloading): self.PortOfUnloading = PortOfUnloading
    def get_LoadingPier(self): return self.LoadingPier
    def set_LoadingPier(self, LoadingPier): self.LoadingPier = LoadingPier
    def get_PartiesToTransaction(self): return self.PartiesToTransaction
    def set_PartiesToTransaction(self, PartiesToTransaction): self.PartiesToTransaction = PartiesToTransaction
    def get_RoutedExportTransactionIndicator(self): return self.RoutedExportTransactionIndicator
    def set_RoutedExportTransactionIndicator(self, RoutedExportTransactionIndicator): self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
    def get_ContainerizedIndicator(self): return self.ContainerizedIndicator
    def set_ContainerizedIndicator(self, ContainerizedIndicator): self.ContainerizedIndicator = ContainerizedIndicator
    def get_License(self): return self.License
    def set_License(self, License): self.License = License
    def get_ECCNNumber(self): return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber): self.ECCNNumber = ECCNNumber
    def get_ShipperMemo(self): return self.ShipperMemo
    def set_ShipperMemo(self, ShipperMemo): self.ShipperMemo = ShipperMemo
    def get_OverridePaperlessIndicator(self): return self.OverridePaperlessIndicator
    def set_OverridePaperlessIndicator(self, OverridePaperlessIndicator): self.OverridePaperlessIndicator = OverridePaperlessIndicator
    def get_MultiCurrencyInvoiceLineTotal(self): return self.MultiCurrencyInvoiceLineTotal
    def set_MultiCurrencyInvoiceLineTotal(self, MultiCurrencyInvoiceLineTotal): self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
    def get_PointOfOriginType(self): return self.PointOfOriginType
    def set_PointOfOriginType(self, PointOfOriginType): self.PointOfOriginType = PointOfOriginType
    def get_EEIFilingOption(self): return self.EEIFilingOption
    def set_EEIFilingOption(self, EEIFilingOption): self.EEIFilingOption = EEIFilingOption
    def get_HazardousMaterialsIndicator(self): return self.HazardousMaterialsIndicator
    def set_HazardousMaterialsIndicator(self, HazardousMaterialsIndicator): self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
    def hasContent_(self):
        if (
            self.FormType or
            self.UserCreatedForm is not None or
            self.CN22Form is not None or
            self.UPSPremiumCareForm is not None or
            self.AdditionalDocumentIndicator is not None or
            self.FormGroupIdName is not None or
            self.SEDFilingOption is not None or
            self.Contacts is not None or
            self.Product or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.TermsOfShipment is not None or
            self.ReasonForExport is not None or
            self.Comments is not None or
            self.DeclarationStatement is not None or
            self.Discount is not None or
            self.FreightCharges is not None or
            self.InsuranceCharges is not None or
            self.OtherCharges is not None or
            self.CurrencyCode is not None or
            self.BlanketPeriod is not None or
            self.ExportDate is not None or
            self.ExportingCarrier is not None or
            self.CarrierID is not None or
            self.InBondCode is not None or
            self.EntryNumber is not None or
            self.PointOfOrigin is not None or
            self.ModeOfTransport is not None or
            self.PortOfExport is not None or
            self.PortOfUnloading is not None or
            self.LoadingPier is not None or
            self.PartiesToTransaction is not None or
            self.RoutedExportTransactionIndicator is not None or
            self.ContainerizedIndicator is not None or
            self.License is not None or
            self.ECCNNumber is not None or
            self.ShipperMemo is not None or
            self.OverridePaperlessIndicator is not None or
            self.MultiCurrencyInvoiceLineTotal is not None or
            self.PointOfOriginType is not None or
            self.EEIFilingOption is not None or
            self.HazardousMaterialsIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='InternationalFormsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalFormsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalFormsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='InternationalFormsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalFormsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='InternationalFormsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
           showIndent(outfile, level, pretty_print)
           outfile.write('<FormType>%s</FormType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), eol_))
        if self.UserCreatedForm is not None:
            self.UserCreatedForm.export(outfile, level, namespaceprefix_, name_='UserCreatedForm', pretty_print=pretty_print)
        if self.CN22Form is not None:
            self.CN22Form.export(outfile, level, namespaceprefix_, name_='CN22Form', pretty_print=pretty_print)
        if self.UPSPremiumCareForm is not None:
            self.UPSPremiumCareForm.export(outfile, level, namespaceprefix_, name_='UPSPremiumCareForm', pretty_print=pretty_print)
        if self.AdditionalDocumentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AdditionalDocumentIndicator>%s</AdditionalDocumentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDocumentIndicator), input_name='AdditionalDocumentIndicator')), eol_))
        if self.FormGroupIdName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FormGroupIdName>%s</FormGroupIdName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), eol_))
        if self.SEDFilingOption is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SEDFilingOption>%s</SEDFilingOption>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SEDFilingOption), input_name='SEDFilingOption')), eol_))
        if self.Contacts is not None:
            self.Contacts.export(outfile, level, namespaceprefix_, name_='Contacts', pretty_print=pretty_print)
        for Product_ in self.Product:
            Product_.export(outfile, level, namespaceprefix_, name_='Product', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<InvoiceNumber>%s</InvoiceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceNumber), input_name='InvoiceNumber')), eol_))
        if self.InvoiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<InvoiceDate>%s</InvoiceDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceDate), input_name='InvoiceDate')), eol_))
        if self.PurchaseOrderNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PurchaseOrderNumber>%s</PurchaseOrderNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), eol_))
        if self.TermsOfShipment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TermsOfShipment>%s</TermsOfShipment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfShipment), input_name='TermsOfShipment')), eol_))
        if self.ReasonForExport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ReasonForExport>%s</ReasonForExport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ReasonForExport), input_name='ReasonForExport')), eol_))
        if self.Comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Comments>%s</Comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), eol_))
        if self.DeclarationStatement is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DeclarationStatement>%s</DeclarationStatement>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationStatement), input_name='DeclarationStatement')), eol_))
        if self.Discount is not None:
            self.Discount.export(outfile, level, namespaceprefix_, name_='Discount', pretty_print=pretty_print)
        if self.FreightCharges is not None:
            self.FreightCharges.export(outfile, level, namespaceprefix_, name_='FreightCharges', pretty_print=pretty_print)
        if self.InsuranceCharges is not None:
            self.InsuranceCharges.export(outfile, level, namespaceprefix_, name_='InsuranceCharges', pretty_print=pretty_print)
        if self.OtherCharges is not None:
            self.OtherCharges.export(outfile, level, namespaceprefix_, name_='OtherCharges', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CurrencyCode>%s</CurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), eol_))
        if self.BlanketPeriod is not None:
            self.BlanketPeriod.export(outfile, level, namespaceprefix_, name_='BlanketPeriod', pretty_print=pretty_print)
        if self.ExportDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExportDate>%s</ExportDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportDate), input_name='ExportDate')), eol_))
        if self.ExportingCarrier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExportingCarrier>%s</ExportingCarrier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportingCarrier), input_name='ExportingCarrier')), eol_))
        if self.CarrierID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CarrierID>%s</CarrierID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CarrierID), input_name='CarrierID')), eol_))
        if self.InBondCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<InBondCode>%s</InBondCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.InBondCode), input_name='InBondCode')), eol_))
        if self.EntryNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EntryNumber>%s</EntryNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), eol_))
        if self.PointOfOrigin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PointOfOrigin>%s</PointOfOrigin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOrigin), input_name='PointOfOrigin')), eol_))
        if self.ModeOfTransport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ModeOfTransport>%s</ModeOfTransport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ModeOfTransport), input_name='ModeOfTransport')), eol_))
        if self.PortOfExport is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PortOfExport>%s</PortOfExport>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PortOfExport), input_name='PortOfExport')), eol_))
        if self.PortOfUnloading is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PortOfUnloading>%s</PortOfUnloading>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PortOfUnloading), input_name='PortOfUnloading')), eol_))
        if self.LoadingPier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LoadingPier>%s</LoadingPier>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LoadingPier), input_name='LoadingPier')), eol_))
        if self.PartiesToTransaction is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PartiesToTransaction>%s</PartiesToTransaction>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartiesToTransaction), input_name='PartiesToTransaction')), eol_))
        if self.RoutedExportTransactionIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RoutedExportTransactionIndicator>%s</RoutedExportTransactionIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RoutedExportTransactionIndicator), input_name='RoutedExportTransactionIndicator')), eol_))
        if self.ContainerizedIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ContainerizedIndicator>%s</ContainerizedIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ContainerizedIndicator), input_name='ContainerizedIndicator')), eol_))
        if self.License is not None:
            self.License.export(outfile, level, namespaceprefix_, name_='License', pretty_print=pretty_print)
        if self.ECCNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ECCNNumber>%s</ECCNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), eol_))
        if self.ShipperMemo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipperMemo>%s</ShipperMemo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipperMemo), input_name='ShipperMemo')), eol_))
        if self.OverridePaperlessIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OverridePaperlessIndicator>%s</OverridePaperlessIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OverridePaperlessIndicator), input_name='OverridePaperlessIndicator')), eol_))
        if self.MultiCurrencyInvoiceLineTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MultiCurrencyInvoiceLineTotal>%s</MultiCurrencyInvoiceLineTotal>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MultiCurrencyInvoiceLineTotal), input_name='MultiCurrencyInvoiceLineTotal')), eol_))
        if self.PointOfOriginType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PointOfOriginType>%s</PointOfOriginType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOriginType), input_name='PointOfOriginType')), eol_))
        if self.EEIFilingOption is not None:
            self.EEIFilingOption.export(outfile, level, namespaceprefix_, name_='EEIFilingOption', pretty_print=pretty_print)
        if self.HazardousMaterialsIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<HazardousMaterialsIndicator>%s</HazardousMaterialsIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsIndicator), input_name='HazardousMaterialsIndicator')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FormType':
            FormType_ = child_.text
            FormType_ = self.gds_validate_string(FormType_, node, 'FormType')
            self.FormType.append(FormType_)
        elif nodeName_ == 'UserCreatedForm':
            obj_ = UserCreatedFormType.factory()
            obj_.build(child_)
            self.UserCreatedForm = obj_
            obj_.original_tagname_ = 'UserCreatedForm'
        elif nodeName_ == 'CN22Form':
            obj_ = CN22FormType.factory()
            obj_.build(child_)
            self.CN22Form = obj_
            obj_.original_tagname_ = 'CN22Form'
        elif nodeName_ == 'UPSPremiumCareForm':
            obj_ = UPSPremiumCareFormType.factory()
            obj_.build(child_)
            self.UPSPremiumCareForm = obj_
            obj_.original_tagname_ = 'UPSPremiumCareForm'
        elif nodeName_ == 'AdditionalDocumentIndicator':
            AdditionalDocumentIndicator_ = child_.text
            AdditionalDocumentIndicator_ = self.gds_validate_string(AdditionalDocumentIndicator_, node, 'AdditionalDocumentIndicator')
            self.AdditionalDocumentIndicator = AdditionalDocumentIndicator_
        elif nodeName_ == 'FormGroupIdName':
            FormGroupIdName_ = child_.text
            FormGroupIdName_ = self.gds_validate_string(FormGroupIdName_, node, 'FormGroupIdName')
            self.FormGroupIdName = FormGroupIdName_
        elif nodeName_ == 'SEDFilingOption':
            SEDFilingOption_ = child_.text
            SEDFilingOption_ = self.gds_validate_string(SEDFilingOption_, node, 'SEDFilingOption')
            self.SEDFilingOption = SEDFilingOption_
        elif nodeName_ == 'Contacts':
            obj_ = ContactsType.factory()
            obj_.build(child_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Product':
            obj_ = ProductType.factory()
            obj_.build(child_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'InvoiceNumber':
            InvoiceNumber_ = child_.text
            InvoiceNumber_ = self.gds_validate_string(InvoiceNumber_, node, 'InvoiceNumber')
            self.InvoiceNumber = InvoiceNumber_
        elif nodeName_ == 'InvoiceDate':
            InvoiceDate_ = child_.text
            InvoiceDate_ = self.gds_validate_string(InvoiceDate_, node, 'InvoiceDate')
            self.InvoiceDate = InvoiceDate_
        elif nodeName_ == 'PurchaseOrderNumber':
            PurchaseOrderNumber_ = child_.text
            PurchaseOrderNumber_ = self.gds_validate_string(PurchaseOrderNumber_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = PurchaseOrderNumber_
        elif nodeName_ == 'TermsOfShipment':
            TermsOfShipment_ = child_.text
            TermsOfShipment_ = self.gds_validate_string(TermsOfShipment_, node, 'TermsOfShipment')
            self.TermsOfShipment = TermsOfShipment_
        elif nodeName_ == 'ReasonForExport':
            ReasonForExport_ = child_.text
            ReasonForExport_ = self.gds_validate_string(ReasonForExport_, node, 'ReasonForExport')
            self.ReasonForExport = ReasonForExport_
        elif nodeName_ == 'Comments':
            Comments_ = child_.text
            Comments_ = self.gds_validate_string(Comments_, node, 'Comments')
            self.Comments = Comments_
        elif nodeName_ == 'DeclarationStatement':
            DeclarationStatement_ = child_.text
            DeclarationStatement_ = self.gds_validate_string(DeclarationStatement_, node, 'DeclarationStatement')
            self.DeclarationStatement = DeclarationStatement_
        elif nodeName_ == 'Discount':
            obj_ = DiscountType.factory()
            obj_.build(child_)
            self.Discount = obj_
            obj_.original_tagname_ = 'Discount'
        elif nodeName_ == 'FreightCharges':
            obj_ = FreightChargesType.factory()
            obj_.build(child_)
            self.FreightCharges = obj_
            obj_.original_tagname_ = 'FreightCharges'
        elif nodeName_ == 'InsuranceCharges':
            obj_ = InsuranceChargesType.factory()
            obj_.build(child_)
            self.InsuranceCharges = obj_
            obj_.original_tagname_ = 'InsuranceCharges'
        elif nodeName_ == 'OtherCharges':
            obj_ = OtherChargesType.factory()
            obj_.build(child_)
            self.OtherCharges = obj_
            obj_.original_tagname_ = 'OtherCharges'
        elif nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'BlanketPeriod':
            obj_ = BlanketPeriodType.factory()
            obj_.build(child_)
            self.BlanketPeriod = obj_
            obj_.original_tagname_ = 'BlanketPeriod'
        elif nodeName_ == 'ExportDate':
            ExportDate_ = child_.text
            ExportDate_ = self.gds_validate_string(ExportDate_, node, 'ExportDate')
            self.ExportDate = ExportDate_
        elif nodeName_ == 'ExportingCarrier':
            ExportingCarrier_ = child_.text
            ExportingCarrier_ = self.gds_validate_string(ExportingCarrier_, node, 'ExportingCarrier')
            self.ExportingCarrier = ExportingCarrier_
        elif nodeName_ == 'CarrierID':
            CarrierID_ = child_.text
            CarrierID_ = self.gds_validate_string(CarrierID_, node, 'CarrierID')
            self.CarrierID = CarrierID_
        elif nodeName_ == 'InBondCode':
            InBondCode_ = child_.text
            InBondCode_ = self.gds_validate_string(InBondCode_, node, 'InBondCode')
            self.InBondCode = InBondCode_
        elif nodeName_ == 'EntryNumber':
            EntryNumber_ = child_.text
            EntryNumber_ = self.gds_validate_string(EntryNumber_, node, 'EntryNumber')
            self.EntryNumber = EntryNumber_
        elif nodeName_ == 'PointOfOrigin':
            PointOfOrigin_ = child_.text
            PointOfOrigin_ = self.gds_validate_string(PointOfOrigin_, node, 'PointOfOrigin')
            self.PointOfOrigin = PointOfOrigin_
        elif nodeName_ == 'ModeOfTransport':
            ModeOfTransport_ = child_.text
            ModeOfTransport_ = self.gds_validate_string(ModeOfTransport_, node, 'ModeOfTransport')
            self.ModeOfTransport = ModeOfTransport_
        elif nodeName_ == 'PortOfExport':
            PortOfExport_ = child_.text
            PortOfExport_ = self.gds_validate_string(PortOfExport_, node, 'PortOfExport')
            self.PortOfExport = PortOfExport_
        elif nodeName_ == 'PortOfUnloading':
            PortOfUnloading_ = child_.text
            PortOfUnloading_ = self.gds_validate_string(PortOfUnloading_, node, 'PortOfUnloading')
            self.PortOfUnloading = PortOfUnloading_
        elif nodeName_ == 'LoadingPier':
            LoadingPier_ = child_.text
            LoadingPier_ = self.gds_validate_string(LoadingPier_, node, 'LoadingPier')
            self.LoadingPier = LoadingPier_
        elif nodeName_ == 'PartiesToTransaction':
            PartiesToTransaction_ = child_.text
            PartiesToTransaction_ = self.gds_validate_string(PartiesToTransaction_, node, 'PartiesToTransaction')
            self.PartiesToTransaction = PartiesToTransaction_
        elif nodeName_ == 'RoutedExportTransactionIndicator':
            RoutedExportTransactionIndicator_ = child_.text
            RoutedExportTransactionIndicator_ = self.gds_validate_string(RoutedExportTransactionIndicator_, node, 'RoutedExportTransactionIndicator')
            self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator_
        elif nodeName_ == 'ContainerizedIndicator':
            ContainerizedIndicator_ = child_.text
            ContainerizedIndicator_ = self.gds_validate_string(ContainerizedIndicator_, node, 'ContainerizedIndicator')
            self.ContainerizedIndicator = ContainerizedIndicator_
        elif nodeName_ == 'License':
            obj_ = LicenseType.factory()
            obj_.build(child_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'ECCNNumber':
            ECCNNumber_ = child_.text
            ECCNNumber_ = self.gds_validate_string(ECCNNumber_, node, 'ECCNNumber')
            self.ECCNNumber = ECCNNumber_
        elif nodeName_ == 'ShipperMemo':
            ShipperMemo_ = child_.text
            ShipperMemo_ = self.gds_validate_string(ShipperMemo_, node, 'ShipperMemo')
            self.ShipperMemo = ShipperMemo_
        elif nodeName_ == 'OverridePaperlessIndicator':
            OverridePaperlessIndicator_ = child_.text
            OverridePaperlessIndicator_ = self.gds_validate_string(OverridePaperlessIndicator_, node, 'OverridePaperlessIndicator')
            self.OverridePaperlessIndicator = OverridePaperlessIndicator_
        elif nodeName_ == 'MultiCurrencyInvoiceLineTotal':
            MultiCurrencyInvoiceLineTotal_ = child_.text
            MultiCurrencyInvoiceLineTotal_ = self.gds_validate_string(MultiCurrencyInvoiceLineTotal_, node, 'MultiCurrencyInvoiceLineTotal')
            self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal_
        elif nodeName_ == 'PointOfOriginType':
            PointOfOriginType_ = child_.text
            PointOfOriginType_ = self.gds_validate_string(PointOfOriginType_, node, 'PointOfOriginType')
            self.PointOfOriginType = PointOfOriginType_
        elif nodeName_ == 'EEIFilingOption':
            obj_ = EEIFilingOptionType.factory()
            obj_.build(child_)
            self.EEIFilingOption = obj_
            obj_.original_tagname_ = 'EEIFilingOption'
        elif nodeName_ == 'HazardousMaterialsIndicator':
            HazardousMaterialsIndicator_ = child_.text
            HazardousMaterialsIndicator_ = self.gds_validate_string(HazardousMaterialsIndicator_, node, 'HazardousMaterialsIndicator')
            self.HazardousMaterialsIndicator = HazardousMaterialsIndicator_
# end class InternationalFormsType


class UPSPremiumCareFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ShipmentDate=None, PageSize=None, PrintType=None, NumOfCopies=None, LanguageForUPSPremiumCare=None):
        self.original_tagname_ = None
        self.ShipmentDate = ShipmentDate
        self.PageSize = PageSize
        self.PrintType = PrintType
        self.NumOfCopies = NumOfCopies
        self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSPremiumCareFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSPremiumCareFormType.subclass:
            return UPSPremiumCareFormType.subclass(*args_, **kwargs_)
        else:
            return UPSPremiumCareFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ShipmentDate(self): return self.ShipmentDate
    def set_ShipmentDate(self, ShipmentDate): self.ShipmentDate = ShipmentDate
    def get_PageSize(self): return self.PageSize
    def set_PageSize(self, PageSize): self.PageSize = PageSize
    def get_PrintType(self): return self.PrintType
    def set_PrintType(self, PrintType): self.PrintType = PrintType
    def get_NumOfCopies(self): return self.NumOfCopies
    def set_NumOfCopies(self, NumOfCopies): self.NumOfCopies = NumOfCopies
    def get_LanguageForUPSPremiumCare(self): return self.LanguageForUPSPremiumCare
    def set_LanguageForUPSPremiumCare(self, LanguageForUPSPremiumCare): self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
    def hasContent_(self):
        if (
            self.ShipmentDate is not None or
            self.PageSize is not None or
            self.PrintType is not None or
            self.NumOfCopies is not None or
            self.LanguageForUPSPremiumCare is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UPSPremiumCareFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSPremiumCareFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UPSPremiumCareFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UPSPremiumCareFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UPSPremiumCareFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UPSPremiumCareFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ShipmentDate>%s</ShipmentDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDate), input_name='ShipmentDate')), eol_))
        if self.PageSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PageSize>%s</PageSize>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PageSize), input_name='PageSize')), eol_))
        if self.PrintType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PrintType>%s</PrintType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrintType), input_name='PrintType')), eol_))
        if self.NumOfCopies is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NumOfCopies>%s</NumOfCopies>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumOfCopies), input_name='NumOfCopies')), eol_))
        if self.LanguageForUPSPremiumCare is not None:
            self.LanguageForUPSPremiumCare.export(outfile, level, namespaceprefix_, name_='LanguageForUPSPremiumCare', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ShipmentDate':
            ShipmentDate_ = child_.text
            ShipmentDate_ = self.gds_validate_string(ShipmentDate_, node, 'ShipmentDate')
            self.ShipmentDate = ShipmentDate_
        elif nodeName_ == 'PageSize':
            PageSize_ = child_.text
            PageSize_ = self.gds_validate_string(PageSize_, node, 'PageSize')
            self.PageSize = PageSize_
        elif nodeName_ == 'PrintType':
            PrintType_ = child_.text
            PrintType_ = self.gds_validate_string(PrintType_, node, 'PrintType')
            self.PrintType = PrintType_
        elif nodeName_ == 'NumOfCopies':
            NumOfCopies_ = child_.text
            NumOfCopies_ = self.gds_validate_string(NumOfCopies_, node, 'NumOfCopies')
            self.NumOfCopies = NumOfCopies_
        elif nodeName_ == 'LanguageForUPSPremiumCare':
            obj_ = LanguageForUPSPremiumCareType.factory()
            obj_.build(child_)
            self.LanguageForUPSPremiumCare = obj_
            obj_.original_tagname_ = 'LanguageForUPSPremiumCare'
# end class UPSPremiumCareFormType


class LanguageForUPSPremiumCareType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Language=None):
        self.original_tagname_ = None
        if Language is None:
            self.Language = []
        else:
            self.Language = Language
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LanguageForUPSPremiumCareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LanguageForUPSPremiumCareType.subclass:
            return LanguageForUPSPremiumCareType.subclass(*args_, **kwargs_)
        else:
            return LanguageForUPSPremiumCareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def add_Language(self, value): self.Language.append(value)
    def insert_Language_at(self, index, value): self.Language.insert(index, value)
    def replace_Language_at(self, index, value): self.Language[index] = value
    def hasContent_(self):
        if (
            self.Language
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LanguageForUPSPremiumCareType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LanguageForUPSPremiumCareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LanguageForUPSPremiumCareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LanguageForUPSPremiumCareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LanguageForUPSPremiumCareType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LanguageForUPSPremiumCareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Language_ in self.Language:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Language>%s</Language>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Language_), input_name='Language')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language.append(Language_)
# end class LanguageForUPSPremiumCareType


class UserCreatedFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DocumentID=None):
        self.original_tagname_ = None
        if DocumentID is None:
            self.DocumentID = []
        else:
            self.DocumentID = DocumentID
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UserCreatedFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UserCreatedFormType.subclass:
            return UserCreatedFormType.subclass(*args_, **kwargs_)
        else:
            return UserCreatedFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentID(self): return self.DocumentID
    def set_DocumentID(self, DocumentID): self.DocumentID = DocumentID
    def add_DocumentID(self, value): self.DocumentID.append(value)
    def insert_DocumentID_at(self, index, value): self.DocumentID.insert(index, value)
    def replace_DocumentID_at(self, index, value): self.DocumentID[index] = value
    def hasContent_(self):
        if (
            self.DocumentID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UserCreatedFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UserCreatedFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UserCreatedFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UserCreatedFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UserCreatedFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UserCreatedFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentID_ in self.DocumentID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<DocumentID>%s</DocumentID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(DocumentID_), input_name='DocumentID')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentID':
            DocumentID_ = child_.text
            DocumentID_ = self.gds_validate_string(DocumentID_, node, 'DocumentID')
            self.DocumentID.append(DocumentID_)
# end class UserCreatedFormType


class CN22FormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LabelSize=None, PrintsPerPage=None, LabelPrintType=None, CN22Type=None, CN22OtherDescription=None, FoldHereText=None, CN22Content=None):
        self.original_tagname_ = None
        self.LabelSize = LabelSize
        self.PrintsPerPage = PrintsPerPage
        self.LabelPrintType = LabelPrintType
        self.CN22Type = CN22Type
        self.CN22OtherDescription = CN22OtherDescription
        self.FoldHereText = FoldHereText
        if CN22Content is None:
            self.CN22Content = []
        else:
            self.CN22Content = CN22Content
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22FormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22FormType.subclass:
            return CN22FormType.subclass(*args_, **kwargs_)
        else:
            return CN22FormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LabelSize(self): return self.LabelSize
    def set_LabelSize(self, LabelSize): self.LabelSize = LabelSize
    def get_PrintsPerPage(self): return self.PrintsPerPage
    def set_PrintsPerPage(self, PrintsPerPage): self.PrintsPerPage = PrintsPerPage
    def get_LabelPrintType(self): return self.LabelPrintType
    def set_LabelPrintType(self, LabelPrintType): self.LabelPrintType = LabelPrintType
    def get_CN22Type(self): return self.CN22Type
    def set_CN22Type(self, CN22Type): self.CN22Type = CN22Type
    def get_CN22OtherDescription(self): return self.CN22OtherDescription
    def set_CN22OtherDescription(self, CN22OtherDescription): self.CN22OtherDescription = CN22OtherDescription
    def get_FoldHereText(self): return self.FoldHereText
    def set_FoldHereText(self, FoldHereText): self.FoldHereText = FoldHereText
    def get_CN22Content(self): return self.CN22Content
    def set_CN22Content(self, CN22Content): self.CN22Content = CN22Content
    def add_CN22Content(self, value): self.CN22Content.append(value)
    def insert_CN22Content_at(self, index, value): self.CN22Content.insert(index, value)
    def replace_CN22Content_at(self, index, value): self.CN22Content[index] = value
    def hasContent_(self):
        if (
            self.LabelSize is not None or
            self.PrintsPerPage is not None or
            self.LabelPrintType is not None or
            self.CN22Type is not None or
            self.CN22OtherDescription is not None or
            self.FoldHereText is not None or
            self.CN22Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='CN22FormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22FormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CN22FormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='CN22FormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CN22FormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='CN22FormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelSize is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LabelSize>%s</LabelSize>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelSize), input_name='LabelSize')), eol_))
        if self.PrintsPerPage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PrintsPerPage>%s</PrintsPerPage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PrintsPerPage), input_name='PrintsPerPage')), eol_))
        if self.LabelPrintType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LabelPrintType>%s</LabelPrintType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintType), input_name='LabelPrintType')), eol_))
        if self.CN22Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22Type>%s</CN22Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22Type), input_name='CN22Type')), eol_))
        if self.CN22OtherDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22OtherDescription>%s</CN22OtherDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22OtherDescription), input_name='CN22OtherDescription')), eol_))
        if self.FoldHereText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FoldHereText>%s</FoldHereText>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FoldHereText), input_name='FoldHereText')), eol_))
        for CN22Content_ in self.CN22Content:
            CN22Content_.export(outfile, level, namespaceprefix_, name_='CN22Content', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LabelSize':
            LabelSize_ = child_.text
            LabelSize_ = self.gds_validate_string(LabelSize_, node, 'LabelSize')
            self.LabelSize = LabelSize_
        elif nodeName_ == 'PrintsPerPage':
            PrintsPerPage_ = child_.text
            PrintsPerPage_ = self.gds_validate_string(PrintsPerPage_, node, 'PrintsPerPage')
            self.PrintsPerPage = PrintsPerPage_
        elif nodeName_ == 'LabelPrintType':
            LabelPrintType_ = child_.text
            LabelPrintType_ = self.gds_validate_string(LabelPrintType_, node, 'LabelPrintType')
            self.LabelPrintType = LabelPrintType_
        elif nodeName_ == 'CN22Type':
            CN22Type_ = child_.text
            CN22Type_ = self.gds_validate_string(CN22Type_, node, 'CN22Type')
            self.CN22Type = CN22Type_
        elif nodeName_ == 'CN22OtherDescription':
            CN22OtherDescription_ = child_.text
            CN22OtherDescription_ = self.gds_validate_string(CN22OtherDescription_, node, 'CN22OtherDescription')
            self.CN22OtherDescription = CN22OtherDescription_
        elif nodeName_ == 'FoldHereText':
            FoldHereText_ = child_.text
            FoldHereText_ = self.gds_validate_string(FoldHereText_, node, 'FoldHereText')
            self.FoldHereText = FoldHereText_
        elif nodeName_ == 'CN22Content':
            obj_ = CN22ContentType.factory()
            obj_.build(child_)
            self.CN22Content.append(obj_)
            obj_.original_tagname_ = 'CN22Content'
# end class CN22FormType


class CN22ContentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CN22ContentQuantity=None, CN22ContentDescription=None, CN22ContentWeight=None, CN22ContentTotalValue=None, CN22ContentCurrencyCode=None, CN22ContentCountryOfOrigin=None, CN22ContentTariffNumber=None):
        self.original_tagname_ = None
        self.CN22ContentQuantity = CN22ContentQuantity
        self.CN22ContentDescription = CN22ContentDescription
        self.CN22ContentWeight = CN22ContentWeight
        self.CN22ContentTotalValue = CN22ContentTotalValue
        self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
        self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
        self.CN22ContentTariffNumber = CN22ContentTariffNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22ContentType.subclass:
            return CN22ContentType.subclass(*args_, **kwargs_)
        else:
            return CN22ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CN22ContentQuantity(self): return self.CN22ContentQuantity
    def set_CN22ContentQuantity(self, CN22ContentQuantity): self.CN22ContentQuantity = CN22ContentQuantity
    def get_CN22ContentDescription(self): return self.CN22ContentDescription
    def set_CN22ContentDescription(self, CN22ContentDescription): self.CN22ContentDescription = CN22ContentDescription
    def get_CN22ContentWeight(self): return self.CN22ContentWeight
    def set_CN22ContentWeight(self, CN22ContentWeight): self.CN22ContentWeight = CN22ContentWeight
    def get_CN22ContentTotalValue(self): return self.CN22ContentTotalValue
    def set_CN22ContentTotalValue(self, CN22ContentTotalValue): self.CN22ContentTotalValue = CN22ContentTotalValue
    def get_CN22ContentCurrencyCode(self): return self.CN22ContentCurrencyCode
    def set_CN22ContentCurrencyCode(self, CN22ContentCurrencyCode): self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
    def get_CN22ContentCountryOfOrigin(self): return self.CN22ContentCountryOfOrigin
    def set_CN22ContentCountryOfOrigin(self, CN22ContentCountryOfOrigin): self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
    def get_CN22ContentTariffNumber(self): return self.CN22ContentTariffNumber
    def set_CN22ContentTariffNumber(self, CN22ContentTariffNumber): self.CN22ContentTariffNumber = CN22ContentTariffNumber
    def hasContent_(self):
        if (
            self.CN22ContentQuantity is not None or
            self.CN22ContentDescription is not None or
            self.CN22ContentWeight is not None or
            self.CN22ContentTotalValue is not None or
            self.CN22ContentCurrencyCode is not None or
            self.CN22ContentCountryOfOrigin is not None or
            self.CN22ContentTariffNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='CN22ContentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CN22ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='CN22ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CN22ContentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='CN22ContentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CN22ContentQuantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22ContentQuantity>%s</CN22ContentQuantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentQuantity), input_name='CN22ContentQuantity')), eol_))
        if self.CN22ContentDescription is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22ContentDescription>%s</CN22ContentDescription>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentDescription), input_name='CN22ContentDescription')), eol_))
        if self.CN22ContentWeight is not None:
            self.CN22ContentWeight.export(outfile, level, namespaceprefix_, name_='CN22ContentWeight', pretty_print=pretty_print)
        if self.CN22ContentTotalValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22ContentTotalValue>%s</CN22ContentTotalValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTotalValue), input_name='CN22ContentTotalValue')), eol_))
        if self.CN22ContentCurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22ContentCurrencyCode>%s</CN22ContentCurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCurrencyCode), input_name='CN22ContentCurrencyCode')), eol_))
        if self.CN22ContentCountryOfOrigin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22ContentCountryOfOrigin>%s</CN22ContentCountryOfOrigin>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCountryOfOrigin), input_name='CN22ContentCountryOfOrigin')), eol_))
        if self.CN22ContentTariffNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CN22ContentTariffNumber>%s</CN22ContentTariffNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTariffNumber), input_name='CN22ContentTariffNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CN22ContentQuantity':
            CN22ContentQuantity_ = child_.text
            CN22ContentQuantity_ = self.gds_validate_string(CN22ContentQuantity_, node, 'CN22ContentQuantity')
            self.CN22ContentQuantity = CN22ContentQuantity_
        elif nodeName_ == 'CN22ContentDescription':
            CN22ContentDescription_ = child_.text
            CN22ContentDescription_ = self.gds_validate_string(CN22ContentDescription_, node, 'CN22ContentDescription')
            self.CN22ContentDescription = CN22ContentDescription_
        elif nodeName_ == 'CN22ContentWeight':
            obj_ = ProductWeightType.factory()
            obj_.build(child_)
            self.CN22ContentWeight = obj_
            obj_.original_tagname_ = 'CN22ContentWeight'
        elif nodeName_ == 'CN22ContentTotalValue':
            CN22ContentTotalValue_ = child_.text
            CN22ContentTotalValue_ = self.gds_validate_string(CN22ContentTotalValue_, node, 'CN22ContentTotalValue')
            self.CN22ContentTotalValue = CN22ContentTotalValue_
        elif nodeName_ == 'CN22ContentCurrencyCode':
            CN22ContentCurrencyCode_ = child_.text
            CN22ContentCurrencyCode_ = self.gds_validate_string(CN22ContentCurrencyCode_, node, 'CN22ContentCurrencyCode')
            self.CN22ContentCurrencyCode = CN22ContentCurrencyCode_
        elif nodeName_ == 'CN22ContentCountryOfOrigin':
            CN22ContentCountryOfOrigin_ = child_.text
            CN22ContentCountryOfOrigin_ = self.gds_validate_string(CN22ContentCountryOfOrigin_, node, 'CN22ContentCountryOfOrigin')
            self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin_
        elif nodeName_ == 'CN22ContentTariffNumber':
            CN22ContentTariffNumber_ = child_.text
            CN22ContentTariffNumber_ = self.gds_validate_string(CN22ContentTariffNumber_, node, 'CN22ContentTariffNumber')
            self.CN22ContentTariffNumber = CN22ContentTariffNumber_
# end class CN22ContentType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None):
        self.original_tagname_ = None
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='AddressType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine1>%s</AddressLine1>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine1), input_name='AddressLine1')), eol_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine2>%s</AddressLine2>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), eol_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AddressLine3>%s</AddressLine3>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<City>%s</City>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), eol_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<StateProvinceCode>%s</StateProvinceCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PostalCode>%s</PostalCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CountryCode>%s</CountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class AddressType


class BlanketPeriodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None):
        self.original_tagname_ = None
        self.BeginDate = BeginDate
        self.EndDate = EndDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BlanketPeriodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BlanketPeriodType.subclass:
            return BlanketPeriodType.subclass(*args_, **kwargs_)
        else:
            return BlanketPeriodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BeginDate(self): return self.BeginDate
    def set_BeginDate(self, BeginDate): self.BeginDate = BeginDate
    def get_EndDate(self): return self.EndDate
    def set_EndDate(self, EndDate): self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='BlanketPeriodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BlanketPeriodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BlanketPeriodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='BlanketPeriodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BlanketPeriodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='BlanketPeriodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<BeginDate>%s</BeginDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EndDate>%s</EndDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BeginDate':
            BeginDate_ = child_.text
            BeginDate_ = self.gds_validate_string(BeginDate_, node, 'BeginDate')
            self.BeginDate = BeginDate_
        elif nodeName_ == 'EndDate':
            EndDate_ = child_.text
            EndDate_ = self.gds_validate_string(EndDate_, node, 'EndDate')
            self.EndDate = EndDate_
# end class BlanketPeriodType


class ContactsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ForwardAgent=None, UltimateConsignee=None, IntermediateConsignee=None, Producer=None):
        self.original_tagname_ = None
        self.ForwardAgent = ForwardAgent
        self.UltimateConsignee = UltimateConsignee
        self.IntermediateConsignee = IntermediateConsignee
        self.Producer = Producer
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactsType.subclass:
            return ContactsType.subclass(*args_, **kwargs_)
        else:
            return ContactsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ForwardAgent(self): return self.ForwardAgent
    def set_ForwardAgent(self, ForwardAgent): self.ForwardAgent = ForwardAgent
    def get_UltimateConsignee(self): return self.UltimateConsignee
    def set_UltimateConsignee(self, UltimateConsignee): self.UltimateConsignee = UltimateConsignee
    def get_IntermediateConsignee(self): return self.IntermediateConsignee
    def set_IntermediateConsignee(self, IntermediateConsignee): self.IntermediateConsignee = IntermediateConsignee
    def get_Producer(self): return self.Producer
    def set_Producer(self, Producer): self.Producer = Producer
    def hasContent_(self):
        if (
            self.ForwardAgent is not None or
            self.UltimateConsignee is not None or
            self.IntermediateConsignee is not None or
            self.Producer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ContactsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ContactsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ContactsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ForwardAgent is not None:
            self.ForwardAgent.export(outfile, level, namespaceprefix_, name_='ForwardAgent', pretty_print=pretty_print)
        if self.UltimateConsignee is not None:
            self.UltimateConsignee.export(outfile, level, namespaceprefix_, name_='UltimateConsignee', pretty_print=pretty_print)
        if self.IntermediateConsignee is not None:
            self.IntermediateConsignee.export(outfile, level, namespaceprefix_, name_='IntermediateConsignee', pretty_print=pretty_print)
        if self.Producer is not None:
            self.Producer.export(outfile, level, namespaceprefix_, name_='Producer', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ForwardAgent':
            obj_ = ForwardAgentType.factory()
            obj_.build(child_)
            self.ForwardAgent = obj_
            obj_.original_tagname_ = 'ForwardAgent'
        elif nodeName_ == 'UltimateConsignee':
            obj_ = UltimateConsigneeType.factory()
            obj_.build(child_)
            self.UltimateConsignee = obj_
            obj_.original_tagname_ = 'UltimateConsignee'
        elif nodeName_ == 'IntermediateConsignee':
            obj_ = IntermediateConsigneeType.factory()
            obj_.build(child_)
            self.IntermediateConsignee = obj_
            obj_.original_tagname_ = 'IntermediateConsignee'
        elif nodeName_ == 'Producer':
            obj_ = ProducerType.factory()
            obj_.build(child_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
# end class ContactsType


class CodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeType.subclass:
            return CodeType.subclass(*args_, **kwargs_)
        else:
            return CodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='CodeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='CodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='CodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CodeType


class DiscountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None):
        self.original_tagname_ = None
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DiscountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DiscountType.subclass:
            return DiscountType.subclass(*args_, **kwargs_)
        else:
            return DiscountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DiscountType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DiscountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DiscountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DiscountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DiscountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DiscountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class DiscountType


class ForwardAgentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, TaxIdentificationNumber=None, Address=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ForwardAgentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ForwardAgentType.subclass:
            return ForwardAgentType.subclass(*args_, **kwargs_)
        else:
            return ForwardAgentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ForwardAgentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ForwardAgentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ForwardAgentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ForwardAgentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ForwardAgentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ForwardAgentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxIdentificationNumber>%s</TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ForwardAgentType


class FreightChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None):
        self.original_tagname_ = None
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightChargesType.subclass:
            return FreightChargesType.subclass(*args_, **kwargs_)
        else:
            return FreightChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='FreightChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='FreightChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='FreightChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class FreightChargesType


class InsuranceChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None):
        self.original_tagname_ = None
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InsuranceChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InsuranceChargesType.subclass:
            return InsuranceChargesType.subclass(*args_, **kwargs_)
        else:
            return InsuranceChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='InsuranceChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InsuranceChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InsuranceChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='InsuranceChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InsuranceChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='InsuranceChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InsuranceChargesType


class IntermediateConsigneeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.Address = Address
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntermediateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntermediateConsigneeType.subclass:
            return IntermediateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return IntermediateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='IntermediateConsigneeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntermediateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntermediateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='IntermediateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IntermediateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='IntermediateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class IntermediateConsigneeType


class LicenseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Date=None, ExceptionCode=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Date = Date
        self.ExceptionCode = ExceptionCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseType.subclass:
            return LicenseType.subclass(*args_, **kwargs_)
        else:
            return LicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_ExceptionCode(self): return self.ExceptionCode
    def set_ExceptionCode(self, ExceptionCode): self.ExceptionCode = ExceptionCode
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Date is not None or
            self.ExceptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='LicenseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='LicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='LicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Date>%s</Date>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), eol_))
        if self.ExceptionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExceptionCode>%s</ExceptionCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionCode), input_name='ExceptionCode')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'ExceptionCode':
            ExceptionCode_ = child_.text
            ExceptionCode_ = self.gds_validate_string(ExceptionCode_, node, 'ExceptionCode')
            self.ExceptionCode = ExceptionCode_
# end class LicenseType


class NetCostDateRangeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None):
        self.original_tagname_ = None
        self.BeginDate = BeginDate
        self.EndDate = EndDate
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NetCostDateRangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NetCostDateRangeType.subclass:
            return NetCostDateRangeType.subclass(*args_, **kwargs_)
        else:
            return NetCostDateRangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BeginDate(self): return self.BeginDate
    def set_BeginDate(self, BeginDate): self.BeginDate = BeginDate
    def get_EndDate(self): return self.EndDate
    def set_EndDate(self, EndDate): self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='NetCostDateRangeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NetCostDateRangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NetCostDateRangeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='NetCostDateRangeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NetCostDateRangeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='NetCostDateRangeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<BeginDate>%s</BeginDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), eol_))
        if self.EndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EndDate>%s</EndDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BeginDate':
            BeginDate_ = child_.text
            BeginDate_ = self.gds_validate_string(BeginDate_, node, 'BeginDate')
            self.BeginDate = BeginDate_
        elif nodeName_ == 'EndDate':
            EndDate_ = child_.text
            EndDate_ = self.gds_validate_string(EndDate_, node, 'EndDate')
            self.EndDate = EndDate_
# end class NetCostDateRangeType


class OtherChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None, Description=None):
        self.original_tagname_ = None
        self.MonetaryValue = MonetaryValue
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OtherChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OtherChargesType.subclass:
            return OtherChargesType.subclass(*args_, **kwargs_)
        else:
            return OtherChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.MonetaryValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='OtherChargesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OtherChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OtherChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='OtherChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OtherChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='OtherChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MonetaryValue>%s</MonetaryValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class OtherChargesType


class PhoneType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneType.subclass:
            return PhoneType.subclass(*args_, **kwargs_)
        else:
            return PhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PhoneType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PhoneType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Extension is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Extension>%s</Extension>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Extension':
            Extension_ = child_.text
            Extension_ = self.gds_validate_string(Extension_, node, 'Extension')
            self.Extension = Extension_
# end class PhoneType


class ProductType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Description=None, Unit=None, CommodityCode=None, PartNumber=None, OriginCountryCode=None, JointProductionIndicator=None, NetCostCode=None, NetCostDateRange=None, PreferenceCriteria=None, ProducerInfo=None, MarksAndNumbers=None, NumberOfPackagesPerCommodity=None, ProductWeight=None, VehicleID=None, ScheduleB=None, ExportType=None, SEDTotalValue=None, ExcludeFromForm=None, ProductCurrencyCode=None, PackingListInfo=None, EEIInformation=None):
        self.original_tagname_ = None
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        self.Unit = Unit
        self.CommodityCode = CommodityCode
        self.PartNumber = PartNumber
        self.OriginCountryCode = OriginCountryCode
        self.JointProductionIndicator = JointProductionIndicator
        self.NetCostCode = NetCostCode
        self.NetCostDateRange = NetCostDateRange
        self.PreferenceCriteria = PreferenceCriteria
        self.ProducerInfo = ProducerInfo
        self.MarksAndNumbers = MarksAndNumbers
        self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
        self.ProductWeight = ProductWeight
        self.VehicleID = VehicleID
        self.ScheduleB = ScheduleB
        self.ExportType = ExportType
        self.SEDTotalValue = SEDTotalValue
        self.ExcludeFromForm = ExcludeFromForm
        self.ProductCurrencyCode = ProductCurrencyCode
        self.PackingListInfo = PackingListInfo
        self.EEIInformation = EEIInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductType.subclass:
            return ProductType.subclass(*args_, **kwargs_)
        else:
            return ProductType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def add_Description(self, value): self.Description.append(value)
    def insert_Description_at(self, index, value): self.Description.insert(index, value)
    def replace_Description_at(self, index, value): self.Description[index] = value
    def get_Unit(self): return self.Unit
    def set_Unit(self, Unit): self.Unit = Unit
    def get_CommodityCode(self): return self.CommodityCode
    def set_CommodityCode(self, CommodityCode): self.CommodityCode = CommodityCode
    def get_PartNumber(self): return self.PartNumber
    def set_PartNumber(self, PartNumber): self.PartNumber = PartNumber
    def get_OriginCountryCode(self): return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode): self.OriginCountryCode = OriginCountryCode
    def get_JointProductionIndicator(self): return self.JointProductionIndicator
    def set_JointProductionIndicator(self, JointProductionIndicator): self.JointProductionIndicator = JointProductionIndicator
    def get_NetCostCode(self): return self.NetCostCode
    def set_NetCostCode(self, NetCostCode): self.NetCostCode = NetCostCode
    def get_NetCostDateRange(self): return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange): self.NetCostDateRange = NetCostDateRange
    def get_PreferenceCriteria(self): return self.PreferenceCriteria
    def set_PreferenceCriteria(self, PreferenceCriteria): self.PreferenceCriteria = PreferenceCriteria
    def get_ProducerInfo(self): return self.ProducerInfo
    def set_ProducerInfo(self, ProducerInfo): self.ProducerInfo = ProducerInfo
    def get_MarksAndNumbers(self): return self.MarksAndNumbers
    def set_MarksAndNumbers(self, MarksAndNumbers): self.MarksAndNumbers = MarksAndNumbers
    def get_NumberOfPackagesPerCommodity(self): return self.NumberOfPackagesPerCommodity
    def set_NumberOfPackagesPerCommodity(self, NumberOfPackagesPerCommodity): self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
    def get_ProductWeight(self): return self.ProductWeight
    def set_ProductWeight(self, ProductWeight): self.ProductWeight = ProductWeight
    def get_VehicleID(self): return self.VehicleID
    def set_VehicleID(self, VehicleID): self.VehicleID = VehicleID
    def get_ScheduleB(self): return self.ScheduleB
    def set_ScheduleB(self, ScheduleB): self.ScheduleB = ScheduleB
    def get_ExportType(self): return self.ExportType
    def set_ExportType(self, ExportType): self.ExportType = ExportType
    def get_SEDTotalValue(self): return self.SEDTotalValue
    def set_SEDTotalValue(self, SEDTotalValue): self.SEDTotalValue = SEDTotalValue
    def get_ExcludeFromForm(self): return self.ExcludeFromForm
    def set_ExcludeFromForm(self, ExcludeFromForm): self.ExcludeFromForm = ExcludeFromForm
    def get_ProductCurrencyCode(self): return self.ProductCurrencyCode
    def set_ProductCurrencyCode(self, ProductCurrencyCode): self.ProductCurrencyCode = ProductCurrencyCode
    def get_PackingListInfo(self): return self.PackingListInfo
    def set_PackingListInfo(self, PackingListInfo): self.PackingListInfo = PackingListInfo
    def get_EEIInformation(self): return self.EEIInformation
    def set_EEIInformation(self, EEIInformation): self.EEIInformation = EEIInformation
    def hasContent_(self):
        if (
            self.Description or
            self.Unit is not None or
            self.CommodityCode is not None or
            self.PartNumber is not None or
            self.OriginCountryCode is not None or
            self.JointProductionIndicator is not None or
            self.NetCostCode is not None or
            self.NetCostDateRange is not None or
            self.PreferenceCriteria is not None or
            self.ProducerInfo is not None or
            self.MarksAndNumbers is not None or
            self.NumberOfPackagesPerCommodity is not None or
            self.ProductWeight is not None or
            self.VehicleID is not None or
            self.ScheduleB is not None or
            self.ExportType is not None or
            self.SEDTotalValue is not None or
            self.ExcludeFromForm is not None or
            self.ProductCurrencyCode is not None or
            self.PackingListInfo is not None or
            self.EEIInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ProductType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ProductType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ProductType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Description_), input_name='Description')), eol_))
        if self.Unit is not None:
            self.Unit.export(outfile, level, namespaceprefix_, name_='Unit', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CommodityCode>%s</CommodityCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), eol_))
        if self.PartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PartNumber>%s</PartNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), eol_))
        if self.OriginCountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<OriginCountryCode>%s</OriginCountryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), eol_))
        if self.JointProductionIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<JointProductionIndicator>%s</JointProductionIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.JointProductionIndicator), input_name='JointProductionIndicator')), eol_))
        if self.NetCostCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NetCostCode>%s</NetCostCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NetCostCode), input_name='NetCostCode')), eol_))
        if self.NetCostDateRange is not None:
            self.NetCostDateRange.export(outfile, level, namespaceprefix_, name_='NetCostDateRange', pretty_print=pretty_print)
        if self.PreferenceCriteria is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PreferenceCriteria>%s</PreferenceCriteria>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriteria), input_name='PreferenceCriteria')), eol_))
        if self.ProducerInfo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ProducerInfo>%s</ProducerInfo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProducerInfo), input_name='ProducerInfo')), eol_))
        if self.MarksAndNumbers is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<MarksAndNumbers>%s</MarksAndNumbers>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbers), input_name='MarksAndNumbers')), eol_))
        if self.NumberOfPackagesPerCommodity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<NumberOfPackagesPerCommodity>%s</NumberOfPackagesPerCommodity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPackagesPerCommodity), input_name='NumberOfPackagesPerCommodity')), eol_))
        if self.ProductWeight is not None:
            self.ProductWeight.export(outfile, level, namespaceprefix_, name_='ProductWeight', pretty_print=pretty_print)
        if self.VehicleID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<VehicleID>%s</VehicleID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.VehicleID), input_name='VehicleID')), eol_))
        if self.ScheduleB is not None:
            self.ScheduleB.export(outfile, level, namespaceprefix_, name_='ScheduleB', pretty_print=pretty_print)
        if self.ExportType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExportType>%s</ExportType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportType), input_name='ExportType')), eol_))
        if self.SEDTotalValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SEDTotalValue>%s</SEDTotalValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SEDTotalValue), input_name='SEDTotalValue')), eol_))
        if self.ExcludeFromForm is not None:
            self.ExcludeFromForm.export(outfile, level, namespaceprefix_, name_='ExcludeFromForm', pretty_print=pretty_print)
        if self.ProductCurrencyCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ProductCurrencyCode>%s</ProductCurrencyCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProductCurrencyCode), input_name='ProductCurrencyCode')), eol_))
        if self.PackingListInfo is not None:
            self.PackingListInfo.export(outfile, level, namespaceprefix_, name_='PackingListInfo', pretty_print=pretty_print)
        if self.EEIInformation is not None:
            self.EEIInformation.export(outfile, level, namespaceprefix_, name_='EEIInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description.append(Description_)
        elif nodeName_ == 'Unit':
            obj_ = UnitType.factory()
            obj_.build(child_)
            self.Unit = obj_
            obj_.original_tagname_ = 'Unit'
        elif nodeName_ == 'CommodityCode':
            CommodityCode_ = child_.text
            CommodityCode_ = self.gds_validate_string(CommodityCode_, node, 'CommodityCode')
            self.CommodityCode = CommodityCode_
        elif nodeName_ == 'PartNumber':
            PartNumber_ = child_.text
            PartNumber_ = self.gds_validate_string(PartNumber_, node, 'PartNumber')
            self.PartNumber = PartNumber_
        elif nodeName_ == 'OriginCountryCode':
            OriginCountryCode_ = child_.text
            OriginCountryCode_ = self.gds_validate_string(OriginCountryCode_, node, 'OriginCountryCode')
            self.OriginCountryCode = OriginCountryCode_
        elif nodeName_ == 'JointProductionIndicator':
            JointProductionIndicator_ = child_.text
            JointProductionIndicator_ = self.gds_validate_string(JointProductionIndicator_, node, 'JointProductionIndicator')
            self.JointProductionIndicator = JointProductionIndicator_
        elif nodeName_ == 'NetCostCode':
            NetCostCode_ = child_.text
            NetCostCode_ = self.gds_validate_string(NetCostCode_, node, 'NetCostCode')
            self.NetCostCode = NetCostCode_
        elif nodeName_ == 'NetCostDateRange':
            obj_ = NetCostDateRangeType.factory()
            obj_.build(child_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
        elif nodeName_ == 'PreferenceCriteria':
            PreferenceCriteria_ = child_.text
            PreferenceCriteria_ = self.gds_validate_string(PreferenceCriteria_, node, 'PreferenceCriteria')
            self.PreferenceCriteria = PreferenceCriteria_
        elif nodeName_ == 'ProducerInfo':
            ProducerInfo_ = child_.text
            ProducerInfo_ = self.gds_validate_string(ProducerInfo_, node, 'ProducerInfo')
            self.ProducerInfo = ProducerInfo_
        elif nodeName_ == 'MarksAndNumbers':
            MarksAndNumbers_ = child_.text
            MarksAndNumbers_ = self.gds_validate_string(MarksAndNumbers_, node, 'MarksAndNumbers')
            self.MarksAndNumbers = MarksAndNumbers_
        elif nodeName_ == 'NumberOfPackagesPerCommodity':
            NumberOfPackagesPerCommodity_ = child_.text
            NumberOfPackagesPerCommodity_ = self.gds_validate_string(NumberOfPackagesPerCommodity_, node, 'NumberOfPackagesPerCommodity')
            self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity_
        elif nodeName_ == 'ProductWeight':
            obj_ = ProductWeightType.factory()
            obj_.build(child_)
            self.ProductWeight = obj_
            obj_.original_tagname_ = 'ProductWeight'
        elif nodeName_ == 'VehicleID':
            VehicleID_ = child_.text
            VehicleID_ = self.gds_validate_string(VehicleID_, node, 'VehicleID')
            self.VehicleID = VehicleID_
        elif nodeName_ == 'ScheduleB':
            obj_ = ScheduleBType.factory()
            obj_.build(child_)
            self.ScheduleB = obj_
            obj_.original_tagname_ = 'ScheduleB'
        elif nodeName_ == 'ExportType':
            ExportType_ = child_.text
            ExportType_ = self.gds_validate_string(ExportType_, node, 'ExportType')
            self.ExportType = ExportType_
        elif nodeName_ == 'SEDTotalValue':
            SEDTotalValue_ = child_.text
            SEDTotalValue_ = self.gds_validate_string(SEDTotalValue_, node, 'SEDTotalValue')
            self.SEDTotalValue = SEDTotalValue_
        elif nodeName_ == 'ExcludeFromForm':
            obj_ = ExcludeFromFormType.factory()
            obj_.build(child_)
            self.ExcludeFromForm = obj_
            obj_.original_tagname_ = 'ExcludeFromForm'
        elif nodeName_ == 'ProductCurrencyCode':
            ProductCurrencyCode_ = child_.text
            ProductCurrencyCode_ = self.gds_validate_string(ProductCurrencyCode_, node, 'ProductCurrencyCode')
            self.ProductCurrencyCode = ProductCurrencyCode_
        elif nodeName_ == 'PackingListInfo':
            obj_ = PackingListInfoType.factory()
            obj_.build(child_)
            self.PackingListInfo = obj_
            obj_.original_tagname_ = 'PackingListInfo'
        elif nodeName_ == 'EEIInformation':
            obj_ = EEIInformationType.factory()
            obj_.build(child_)
            self.EEIInformation = obj_
            obj_.original_tagname_ = 'EEIInformation'
# end class ProductType


class ExcludeFromFormType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FormType=None):
        self.original_tagname_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExcludeFromFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExcludeFromFormType.subclass:
            return ExcludeFromFormType.subclass(*args_, **kwargs_)
        else:
            return ExcludeFromFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FormType(self): return self.FormType
    def set_FormType(self, FormType): self.FormType = FormType
    def add_FormType(self, value): self.FormType.append(value)
    def insert_FormType_at(self, index, value): self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value): self.FormType[index] = value
    def hasContent_(self):
        if (
            self.FormType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ExcludeFromFormType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExcludeFromFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExcludeFromFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ExcludeFromFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExcludeFromFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ExcludeFromFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<FormType>%s</FormType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FormType':
            FormType_ = child_.text
            FormType_ = self.gds_validate_string(FormType_, node, 'FormType')
            self.FormType.append(FormType_)
# end class ExcludeFromFormType


class ProducerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Option=None, CompanyName=None, TaxIdentificationNumber=None, Address=None, AttentionName=None, Phone=None, EMailAddress=None):
        self.original_tagname_ = None
        self.Option = Option
        self.CompanyName = CompanyName
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.Address = Address
        self.AttentionName = AttentionName
        self.Phone = Phone
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProducerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProducerType.subclass:
            return ProducerType.subclass(*args_, **kwargs_)
        else:
            return ProducerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Option(self): return self.Option
    def set_Option(self, Option): self.Option = Option
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self): return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber): self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AttentionName(self): return self.AttentionName
    def set_AttentionName(self, AttentionName): self.AttentionName = AttentionName
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Option is not None or
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ProducerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProducerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProducerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ProducerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProducerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ProducerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Option>%s</Option>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.TaxIdentificationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<TaxIdentificationNumber>%s</TaxIdentificationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<AttentionName>%s</AttentionName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), eol_))
        if self.Phone is not None:
            self.Phone.export(outfile, level, namespaceprefix_, name_='Phone', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Option':
            Option_ = child_.text
            Option_ = self.gds_validate_string(Option_, node, 'Option')
            self.Option = Option_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'TaxIdentificationNumber':
            TaxIdentificationNumber_ = child_.text
            TaxIdentificationNumber_ = self.gds_validate_string(TaxIdentificationNumber_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = TaxIdentificationNumber_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            AttentionName_ = child_.text
            AttentionName_ = self.gds_validate_string(AttentionName_, node, 'AttentionName')
            self.AttentionName = AttentionName_
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory()
            obj_.build(child_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class ProducerType


class ProductWeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.original_tagname_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductWeightType.subclass:
            return ProductWeightType.subclass(*args_, **kwargs_)
        else:
            return ProductWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ProductWeightType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ProductWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ProductWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Weight>%s</Weight>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class ProductWeightType


class ScheduleBType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Quantity=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Number = Number
        if Quantity is None:
            self.Quantity = []
        else:
            self.Quantity = Quantity
        if UnitOfMeasurement is None:
            self.UnitOfMeasurement = []
        else:
            self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScheduleBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScheduleBType.subclass:
            return ScheduleBType.subclass(*args_, **kwargs_)
        else:
            return ScheduleBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def add_Quantity(self, value): self.Quantity.append(value)
    def insert_Quantity_at(self, index, value): self.Quantity.insert(index, value)
    def replace_Quantity_at(self, index, value): self.Quantity[index] = value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def add_UnitOfMeasurement(self, value): self.UnitOfMeasurement.append(value)
    def insert_UnitOfMeasurement_at(self, index, value): self.UnitOfMeasurement.insert(index, value)
    def replace_UnitOfMeasurement_at(self, index, value): self.UnitOfMeasurement[index] = value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Quantity or
            self.UnitOfMeasurement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ScheduleBType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScheduleBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ScheduleBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ScheduleBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ScheduleBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ScheduleBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        for Quantity_ in self.Quantity:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Quantity>%s</Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Quantity_), input_name='Quantity')), eol_))
        for UnitOfMeasurement_ in self.UnitOfMeasurement:
            UnitOfMeasurement_.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity.append(Quantity_)
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement.append(obj_)
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ScheduleBType


class UltimateConsigneeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None, UltimateConsigneeType_member=None):
        self.original_tagname_ = None
        self.CompanyName = CompanyName
        self.Address = Address
        self.UltimateConsigneeType = UltimateConsigneeType_member
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeType.subclass:
            return UltimateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_UltimateConsigneeType(self): return self.UltimateConsigneeType
    def set_UltimateConsigneeType(self, UltimateConsigneeType): self.UltimateConsigneeType = UltimateConsigneeType
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None or
            self.UltimateConsigneeType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UltimateConsigneeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UltimateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UltimateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UltimateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UltimateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CompanyName>%s</CompanyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespaceprefix_, name_='Address', pretty_print=pretty_print)
        if self.UltimateConsigneeType is not None:
            self.UltimateConsigneeType.export(outfile, level, namespaceprefix_, name_='UltimateConsigneeType', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'UltimateConsigneeType':
            obj_ = UltimateConsigneeTypeType.factory()
            obj_.build(child_)
            self.UltimateConsigneeType = obj_
            obj_.original_tagname_ = 'UltimateConsigneeType'
# end class UltimateConsigneeType


class UnitType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Value=None, UnitOfMeasurement=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Value = Value
        self.UnitOfMeasurement = UnitOfMeasurement
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitType.subclass:
            return UnitType.subclass(*args_, **kwargs_)
        else:
            return UnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UnitType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UnitType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Value>%s</Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class UnitType


class PackingListInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageAssociated=None):
        self.original_tagname_ = None
        if PackageAssociated is None:
            self.PackageAssociated = []
        else:
            self.PackageAssociated = PackageAssociated
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListInfoType.subclass:
            return PackingListInfoType.subclass(*args_, **kwargs_)
        else:
            return PackingListInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageAssociated(self): return self.PackageAssociated
    def set_PackageAssociated(self, PackageAssociated): self.PackageAssociated = PackageAssociated
    def add_PackageAssociated(self, value): self.PackageAssociated.append(value)
    def insert_PackageAssociated_at(self, index, value): self.PackageAssociated.insert(index, value)
    def replace_PackageAssociated_at(self, index, value): self.PackageAssociated[index] = value
    def hasContent_(self):
        if (
            self.PackageAssociated
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackingListInfoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackingListInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackingListInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PackageAssociated_ in self.PackageAssociated:
            PackageAssociated_.export(outfile, level, namespaceprefix_, name_='PackageAssociated', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageAssociated':
            obj_ = PackageAssociatedType.factory()
            obj_.build(child_)
            self.PackageAssociated.append(obj_)
            obj_.original_tagname_ = 'PackageAssociated'
# end class PackingListInfoType


class PackageAssociatedType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackageNumber=None, ProductAmount=None):
        self.original_tagname_ = None
        self.PackageNumber = PackageNumber
        self.ProductAmount = ProductAmount
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageAssociatedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageAssociatedType.subclass:
            return PackageAssociatedType.subclass(*args_, **kwargs_)
        else:
            return PackageAssociatedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageNumber(self): return self.PackageNumber
    def set_PackageNumber(self, PackageNumber): self.PackageNumber = PackageNumber
    def get_ProductAmount(self): return self.ProductAmount
    def set_ProductAmount(self, ProductAmount): self.ProductAmount = ProductAmount
    def hasContent_(self):
        if (
            self.PackageNumber is not None or
            self.ProductAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='PackageAssociatedType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageAssociatedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageAssociatedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='PackageAssociatedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageAssociatedType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='PackageAssociatedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PackageNumber>%s</PackageNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PackageNumber), input_name='PackageNumber')), eol_))
        if self.ProductAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ProductAmount>%s</ProductAmount>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ProductAmount), input_name='ProductAmount')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageNumber':
            PackageNumber_ = child_.text
            PackageNumber_ = self.gds_validate_string(PackageNumber_, node, 'PackageNumber')
            self.PackageNumber = PackageNumber_
        elif nodeName_ == 'ProductAmount':
            ProductAmount_ = child_.text
            ProductAmount_ = self.gds_validate_string(ProductAmount_, node, 'ProductAmount')
            self.ProductAmount = ProductAmount_
# end class PackageAssociatedType


class EEILicenseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, Code=None, LicenseLineValue=None, ECCNNumber=None):
        self.original_tagname_ = None
        self.Number = Number
        self.Code = Code
        self.LicenseLineValue = LicenseLineValue
        self.ECCNNumber = ECCNNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEILicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEILicenseType.subclass:
            return EEILicenseType.subclass(*args_, **kwargs_)
        else:
            return EEILicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_LicenseLineValue(self): return self.LicenseLineValue
    def set_LicenseLineValue(self, LicenseLineValue): self.LicenseLineValue = LicenseLineValue
    def get_ECCNNumber(self): return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber): self.ECCNNumber = ECCNNumber
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Code is not None or
            self.LicenseLineValue is not None or
            self.ECCNNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='EEILicenseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEILicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEILicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='EEILicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EEILicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='EEILicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Number>%s</Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), eol_))
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.LicenseLineValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LicenseLineValue>%s</LicenseLineValue>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LicenseLineValue), input_name='LicenseLineValue')), eol_))
        if self.ECCNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ECCNNumber>%s</ECCNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'LicenseLineValue':
            LicenseLineValue_ = child_.text
            LicenseLineValue_ = self.gds_validate_string(LicenseLineValue_, node, 'LicenseLineValue')
            self.LicenseLineValue = LicenseLineValue_
        elif nodeName_ == 'ECCNNumber':
            ECCNNumber_ = child_.text
            ECCNNumber_ = self.gds_validate_string(ECCNNumber_, node, 'ECCNNumber')
            self.ECCNNumber = ECCNNumber_
# end class EEILicenseType


class EEIFilingOptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, EMailAddress=None, Description=None, UPSFiled=None, ShipperFiled=None):
        self.original_tagname_ = None
        self.Code = Code
        self.EMailAddress = EMailAddress
        self.Description = Description
        self.UPSFiled = UPSFiled
        self.ShipperFiled = ShipperFiled
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIFilingOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIFilingOptionType.subclass:
            return EEIFilingOptionType.subclass(*args_, **kwargs_)
        else:
            return EEIFilingOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_UPSFiled(self): return self.UPSFiled
    def set_UPSFiled(self, UPSFiled): self.UPSFiled = UPSFiled
    def get_ShipperFiled(self): return self.ShipperFiled
    def set_ShipperFiled(self, ShipperFiled): self.ShipperFiled = ShipperFiled
    def hasContent_(self):
        if (
            self.Code is not None or
            self.EMailAddress is not None or
            self.Description is not None or
            self.UPSFiled is not None or
            self.ShipperFiled is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='EEIFilingOptionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIFilingOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEIFilingOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='EEIFilingOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EEIFilingOptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='EEIFilingOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.EMailAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EMailAddress>%s</EMailAddress>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.UPSFiled is not None:
            self.UPSFiled.export(outfile, level, namespaceprefix_, name_='UPSFiled', pretty_print=pretty_print)
        if self.ShipperFiled is not None:
            self.ShipperFiled.export(outfile, level, namespaceprefix_, name_='ShipperFiled', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'UPSFiled':
            obj_ = UPSFiledType.factory()
            obj_.build(child_)
            self.UPSFiled = obj_
            obj_.original_tagname_ = 'UPSFiled'
        elif nodeName_ == 'ShipperFiled':
            obj_ = ShipperFiledType.factory()
            obj_.build(child_)
            self.ShipperFiled = obj_
            obj_.original_tagname_ = 'ShipperFiled'
# end class EEIFilingOptionType


class UPSFiledType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, POA=None):
        self.original_tagname_ = None
        self.POA = POA
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSFiledType.subclass:
            return UPSFiledType.subclass(*args_, **kwargs_)
        else:
            return UPSFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_POA(self): return self.POA
    def set_POA(self, POA): self.POA = POA
    def hasContent_(self):
        if (
            self.POA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UPSFiledType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UPSFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UPSFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UPSFiledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UPSFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.POA is not None:
            self.POA.export(outfile, level, namespaceprefix_, name_='POA', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'POA':
            obj_ = POAType.factory()
            obj_.build(child_)
            self.POA = obj_
            obj_.original_tagname_ = 'POA'
# end class UPSFiledType


class ShipperFiledType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, PreDepartureITNNumber=None, ExemptionLegend=None, EEIShipmentReferenceNumber=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
        self.PreDepartureITNNumber = PreDepartureITNNumber
        self.ExemptionLegend = ExemptionLegend
        self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperFiledType.subclass:
            return ShipperFiledType.subclass(*args_, **kwargs_)
        else:
            return ShipperFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PreDepartureITNNumber(self): return self.PreDepartureITNNumber
    def set_PreDepartureITNNumber(self, PreDepartureITNNumber): self.PreDepartureITNNumber = PreDepartureITNNumber
    def get_ExemptionLegend(self): return self.ExemptionLegend
    def set_ExemptionLegend(self, ExemptionLegend): self.ExemptionLegend = ExemptionLegend
    def get_EEIShipmentReferenceNumber(self): return self.EEIShipmentReferenceNumber
    def set_EEIShipmentReferenceNumber(self, EEIShipmentReferenceNumber): self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.PreDepartureITNNumber is not None or
            self.ExemptionLegend is not None or
            self.EEIShipmentReferenceNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ShipperFiledType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ShipperFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipperFiledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ShipperFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PreDepartureITNNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<PreDepartureITNNumber>%s</PreDepartureITNNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PreDepartureITNNumber), input_name='PreDepartureITNNumber')), eol_))
        if self.ExemptionLegend is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExemptionLegend>%s</ExemptionLegend>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExemptionLegend), input_name='ExemptionLegend')), eol_))
        if self.EEIShipmentReferenceNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EEIShipmentReferenceNumber>%s</EEIShipmentReferenceNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EEIShipmentReferenceNumber), input_name='EEIShipmentReferenceNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PreDepartureITNNumber':
            PreDepartureITNNumber_ = child_.text
            PreDepartureITNNumber_ = self.gds_validate_string(PreDepartureITNNumber_, node, 'PreDepartureITNNumber')
            self.PreDepartureITNNumber = PreDepartureITNNumber_
        elif nodeName_ == 'ExemptionLegend':
            ExemptionLegend_ = child_.text
            ExemptionLegend_ = self.gds_validate_string(ExemptionLegend_, node, 'ExemptionLegend')
            self.ExemptionLegend = ExemptionLegend_
        elif nodeName_ == 'EEIShipmentReferenceNumber':
            EEIShipmentReferenceNumber_ = child_.text
            EEIShipmentReferenceNumber_ = self.gds_validate_string(EEIShipmentReferenceNumber_, node, 'EEIShipmentReferenceNumber')
            self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber_
# end class ShipperFiledType


class EEIInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExportInformation=None, License=None, DDTCInformation=None):
        self.original_tagname_ = None
        self.ExportInformation = ExportInformation
        self.License = License
        self.DDTCInformation = DDTCInformation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIInformationType.subclass:
            return EEIInformationType.subclass(*args_, **kwargs_)
        else:
            return EEIInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExportInformation(self): return self.ExportInformation
    def set_ExportInformation(self, ExportInformation): self.ExportInformation = ExportInformation
    def get_License(self): return self.License
    def set_License(self, License): self.License = License
    def get_DDTCInformation(self): return self.DDTCInformation
    def set_DDTCInformation(self, DDTCInformation): self.DDTCInformation = DDTCInformation
    def hasContent_(self):
        if (
            self.ExportInformation is not None or
            self.License is not None or
            self.DDTCInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='EEIInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEIInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='EEIInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EEIInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='EEIInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExportInformation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ExportInformation>%s</ExportInformation>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExportInformation), input_name='ExportInformation')), eol_))
        if self.License is not None:
            self.License.export(outfile, level, namespaceprefix_, name_='License', pretty_print=pretty_print)
        if self.DDTCInformation is not None:
            self.DDTCInformation.export(outfile, level, namespaceprefix_, name_='DDTCInformation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExportInformation':
            ExportInformation_ = child_.text
            ExportInformation_ = self.gds_validate_string(ExportInformation_, node, 'ExportInformation')
            self.ExportInformation = ExportInformation_
        elif nodeName_ == 'License':
            obj_ = EEILicenseType.factory()
            obj_.build(child_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'DDTCInformation':
            obj_ = DDTCInformationType.factory()
            obj_.build(child_)
            self.DDTCInformation = obj_
            obj_.original_tagname_ = 'DDTCInformation'
# end class EEIInformationType


class POAType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POAType.subclass:
            return POAType.subclass(*args_, **kwargs_)
        else:
            return POAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='POAType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='POAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='POAType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='POAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class POAType


class UltimateConsigneeTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.original_tagname_ = None
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeTypeType.subclass:
            return UltimateConsigneeTypeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='UltimateConsigneeTypeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UltimateConsigneeTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='UltimateConsigneeTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UltimateConsigneeTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='UltimateConsigneeTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Code>%s</Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Description>%s</Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UltimateConsigneeTypeType


class DDTCInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ITARExemptionNumber=None, USMLCategoryCode=None, EligiblePartyIndicator=None, RegistrationNumber=None, Quantity=None, UnitOfMeasurement=None, SignificantMilitaryEquipmentIndicator=None, ACMNumber=None):
        self.original_tagname_ = None
        self.ITARExemptionNumber = ITARExemptionNumber
        self.USMLCategoryCode = USMLCategoryCode
        self.EligiblePartyIndicator = EligiblePartyIndicator
        self.RegistrationNumber = RegistrationNumber
        self.Quantity = Quantity
        self.UnitOfMeasurement = UnitOfMeasurement
        self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
        self.ACMNumber = ACMNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DDTCInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DDTCInformationType.subclass:
            return DDTCInformationType.subclass(*args_, **kwargs_)
        else:
            return DDTCInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ITARExemptionNumber(self): return self.ITARExemptionNumber
    def set_ITARExemptionNumber(self, ITARExemptionNumber): self.ITARExemptionNumber = ITARExemptionNumber
    def get_USMLCategoryCode(self): return self.USMLCategoryCode
    def set_USMLCategoryCode(self, USMLCategoryCode): self.USMLCategoryCode = USMLCategoryCode
    def get_EligiblePartyIndicator(self): return self.EligiblePartyIndicator
    def set_EligiblePartyIndicator(self, EligiblePartyIndicator): self.EligiblePartyIndicator = EligiblePartyIndicator
    def get_RegistrationNumber(self): return self.RegistrationNumber
    def set_RegistrationNumber(self, RegistrationNumber): self.RegistrationNumber = RegistrationNumber
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_SignificantMilitaryEquipmentIndicator(self): return self.SignificantMilitaryEquipmentIndicator
    def set_SignificantMilitaryEquipmentIndicator(self, SignificantMilitaryEquipmentIndicator): self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
    def get_ACMNumber(self): return self.ACMNumber
    def set_ACMNumber(self, ACMNumber): self.ACMNumber = ACMNumber
    def hasContent_(self):
        if (
            self.ITARExemptionNumber is not None or
            self.USMLCategoryCode is not None or
            self.EligiblePartyIndicator is not None or
            self.RegistrationNumber is not None or
            self.Quantity is not None or
            self.UnitOfMeasurement is not None or
            self.SignificantMilitaryEquipmentIndicator is not None or
            self.ACMNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='DDTCInformationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DDTCInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DDTCInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='DDTCInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DDTCInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='DDTCInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ITARExemptionNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ITARExemptionNumber>%s</ITARExemptionNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ITARExemptionNumber), input_name='ITARExemptionNumber')), eol_))
        if self.USMLCategoryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<USMLCategoryCode>%s</USMLCategoryCode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.USMLCategoryCode), input_name='USMLCategoryCode')), eol_))
        if self.EligiblePartyIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<EligiblePartyIndicator>%s</EligiblePartyIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.EligiblePartyIndicator), input_name='EligiblePartyIndicator')), eol_))
        if self.RegistrationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<RegistrationNumber>%s</RegistrationNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumber), input_name='RegistrationNumber')), eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Quantity>%s</Quantity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), eol_))
        if self.UnitOfMeasurement is not None:
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.SignificantMilitaryEquipmentIndicator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<SignificantMilitaryEquipmentIndicator>%s</SignificantMilitaryEquipmentIndicator>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.SignificantMilitaryEquipmentIndicator), input_name='SignificantMilitaryEquipmentIndicator')), eol_))
        if self.ACMNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ACMNumber>%s</ACMNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ACMNumber), input_name='ACMNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ITARExemptionNumber':
            ITARExemptionNumber_ = child_.text
            ITARExemptionNumber_ = self.gds_validate_string(ITARExemptionNumber_, node, 'ITARExemptionNumber')
            self.ITARExemptionNumber = ITARExemptionNumber_
        elif nodeName_ == 'USMLCategoryCode':
            USMLCategoryCode_ = child_.text
            USMLCategoryCode_ = self.gds_validate_string(USMLCategoryCode_, node, 'USMLCategoryCode')
            self.USMLCategoryCode = USMLCategoryCode_
        elif nodeName_ == 'EligiblePartyIndicator':
            EligiblePartyIndicator_ = child_.text
            EligiblePartyIndicator_ = self.gds_validate_string(EligiblePartyIndicator_, node, 'EligiblePartyIndicator')
            self.EligiblePartyIndicator = EligiblePartyIndicator_
        elif nodeName_ == 'RegistrationNumber':
            RegistrationNumber_ = child_.text
            RegistrationNumber_ = self.gds_validate_string(RegistrationNumber_, node, 'RegistrationNumber')
            self.RegistrationNumber = RegistrationNumber_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'SignificantMilitaryEquipmentIndicator':
            SignificantMilitaryEquipmentIndicator_ = child_.text
            SignificantMilitaryEquipmentIndicator_ = self.gds_validate_string(SignificantMilitaryEquipmentIndicator_, node, 'SignificantMilitaryEquipmentIndicator')
            self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator_
        elif nodeName_ == 'ACMNumber':
            ACMNumber_ = child_.text
            ACMNumber_ = self.gds_validate_string(ACMNumber_, node, 'ACMNumber')
            self.ACMNumber = ACMNumber_
# end class DDTCInformationType


GDSClassesMapping = {
    'InternationalForms': InternationalFormsType,
    'UnitOfMeasurement': CodeType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentConfirmRequest'
        rootClass = ShipmentConfirmRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentConfirmRequest'
        rootClass = ShipmentConfirmRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentConfirmRequest'
        rootClass = ShipmentConfirmRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentConfirmRequest'
        rootClass = ShipmentConfirmRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from ShipConfirmRequest import *\n\n')
        sys.stdout.write('import ShipConfirmRequest as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ADLAddressType",
    "AddressType",
    "AlternateDeliveryAddressType",
    "BillReceiverAddressType",
    "BillReceiverType",
    "BillShipperType",
    "BillThirdPartyConsigneeType",
    "BillThirdPartyShipperType",
    "BillThirdPartyType",
    "BlanketPeriodType",
    "CN22ContentType",
    "CN22FormType",
    "CodeType",
    "ContactsType",
    "CreditCardAddressType",
    "CreditCardType",
    "DDTCInformationType",
    "DGSignatoryInfoType",
    "DimensionsType",
    "DiscountType",
    "DryIceType",
    "DryIceWeightType",
    "EEIFilingOptionType",
    "EEIInformationType",
    "EEILicenseType",
    "ExcludeFromFormType",
    "ForwardAgentType",
    "FreightChargesType",
    "FreightCollectType",
    "HazMatPackageInformationType",
    "HazMatType",
    "ImageFormatCodeDescriptionType",
    "IndicationType",
    "InstructionCodeDescriptionType",
    "InsuranceChargesType",
    "InsuredValueCodeDescriptionType",
    "InsuredValueType",
    "IntermediateConsigneeType",
    "InternationalFormsType",
    "InvoiceLineTotalType",
    "ItemizedBillThirdPartyType",
    "ItemizedPaymentInformationType",
    "LabelDeliveryEMailMessageType",
    "LabelDeliveryType",
    "LabelImageFormatCodeDescriptionType",
    "LabelMethodType",
    "LabelPrintMethodCodeDescriptionType",
    "LabelSpecificationType",
    "LabelStockSizeType",
    "LanguageForUPSPremiumCareType",
    "LicenseType",
    "LocaleType",
    "NetCostDateRangeType",
    "OtherChargesType",
    "POAType",
    "PackageAssociatedType",
    "PackageServiceOptionsAccessPointCODType",
    "PackageServiceOptionsCODAmountType",
    "PackageServiceOptionsCODType",
    "PackageServiceOptionsDeliveryConfirmationType",
    "PackageServiceOptionsNotificationEMailMessageType",
    "PackageServiceOptionsNotificationType",
    "PackageServiceOptionsType",
    "PackageType",
    "PackageWeightType",
    "PackagingTypeType",
    "PackingListInfoType",
    "PaymentInformationType",
    "PhoneType",
    "PreAlertEMailMessageType",
    "PreAlertNotificationType",
    "PreAlertTextMessageType",
    "PreAlertVoiceMessageType",
    "PrepaidType",
    "ProducerType",
    "ProductType",
    "ProductWeightType",
    "PromotionalDiscountInformationType",
    "RateInformationType",
    "ReceiptSpecificationType",
    "ReferenceNumberType",
    "RequestType",
    "RestrictedArticlesType",
    "ReturnServiceType",
    "ScheduleBType",
    "ServiceType",
    "ShipFromAddressType",
    "ShipFromType",
    "ShipToAddressType",
    "ShipToType",
    "ShipmentChargeType",
    "ShipmentConfirmRequest",
    "ShipmentServiceOptionsAccessPointCODType",
    "ShipmentServiceOptionsCODAmountType",
    "ShipmentServiceOptionsCODType",
    "ShipmentServiceOptionsDeliveryConfirmationType",
    "ShipmentServiceOptionsNotificationEMailMessageType",
    "ShipmentServiceOptionsNotificationTextMessageType",
    "ShipmentServiceOptionsNotificationType",
    "ShipmentServiceOptionsNotificationVoiceMessageType",
    "ShipmentServiceOptionsType",
    "ShipmentType",
    "ShipperAddressType",
    "ShipperFiledType",
    "ShipperType",
    "SoldToAddressType",
    "SoldToType",
    "TaxIDCodeDescType",
    "ThirdPartyAddressType",
    "ThirdPartyType",
    "TransactionReferenceType",
    "UPSFiledType",
    "UPSPremiumCareFormType",
    "UltimateConsigneeType",
    "UltimateConsigneeTypeType",
    "UnitOfMeasurementType",
    "UnitType",
    "UserCreatedFormType",
    "VerbalConfirmationContactInfoType",
    "VerbalConfirmationType"
]
